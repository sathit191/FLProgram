//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace test2 {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DBxDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DBxDataSet : global::System.Data.DataSet {
        
        private FLDataDataTable tableFLData;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public DBxDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected DBxDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["FLData"] != null)) {
                    base.Tables.Add(new FLDataDataTable(ds.Tables["FLData"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FLDataDataTable FLData {
            get {
                return this.tableFLData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            DBxDataSet cln = ((DBxDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["FLData"] != null)) {
                    base.Tables.Add(new FLDataDataTable(ds.Tables["FLData"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableFLData = ((FLDataDataTable)(base.Tables["FLData"]));
            if ((initTable == true)) {
                if ((this.tableFLData != null)) {
                    this.tableFLData.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitClass() {
            this.DataSetName = "DBxDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DBxDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableFLData = new FLDataDataTable();
            base.Tables.Add(this.tableFLData);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeFLData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DBxDataSet ds = new DBxDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void FLDataRowChangeEventHandler(object sender, FLDataRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FLDataDataTable : global::System.Data.TypedTableBase<FLDataRow> {
            
            private global::System.Data.DataColumn columnMCNo;
            
            private global::System.Data.DataColumn columnLotNo;
            
            private global::System.Data.DataColumn columnLotStartTime;
            
            private global::System.Data.DataColumn columnMCType;
            
            private global::System.Data.DataColumn columnOPNo;
            
            private global::System.Data.DataColumn columnInputQty;
            
            private global::System.Data.DataColumn columnTotalGood;
            
            private global::System.Data.DataColumn columnTotalNG;
            
            private global::System.Data.DataColumn columnOPRate;
            
            private global::System.Data.DataColumn columnMaximumRPM;
            
            private global::System.Data.DataColumn columnAverageRPM;
            
            private global::System.Data.DataColumn columnMTBF;
            
            private global::System.Data.DataColumn columnMTTR;
            
            private global::System.Data.DataColumn columnAlarmTotal;
            
            private global::System.Data.DataColumn columnLotEndTime;
            
            private global::System.Data.DataColumn columnRunTime;
            
            private global::System.Data.DataColumn columnStopTime;
            
            private global::System.Data.DataColumn columnAlarmTime;
            
            private global::System.Data.DataColumn columnSelfConVersion;
            
            private global::System.Data.DataColumn columnNetVersion;
            
            private global::System.Data.DataColumn columnTestFlow;
            
            private global::System.Data.DataColumn columnLaserMark1;
            
            private global::System.Data.DataColumn columnLaserMark2;
            
            private global::System.Data.DataColumn columnLaserMark3;
            
            private global::System.Data.DataColumn columnOSProgram;
            
            private global::System.Data.DataColumn columnFTProgram;
            
            private global::System.Data.DataColumn columnTelekoCheck;
            
            private global::System.Data.DataColumn columnASICheck;
            
            private global::System.Data.DataColumn columnHasuuBefore;
            
            private global::System.Data.DataColumn columnHasuuNow;
            
            private global::System.Data.DataColumn columnFrontNG;
            
            private global::System.Data.DataColumn columnOS2NG;
            
            private global::System.Data.DataColumn columnFrontMarkerNG;
            
            private global::System.Data.DataColumn columnFLMarkerNG;
            
            private global::System.Data.DataColumn columnOSTesterNG;
            
            private global::System.Data.DataColumn columnFTTesterNG;
            
            private global::System.Data.DataColumn columnMarkingRecogNG;
            
            private global::System.Data.DataColumn columnMoldRecogNG;
            
            private global::System.Data.DataColumn columnTPRecogNG;
            
            private global::System.Data.DataColumn columnMekaNG1;
            
            private global::System.Data.DataColumn columnMekaNG2;
            
            private global::System.Data.DataColumn columnMekaNG3;
            
            private global::System.Data.DataColumn columnMekaNG4;
            
            private global::System.Data.DataColumn columnMekaNG5;
            
            private global::System.Data.DataColumn columnActualMekaNG1;
            
            private global::System.Data.DataColumn columnActualMekaNG2;
            
            private global::System.Data.DataColumn columnActualMekaNG3;
            
            private global::System.Data.DataColumn columnActualMekaNG4;
            
            private global::System.Data.DataColumn columnActualMekaNG5;
            
            private global::System.Data.DataColumn columnOSChPass1;
            
            private global::System.Data.DataColumn columnOSChPass2;
            
            private global::System.Data.DataColumn columnOSChPass3;
            
            private global::System.Data.DataColumn columnOSChPass4;
            
            private global::System.Data.DataColumn columnOSChPass5;
            
            private global::System.Data.DataColumn columnOSChPass6;
            
            private global::System.Data.DataColumn columnOSChPass7;
            
            private global::System.Data.DataColumn columnOSChPass8;
            
            private global::System.Data.DataColumn columnOS1ChFail1;
            
            private global::System.Data.DataColumn columnOS1ChFail2;
            
            private global::System.Data.DataColumn columnOS1ChFail3;
            
            private global::System.Data.DataColumn columnOS1ChFail4;
            
            private global::System.Data.DataColumn columnOS1ChFail5;
            
            private global::System.Data.DataColumn columnOS1ChFail6;
            
            private global::System.Data.DataColumn columnOS1ChFail7;
            
            private global::System.Data.DataColumn columnOS1ChFail8;
            
            private global::System.Data.DataColumn columnOS2ChFail1;
            
            private global::System.Data.DataColumn columnOS2ChFail2;
            
            private global::System.Data.DataColumn columnOS2ChFail3;
            
            private global::System.Data.DataColumn columnOS2ChFail4;
            
            private global::System.Data.DataColumn columnOS2ChFail5;
            
            private global::System.Data.DataColumn columnOS2ChFail6;
            
            private global::System.Data.DataColumn columnOS2ChFail7;
            
            private global::System.Data.DataColumn columnOS2ChFail8;
            
            private global::System.Data.DataColumn columnOSChRetry1;
            
            private global::System.Data.DataColumn columnOSChRetry2;
            
            private global::System.Data.DataColumn columnOSChRetry3;
            
            private global::System.Data.DataColumn columnOSChRetry4;
            
            private global::System.Data.DataColumn columnOSChRetry5;
            
            private global::System.Data.DataColumn columnOSChRetry6;
            
            private global::System.Data.DataColumn columnOSChRetry7;
            
            private global::System.Data.DataColumn columnOSChRetry8;
            
            private global::System.Data.DataColumn columnFTChPass1;
            
            private global::System.Data.DataColumn columnFTChPass2;
            
            private global::System.Data.DataColumn columnFTChPass3;
            
            private global::System.Data.DataColumn columnFTChPass4;
            
            private global::System.Data.DataColumn columnFTChPass5;
            
            private global::System.Data.DataColumn columnFTChPass6;
            
            private global::System.Data.DataColumn columnFTChPass7;
            
            private global::System.Data.DataColumn columnFTChPass8;
            
            private global::System.Data.DataColumn columnFTChFail1;
            
            private global::System.Data.DataColumn columnFTChFail2;
            
            private global::System.Data.DataColumn columnFTChFail3;
            
            private global::System.Data.DataColumn columnFTChFail4;
            
            private global::System.Data.DataColumn columnFTChFail5;
            
            private global::System.Data.DataColumn columnFTChFail6;
            
            private global::System.Data.DataColumn columnFTChFail7;
            
            private global::System.Data.DataColumn columnFTChFail8;
            
            private global::System.Data.DataColumn columnFTChRetry1;
            
            private global::System.Data.DataColumn columnFTChRetry2;
            
            private global::System.Data.DataColumn columnFTChRetry3;
            
            private global::System.Data.DataColumn columnFTChRetry4;
            
            private global::System.Data.DataColumn columnFTChRetry5;
            
            private global::System.Data.DataColumn columnFTChRetry6;
            
            private global::System.Data.DataColumn columnFTChRetry7;
            
            private global::System.Data.DataColumn columnFTChRetry8;
            
            private global::System.Data.DataColumn columnWaferLotNo;
            
            private global::System.Data.DataColumn columnTempOSYield;
            
            private global::System.Data.DataColumn columnTempFTYield;
            
            private global::System.Data.DataColumn columnNomarkCheck;
            
            private global::System.Data.DataColumn columnMCProgramVersion1;
            
            private global::System.Data.DataColumn columnMCProgramVersion2;
            
            private global::System.Data.DataColumn columnMCProgramVersion3;
            
            private global::System.Data.DataColumn columnMCProgramVersion4;
            
            private global::System.Data.DataColumn columnKanagataCheck;
            
            private global::System.Data.DataColumn columnVacuumCheck;
            
            private global::System.Data.DataColumn columnDBNG;
            
            private global::System.Data.DataColumn columnPNashiNG;
            
            private global::System.Data.DataColumn columnWBNG;
            
            private global::System.Data.DataColumn columnWBInspectionNG;
            
            private global::System.Data.DataColumn columnTurningOnRank;
            
            private global::System.Data.DataColumn columnMissingIC;
            
            private global::System.Data.DataColumn columnMissingICGL;
            
            private global::System.Data.DataColumn columnFTSampleCheck;
            
            private global::System.Data.DataColumn columnJigCheck;
            
            private global::System.Data.DataColumn columnKanaCleanBefore;
            
            private global::System.Data.DataColumn columnKanaCleanAfter;
            
            private global::System.Data.DataColumn columnNGSampleCheck_Pn;
            
            private global::System.Data.DataColumn columnNGSampleCheck_N;
            
            private global::System.Data.DataColumn columnVisualCheckMode;
            
            private global::System.Data.DataColumn columnVisualCheckAbnormal;
            
            private global::System.Data.DataColumn columnVisualCheckAdjust;
            
            private global::System.Data.DataColumn columnFirstShotCheckMode;
            
            private global::System.Data.DataColumn columnFirstShotCheckModeAbnormal;
            
            private global::System.Data.DataColumn columnFirstShotCheckModeAdjust;
            
            private global::System.Data.DataColumn columnEmbossTapeChange;
            
            private global::System.Data.DataColumn columnCoverTapeChange;
            
            private global::System.Data.DataColumn columnIronStampCleaning;
            
            private global::System.Data.DataColumn columnGLCheck;
            
            private global::System.Data.DataColumn columnLotJudgement;
            
            private global::System.Data.DataColumn columnGoodAdjust;
            
            private global::System.Data.DataColumn columnNGAdjust;
            
            private global::System.Data.DataColumn columnFTNGAdjust;
            
            private global::System.Data.DataColumn columnOSNGAdjust;
            
            private global::System.Data.DataColumn columnMekaNGAdjust;
            
            private global::System.Data.DataColumn columnMarkerNGAdjust;
            
            private global::System.Data.DataColumn columnTPRecogNGadjust;
            
            private global::System.Data.DataColumn columnOPJudgement;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columnInputQtyAdjust;
            
            private global::System.Data.DataColumn columnEmbossTapeNo;
            
            private global::System.Data.DataColumn columnMoldRecogNGAdjust;
            
            private global::System.Data.DataColumn columnTGCondition;
            
            private global::System.Data.DataColumn columnHasuuNowAdjust;
            
            private global::System.Data.DataColumn columnFirstInspTestHead;
            
            private global::System.Data.DataColumn columnOutsourceLotNo;
            
            private global::System.Data.DataColumn columnContainerBoxNo;
            
            private global::System.Data.DataColumn columnsumyld;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public FLDataDataTable() {
                this.TableName = "FLData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal FLDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected FLDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MCNoColumn {
                get {
                    return this.columnMCNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn LotNoColumn {
                get {
                    return this.columnLotNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn LotStartTimeColumn {
                get {
                    return this.columnLotStartTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MCTypeColumn {
                get {
                    return this.columnMCType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OPNoColumn {
                get {
                    return this.columnOPNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn InputQtyColumn {
                get {
                    return this.columnInputQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TotalGoodColumn {
                get {
                    return this.columnTotalGood;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TotalNGColumn {
                get {
                    return this.columnTotalNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OPRateColumn {
                get {
                    return this.columnOPRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MaximumRPMColumn {
                get {
                    return this.columnMaximumRPM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn AverageRPMColumn {
                get {
                    return this.columnAverageRPM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MTBFColumn {
                get {
                    return this.columnMTBF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MTTRColumn {
                get {
                    return this.columnMTTR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn AlarmTotalColumn {
                get {
                    return this.columnAlarmTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn LotEndTimeColumn {
                get {
                    return this.columnLotEndTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn RunTimeColumn {
                get {
                    return this.columnRunTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn StopTimeColumn {
                get {
                    return this.columnStopTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn AlarmTimeColumn {
                get {
                    return this.columnAlarmTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn SelfConVersionColumn {
                get {
                    return this.columnSelfConVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn NetVersionColumn {
                get {
                    return this.columnNetVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TestFlowColumn {
                get {
                    return this.columnTestFlow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn LaserMark1Column {
                get {
                    return this.columnLaserMark1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn LaserMark2Column {
                get {
                    return this.columnLaserMark2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn LaserMark3Column {
                get {
                    return this.columnLaserMark3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSProgramColumn {
                get {
                    return this.columnOSProgram;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTProgramColumn {
                get {
                    return this.columnFTProgram;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TelekoCheckColumn {
                get {
                    return this.columnTelekoCheck;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ASICheckColumn {
                get {
                    return this.columnASICheck;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn HasuuBeforeColumn {
                get {
                    return this.columnHasuuBefore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn HasuuNowColumn {
                get {
                    return this.columnHasuuNow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FrontNGColumn {
                get {
                    return this.columnFrontNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OS2NGColumn {
                get {
                    return this.columnOS2NG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FrontMarkerNGColumn {
                get {
                    return this.columnFrontMarkerNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FLMarkerNGColumn {
                get {
                    return this.columnFLMarkerNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSTesterNGColumn {
                get {
                    return this.columnOSTesterNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTTesterNGColumn {
                get {
                    return this.columnFTTesterNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MarkingRecogNGColumn {
                get {
                    return this.columnMarkingRecogNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MoldRecogNGColumn {
                get {
                    return this.columnMoldRecogNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TPRecogNGColumn {
                get {
                    return this.columnTPRecogNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MekaNG1Column {
                get {
                    return this.columnMekaNG1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MekaNG2Column {
                get {
                    return this.columnMekaNG2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MekaNG3Column {
                get {
                    return this.columnMekaNG3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MekaNG4Column {
                get {
                    return this.columnMekaNG4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MekaNG5Column {
                get {
                    return this.columnMekaNG5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ActualMekaNG1Column {
                get {
                    return this.columnActualMekaNG1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ActualMekaNG2Column {
                get {
                    return this.columnActualMekaNG2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ActualMekaNG3Column {
                get {
                    return this.columnActualMekaNG3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ActualMekaNG4Column {
                get {
                    return this.columnActualMekaNG4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ActualMekaNG5Column {
                get {
                    return this.columnActualMekaNG5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSChPass1Column {
                get {
                    return this.columnOSChPass1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSChPass2Column {
                get {
                    return this.columnOSChPass2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSChPass3Column {
                get {
                    return this.columnOSChPass3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSChPass4Column {
                get {
                    return this.columnOSChPass4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSChPass5Column {
                get {
                    return this.columnOSChPass5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSChPass6Column {
                get {
                    return this.columnOSChPass6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSChPass7Column {
                get {
                    return this.columnOSChPass7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSChPass8Column {
                get {
                    return this.columnOSChPass8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OS1ChFail1Column {
                get {
                    return this.columnOS1ChFail1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OS1ChFail2Column {
                get {
                    return this.columnOS1ChFail2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OS1ChFail3Column {
                get {
                    return this.columnOS1ChFail3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OS1ChFail4Column {
                get {
                    return this.columnOS1ChFail4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OS1ChFail5Column {
                get {
                    return this.columnOS1ChFail5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OS1ChFail6Column {
                get {
                    return this.columnOS1ChFail6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OS1ChFail7Column {
                get {
                    return this.columnOS1ChFail7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OS1ChFail8Column {
                get {
                    return this.columnOS1ChFail8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OS2ChFail1Column {
                get {
                    return this.columnOS2ChFail1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OS2ChFail2Column {
                get {
                    return this.columnOS2ChFail2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OS2ChFail3Column {
                get {
                    return this.columnOS2ChFail3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OS2ChFail4Column {
                get {
                    return this.columnOS2ChFail4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OS2ChFail5Column {
                get {
                    return this.columnOS2ChFail5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OS2ChFail6Column {
                get {
                    return this.columnOS2ChFail6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OS2ChFail7Column {
                get {
                    return this.columnOS2ChFail7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OS2ChFail8Column {
                get {
                    return this.columnOS2ChFail8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSChRetry1Column {
                get {
                    return this.columnOSChRetry1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSChRetry2Column {
                get {
                    return this.columnOSChRetry2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSChRetry3Column {
                get {
                    return this.columnOSChRetry3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSChRetry4Column {
                get {
                    return this.columnOSChRetry4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSChRetry5Column {
                get {
                    return this.columnOSChRetry5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSChRetry6Column {
                get {
                    return this.columnOSChRetry6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSChRetry7Column {
                get {
                    return this.columnOSChRetry7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSChRetry8Column {
                get {
                    return this.columnOSChRetry8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChPass1Column {
                get {
                    return this.columnFTChPass1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChPass2Column {
                get {
                    return this.columnFTChPass2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChPass3Column {
                get {
                    return this.columnFTChPass3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChPass4Column {
                get {
                    return this.columnFTChPass4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChPass5Column {
                get {
                    return this.columnFTChPass5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChPass6Column {
                get {
                    return this.columnFTChPass6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChPass7Column {
                get {
                    return this.columnFTChPass7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChPass8Column {
                get {
                    return this.columnFTChPass8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChFail1Column {
                get {
                    return this.columnFTChFail1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChFail2Column {
                get {
                    return this.columnFTChFail2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChFail3Column {
                get {
                    return this.columnFTChFail3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChFail4Column {
                get {
                    return this.columnFTChFail4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChFail5Column {
                get {
                    return this.columnFTChFail5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChFail6Column {
                get {
                    return this.columnFTChFail6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChFail7Column {
                get {
                    return this.columnFTChFail7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChFail8Column {
                get {
                    return this.columnFTChFail8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChRetry1Column {
                get {
                    return this.columnFTChRetry1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChRetry2Column {
                get {
                    return this.columnFTChRetry2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChRetry3Column {
                get {
                    return this.columnFTChRetry3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChRetry4Column {
                get {
                    return this.columnFTChRetry4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChRetry5Column {
                get {
                    return this.columnFTChRetry5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChRetry6Column {
                get {
                    return this.columnFTChRetry6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChRetry7Column {
                get {
                    return this.columnFTChRetry7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTChRetry8Column {
                get {
                    return this.columnFTChRetry8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn WaferLotNoColumn {
                get {
                    return this.columnWaferLotNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TempOSYieldColumn {
                get {
                    return this.columnTempOSYield;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TempFTYieldColumn {
                get {
                    return this.columnTempFTYield;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn NomarkCheckColumn {
                get {
                    return this.columnNomarkCheck;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MCProgramVersion1Column {
                get {
                    return this.columnMCProgramVersion1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MCProgramVersion2Column {
                get {
                    return this.columnMCProgramVersion2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MCProgramVersion3Column {
                get {
                    return this.columnMCProgramVersion3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MCProgramVersion4Column {
                get {
                    return this.columnMCProgramVersion4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn KanagataCheckColumn {
                get {
                    return this.columnKanagataCheck;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn VacuumCheckColumn {
                get {
                    return this.columnVacuumCheck;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn DBNGColumn {
                get {
                    return this.columnDBNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn PNashiNGColumn {
                get {
                    return this.columnPNashiNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn WBNGColumn {
                get {
                    return this.columnWBNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn WBInspectionNGColumn {
                get {
                    return this.columnWBInspectionNG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TurningOnRankColumn {
                get {
                    return this.columnTurningOnRank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MissingICColumn {
                get {
                    return this.columnMissingIC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MissingICGLColumn {
                get {
                    return this.columnMissingICGL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTSampleCheckColumn {
                get {
                    return this.columnFTSampleCheck;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn JigCheckColumn {
                get {
                    return this.columnJigCheck;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn KanaCleanBeforeColumn {
                get {
                    return this.columnKanaCleanBefore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn KanaCleanAfterColumn {
                get {
                    return this.columnKanaCleanAfter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn NGSampleCheck_PnColumn {
                get {
                    return this.columnNGSampleCheck_Pn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn NGSampleCheck_NColumn {
                get {
                    return this.columnNGSampleCheck_N;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn VisualCheckModeColumn {
                get {
                    return this.columnVisualCheckMode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn VisualCheckAbnormalColumn {
                get {
                    return this.columnVisualCheckAbnormal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn VisualCheckAdjustColumn {
                get {
                    return this.columnVisualCheckAdjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FirstShotCheckModeColumn {
                get {
                    return this.columnFirstShotCheckMode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FirstShotCheckModeAbnormalColumn {
                get {
                    return this.columnFirstShotCheckModeAbnormal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FirstShotCheckModeAdjustColumn {
                get {
                    return this.columnFirstShotCheckModeAdjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn EmbossTapeChangeColumn {
                get {
                    return this.columnEmbossTapeChange;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn CoverTapeChangeColumn {
                get {
                    return this.columnCoverTapeChange;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn IronStampCleaningColumn {
                get {
                    return this.columnIronStampCleaning;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn GLCheckColumn {
                get {
                    return this.columnGLCheck;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn LotJudgementColumn {
                get {
                    return this.columnLotJudgement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn GoodAdjustColumn {
                get {
                    return this.columnGoodAdjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn NGAdjustColumn {
                get {
                    return this.columnNGAdjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FTNGAdjustColumn {
                get {
                    return this.columnFTNGAdjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OSNGAdjustColumn {
                get {
                    return this.columnOSNGAdjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MekaNGAdjustColumn {
                get {
                    return this.columnMekaNGAdjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MarkerNGAdjustColumn {
                get {
                    return this.columnMarkerNGAdjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TPRecogNGadjustColumn {
                get {
                    return this.columnTPRecogNGadjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OPJudgementColumn {
                get {
                    return this.columnOPJudgement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn InputQtyAdjustColumn {
                get {
                    return this.columnInputQtyAdjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn EmbossTapeNoColumn {
                get {
                    return this.columnEmbossTapeNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn MoldRecogNGAdjustColumn {
                get {
                    return this.columnMoldRecogNGAdjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TGConditionColumn {
                get {
                    return this.columnTGCondition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn HasuuNowAdjustColumn {
                get {
                    return this.columnHasuuNowAdjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn FirstInspTestHeadColumn {
                get {
                    return this.columnFirstInspTestHead;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn OutsourceLotNoColumn {
                get {
                    return this.columnOutsourceLotNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ContainerBoxNoColumn {
                get {
                    return this.columnContainerBoxNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn sumyldColumn {
                get {
                    return this.columnsumyld;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public FLDataRow this[int index] {
                get {
                    return ((FLDataRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event FLDataRowChangeEventHandler FLDataRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event FLDataRowChangeEventHandler FLDataRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event FLDataRowChangeEventHandler FLDataRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event FLDataRowChangeEventHandler FLDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddFLDataRow(FLDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public FLDataRow AddFLDataRow(
                        string MCNo, 
                        string LotNo, 
                        System.DateTime LotStartTime, 
                        string MCType, 
                        string OPNo, 
                        short InputQty, 
                        short TotalGood, 
                        short TotalNG, 
                        float OPRate, 
                        float MaximumRPM, 
                        float AverageRPM, 
                        float MTBF, 
                        float MTTR, 
                        short AlarmTotal, 
                        System.DateTime LotEndTime, 
                        float RunTime, 
                        float StopTime, 
                        float AlarmTime, 
                        string SelfConVersion, 
                        string NetVersion, 
                        string TestFlow, 
                        string LaserMark1, 
                        string LaserMark2, 
                        string LaserMark3, 
                        string OSProgram, 
                        string FTProgram, 
                        string TelekoCheck, 
                        string ASICheck, 
                        short HasuuBefore, 
                        short HasuuNow, 
                        short FrontNG, 
                        short OS2NG, 
                        short FrontMarkerNG, 
                        short FLMarkerNG, 
                        short OSTesterNG, 
                        short FTTesterNG, 
                        short MarkingRecogNG, 
                        short MoldRecogNG, 
                        short TPRecogNG, 
                        short MekaNG1, 
                        short MekaNG2, 
                        short MekaNG3, 
                        short MekaNG4, 
                        short MekaNG5, 
                        short ActualMekaNG1, 
                        short ActualMekaNG2, 
                        short ActualMekaNG3, 
                        short ActualMekaNG4, 
                        short ActualMekaNG5, 
                        short OSChPass1, 
                        short OSChPass2, 
                        short OSChPass3, 
                        short OSChPass4, 
                        short OSChPass5, 
                        short OSChPass6, 
                        short OSChPass7, 
                        short OSChPass8, 
                        short OS1ChFail1, 
                        short OS1ChFail2, 
                        short OS1ChFail3, 
                        short OS1ChFail4, 
                        short OS1ChFail5, 
                        short OS1ChFail6, 
                        short OS1ChFail7, 
                        short OS1ChFail8, 
                        short OS2ChFail1, 
                        short OS2ChFail2, 
                        short OS2ChFail3, 
                        short OS2ChFail4, 
                        short OS2ChFail5, 
                        short OS2ChFail6, 
                        short OS2ChFail7, 
                        short OS2ChFail8, 
                        short OSChRetry1, 
                        short OSChRetry2, 
                        short OSChRetry3, 
                        short OSChRetry4, 
                        short OSChRetry5, 
                        short OSChRetry6, 
                        short OSChRetry7, 
                        short OSChRetry8, 
                        short FTChPass1, 
                        short FTChPass2, 
                        short FTChPass3, 
                        short FTChPass4, 
                        short FTChPass5, 
                        short FTChPass6, 
                        short FTChPass7, 
                        short FTChPass8, 
                        short FTChFail1, 
                        short FTChFail2, 
                        short FTChFail3, 
                        short FTChFail4, 
                        short FTChFail5, 
                        short FTChFail6, 
                        short FTChFail7, 
                        short FTChFail8, 
                        short FTChRetry1, 
                        short FTChRetry2, 
                        short FTChRetry3, 
                        short FTChRetry4, 
                        short FTChRetry5, 
                        short FTChRetry6, 
                        short FTChRetry7, 
                        short FTChRetry8, 
                        string WaferLotNo, 
                        float TempOSYield, 
                        float TempFTYield, 
                        string NomarkCheck, 
                        string MCProgramVersion1, 
                        string MCProgramVersion2, 
                        string MCProgramVersion3, 
                        string MCProgramVersion4, 
                        string KanagataCheck, 
                        string VacuumCheck, 
                        short DBNG, 
                        short PNashiNG, 
                        short WBNG, 
                        short WBInspectionNG, 
                        string TurningOnRank, 
                        short MissingIC, 
                        bool MissingICGL, 
                        string FTSampleCheck, 
                        string JigCheck, 
                        string KanaCleanBefore, 
                        string KanaCleanAfter, 
                        short NGSampleCheck_Pn, 
                        short NGSampleCheck_N, 
                        string VisualCheckMode, 
                        string VisualCheckAbnormal, 
                        string VisualCheckAdjust, 
                        string FirstShotCheckMode, 
                        string FirstShotCheckModeAbnormal, 
                        string FirstShotCheckModeAdjust, 
                        short EmbossTapeChange, 
                        short CoverTapeChange, 
                        short IronStampCleaning, 
                        string GLCheck, 
                        string LotJudgement, 
                        short GoodAdjust, 
                        short NGAdjust, 
                        short FTNGAdjust, 
                        short OSNGAdjust, 
                        short MekaNGAdjust, 
                        short MarkerNGAdjust, 
                        short TPRecogNGadjust, 
                        string OPJudgement, 
                        string Remark, 
                        short InputQtyAdjust, 
                        string EmbossTapeNo, 
                        short MoldRecogNGAdjust, 
                        string TGCondition, 
                        short HasuuNowAdjust, 
                        string FirstInspTestHead, 
                        string OutsourceLotNo, 
                        string ContainerBoxNo, 
                        float sumyld) {
                FLDataRow rowFLDataRow = ((FLDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MCNo,
                        LotNo,
                        LotStartTime,
                        MCType,
                        OPNo,
                        InputQty,
                        TotalGood,
                        TotalNG,
                        OPRate,
                        MaximumRPM,
                        AverageRPM,
                        MTBF,
                        MTTR,
                        AlarmTotal,
                        LotEndTime,
                        RunTime,
                        StopTime,
                        AlarmTime,
                        SelfConVersion,
                        NetVersion,
                        TestFlow,
                        LaserMark1,
                        LaserMark2,
                        LaserMark3,
                        OSProgram,
                        FTProgram,
                        TelekoCheck,
                        ASICheck,
                        HasuuBefore,
                        HasuuNow,
                        FrontNG,
                        OS2NG,
                        FrontMarkerNG,
                        FLMarkerNG,
                        OSTesterNG,
                        FTTesterNG,
                        MarkingRecogNG,
                        MoldRecogNG,
                        TPRecogNG,
                        MekaNG1,
                        MekaNG2,
                        MekaNG3,
                        MekaNG4,
                        MekaNG5,
                        ActualMekaNG1,
                        ActualMekaNG2,
                        ActualMekaNG3,
                        ActualMekaNG4,
                        ActualMekaNG5,
                        OSChPass1,
                        OSChPass2,
                        OSChPass3,
                        OSChPass4,
                        OSChPass5,
                        OSChPass6,
                        OSChPass7,
                        OSChPass8,
                        OS1ChFail1,
                        OS1ChFail2,
                        OS1ChFail3,
                        OS1ChFail4,
                        OS1ChFail5,
                        OS1ChFail6,
                        OS1ChFail7,
                        OS1ChFail8,
                        OS2ChFail1,
                        OS2ChFail2,
                        OS2ChFail3,
                        OS2ChFail4,
                        OS2ChFail5,
                        OS2ChFail6,
                        OS2ChFail7,
                        OS2ChFail8,
                        OSChRetry1,
                        OSChRetry2,
                        OSChRetry3,
                        OSChRetry4,
                        OSChRetry5,
                        OSChRetry6,
                        OSChRetry7,
                        OSChRetry8,
                        FTChPass1,
                        FTChPass2,
                        FTChPass3,
                        FTChPass4,
                        FTChPass5,
                        FTChPass6,
                        FTChPass7,
                        FTChPass8,
                        FTChFail1,
                        FTChFail2,
                        FTChFail3,
                        FTChFail4,
                        FTChFail5,
                        FTChFail6,
                        FTChFail7,
                        FTChFail8,
                        FTChRetry1,
                        FTChRetry2,
                        FTChRetry3,
                        FTChRetry4,
                        FTChRetry5,
                        FTChRetry6,
                        FTChRetry7,
                        FTChRetry8,
                        WaferLotNo,
                        TempOSYield,
                        TempFTYield,
                        NomarkCheck,
                        MCProgramVersion1,
                        MCProgramVersion2,
                        MCProgramVersion3,
                        MCProgramVersion4,
                        KanagataCheck,
                        VacuumCheck,
                        DBNG,
                        PNashiNG,
                        WBNG,
                        WBInspectionNG,
                        TurningOnRank,
                        MissingIC,
                        MissingICGL,
                        FTSampleCheck,
                        JigCheck,
                        KanaCleanBefore,
                        KanaCleanAfter,
                        NGSampleCheck_Pn,
                        NGSampleCheck_N,
                        VisualCheckMode,
                        VisualCheckAbnormal,
                        VisualCheckAdjust,
                        FirstShotCheckMode,
                        FirstShotCheckModeAbnormal,
                        FirstShotCheckModeAdjust,
                        EmbossTapeChange,
                        CoverTapeChange,
                        IronStampCleaning,
                        GLCheck,
                        LotJudgement,
                        GoodAdjust,
                        NGAdjust,
                        FTNGAdjust,
                        OSNGAdjust,
                        MekaNGAdjust,
                        MarkerNGAdjust,
                        TPRecogNGadjust,
                        OPJudgement,
                        Remark,
                        InputQtyAdjust,
                        EmbossTapeNo,
                        MoldRecogNGAdjust,
                        TGCondition,
                        HasuuNowAdjust,
                        FirstInspTestHead,
                        OutsourceLotNo,
                        ContainerBoxNo,
                        sumyld};
                rowFLDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFLDataRow);
                return rowFLDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public FLDataRow FindByMCNoLotNoLotStartTime(string MCNo, string LotNo, System.DateTime LotStartTime) {
                return ((FLDataRow)(this.Rows.Find(new object[] {
                            MCNo,
                            LotNo,
                            LotStartTime})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                FLDataDataTable cln = ((FLDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FLDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars() {
                this.columnMCNo = base.Columns["MCNo"];
                this.columnLotNo = base.Columns["LotNo"];
                this.columnLotStartTime = base.Columns["LotStartTime"];
                this.columnMCType = base.Columns["MCType"];
                this.columnOPNo = base.Columns["OPNo"];
                this.columnInputQty = base.Columns["InputQty"];
                this.columnTotalGood = base.Columns["TotalGood"];
                this.columnTotalNG = base.Columns["TotalNG"];
                this.columnOPRate = base.Columns["OPRate"];
                this.columnMaximumRPM = base.Columns["MaximumRPM"];
                this.columnAverageRPM = base.Columns["AverageRPM"];
                this.columnMTBF = base.Columns["MTBF"];
                this.columnMTTR = base.Columns["MTTR"];
                this.columnAlarmTotal = base.Columns["AlarmTotal"];
                this.columnLotEndTime = base.Columns["LotEndTime"];
                this.columnRunTime = base.Columns["RunTime"];
                this.columnStopTime = base.Columns["StopTime"];
                this.columnAlarmTime = base.Columns["AlarmTime"];
                this.columnSelfConVersion = base.Columns["SelfConVersion"];
                this.columnNetVersion = base.Columns["NetVersion"];
                this.columnTestFlow = base.Columns["TestFlow"];
                this.columnLaserMark1 = base.Columns["LaserMark1"];
                this.columnLaserMark2 = base.Columns["LaserMark2"];
                this.columnLaserMark3 = base.Columns["LaserMark3"];
                this.columnOSProgram = base.Columns["OSProgram"];
                this.columnFTProgram = base.Columns["FTProgram"];
                this.columnTelekoCheck = base.Columns["TelekoCheck"];
                this.columnASICheck = base.Columns["ASICheck"];
                this.columnHasuuBefore = base.Columns["HasuuBefore"];
                this.columnHasuuNow = base.Columns["HasuuNow"];
                this.columnFrontNG = base.Columns["FrontNG"];
                this.columnOS2NG = base.Columns["OS2NG"];
                this.columnFrontMarkerNG = base.Columns["FrontMarkerNG"];
                this.columnFLMarkerNG = base.Columns["FLMarkerNG"];
                this.columnOSTesterNG = base.Columns["OSTesterNG"];
                this.columnFTTesterNG = base.Columns["FTTesterNG"];
                this.columnMarkingRecogNG = base.Columns["MarkingRecogNG"];
                this.columnMoldRecogNG = base.Columns["MoldRecogNG"];
                this.columnTPRecogNG = base.Columns["TPRecogNG"];
                this.columnMekaNG1 = base.Columns["MekaNG1"];
                this.columnMekaNG2 = base.Columns["MekaNG2"];
                this.columnMekaNG3 = base.Columns["MekaNG3"];
                this.columnMekaNG4 = base.Columns["MekaNG4"];
                this.columnMekaNG5 = base.Columns["MekaNG5"];
                this.columnActualMekaNG1 = base.Columns["ActualMekaNG1"];
                this.columnActualMekaNG2 = base.Columns["ActualMekaNG2"];
                this.columnActualMekaNG3 = base.Columns["ActualMekaNG3"];
                this.columnActualMekaNG4 = base.Columns["ActualMekaNG4"];
                this.columnActualMekaNG5 = base.Columns["ActualMekaNG5"];
                this.columnOSChPass1 = base.Columns["OSChPass1"];
                this.columnOSChPass2 = base.Columns["OSChPass2"];
                this.columnOSChPass3 = base.Columns["OSChPass3"];
                this.columnOSChPass4 = base.Columns["OSChPass4"];
                this.columnOSChPass5 = base.Columns["OSChPass5"];
                this.columnOSChPass6 = base.Columns["OSChPass6"];
                this.columnOSChPass7 = base.Columns["OSChPass7"];
                this.columnOSChPass8 = base.Columns["OSChPass8"];
                this.columnOS1ChFail1 = base.Columns["OS1ChFail1"];
                this.columnOS1ChFail2 = base.Columns["OS1ChFail2"];
                this.columnOS1ChFail3 = base.Columns["OS1ChFail3"];
                this.columnOS1ChFail4 = base.Columns["OS1ChFail4"];
                this.columnOS1ChFail5 = base.Columns["OS1ChFail5"];
                this.columnOS1ChFail6 = base.Columns["OS1ChFail6"];
                this.columnOS1ChFail7 = base.Columns["OS1ChFail7"];
                this.columnOS1ChFail8 = base.Columns["OS1ChFail8"];
                this.columnOS2ChFail1 = base.Columns["OS2ChFail1"];
                this.columnOS2ChFail2 = base.Columns["OS2ChFail2"];
                this.columnOS2ChFail3 = base.Columns["OS2ChFail3"];
                this.columnOS2ChFail4 = base.Columns["OS2ChFail4"];
                this.columnOS2ChFail5 = base.Columns["OS2ChFail5"];
                this.columnOS2ChFail6 = base.Columns["OS2ChFail6"];
                this.columnOS2ChFail7 = base.Columns["OS2ChFail7"];
                this.columnOS2ChFail8 = base.Columns["OS2ChFail8"];
                this.columnOSChRetry1 = base.Columns["OSChRetry1"];
                this.columnOSChRetry2 = base.Columns["OSChRetry2"];
                this.columnOSChRetry3 = base.Columns["OSChRetry3"];
                this.columnOSChRetry4 = base.Columns["OSChRetry4"];
                this.columnOSChRetry5 = base.Columns["OSChRetry5"];
                this.columnOSChRetry6 = base.Columns["OSChRetry6"];
                this.columnOSChRetry7 = base.Columns["OSChRetry7"];
                this.columnOSChRetry8 = base.Columns["OSChRetry8"];
                this.columnFTChPass1 = base.Columns["FTChPass1"];
                this.columnFTChPass2 = base.Columns["FTChPass2"];
                this.columnFTChPass3 = base.Columns["FTChPass3"];
                this.columnFTChPass4 = base.Columns["FTChPass4"];
                this.columnFTChPass5 = base.Columns["FTChPass5"];
                this.columnFTChPass6 = base.Columns["FTChPass6"];
                this.columnFTChPass7 = base.Columns["FTChPass7"];
                this.columnFTChPass8 = base.Columns["FTChPass8"];
                this.columnFTChFail1 = base.Columns["FTChFail1"];
                this.columnFTChFail2 = base.Columns["FTChFail2"];
                this.columnFTChFail3 = base.Columns["FTChFail3"];
                this.columnFTChFail4 = base.Columns["FTChFail4"];
                this.columnFTChFail5 = base.Columns["FTChFail5"];
                this.columnFTChFail6 = base.Columns["FTChFail6"];
                this.columnFTChFail7 = base.Columns["FTChFail7"];
                this.columnFTChFail8 = base.Columns["FTChFail8"];
                this.columnFTChRetry1 = base.Columns["FTChRetry1"];
                this.columnFTChRetry2 = base.Columns["FTChRetry2"];
                this.columnFTChRetry3 = base.Columns["FTChRetry3"];
                this.columnFTChRetry4 = base.Columns["FTChRetry4"];
                this.columnFTChRetry5 = base.Columns["FTChRetry5"];
                this.columnFTChRetry6 = base.Columns["FTChRetry6"];
                this.columnFTChRetry7 = base.Columns["FTChRetry7"];
                this.columnFTChRetry8 = base.Columns["FTChRetry8"];
                this.columnWaferLotNo = base.Columns["WaferLotNo"];
                this.columnTempOSYield = base.Columns["TempOSYield"];
                this.columnTempFTYield = base.Columns["TempFTYield"];
                this.columnNomarkCheck = base.Columns["NomarkCheck"];
                this.columnMCProgramVersion1 = base.Columns["MCProgramVersion1"];
                this.columnMCProgramVersion2 = base.Columns["MCProgramVersion2"];
                this.columnMCProgramVersion3 = base.Columns["MCProgramVersion3"];
                this.columnMCProgramVersion4 = base.Columns["MCProgramVersion4"];
                this.columnKanagataCheck = base.Columns["KanagataCheck"];
                this.columnVacuumCheck = base.Columns["VacuumCheck"];
                this.columnDBNG = base.Columns["DBNG"];
                this.columnPNashiNG = base.Columns["PNashiNG"];
                this.columnWBNG = base.Columns["WBNG"];
                this.columnWBInspectionNG = base.Columns["WBInspectionNG"];
                this.columnTurningOnRank = base.Columns["TurningOnRank"];
                this.columnMissingIC = base.Columns["MissingIC"];
                this.columnMissingICGL = base.Columns["MissingICGL"];
                this.columnFTSampleCheck = base.Columns["FTSampleCheck"];
                this.columnJigCheck = base.Columns["JigCheck"];
                this.columnKanaCleanBefore = base.Columns["KanaCleanBefore"];
                this.columnKanaCleanAfter = base.Columns["KanaCleanAfter"];
                this.columnNGSampleCheck_Pn = base.Columns["NGSampleCheck_Pn"];
                this.columnNGSampleCheck_N = base.Columns["NGSampleCheck_N"];
                this.columnVisualCheckMode = base.Columns["VisualCheckMode"];
                this.columnVisualCheckAbnormal = base.Columns["VisualCheckAbnormal"];
                this.columnVisualCheckAdjust = base.Columns["VisualCheckAdjust"];
                this.columnFirstShotCheckMode = base.Columns["FirstShotCheckMode"];
                this.columnFirstShotCheckModeAbnormal = base.Columns["FirstShotCheckModeAbnormal"];
                this.columnFirstShotCheckModeAdjust = base.Columns["FirstShotCheckModeAdjust"];
                this.columnEmbossTapeChange = base.Columns["EmbossTapeChange"];
                this.columnCoverTapeChange = base.Columns["CoverTapeChange"];
                this.columnIronStampCleaning = base.Columns["IronStampCleaning"];
                this.columnGLCheck = base.Columns["GLCheck"];
                this.columnLotJudgement = base.Columns["LotJudgement"];
                this.columnGoodAdjust = base.Columns["GoodAdjust"];
                this.columnNGAdjust = base.Columns["NGAdjust"];
                this.columnFTNGAdjust = base.Columns["FTNGAdjust"];
                this.columnOSNGAdjust = base.Columns["OSNGAdjust"];
                this.columnMekaNGAdjust = base.Columns["MekaNGAdjust"];
                this.columnMarkerNGAdjust = base.Columns["MarkerNGAdjust"];
                this.columnTPRecogNGadjust = base.Columns["TPRecogNGadjust"];
                this.columnOPJudgement = base.Columns["OPJudgement"];
                this.columnRemark = base.Columns["Remark"];
                this.columnInputQtyAdjust = base.Columns["InputQtyAdjust"];
                this.columnEmbossTapeNo = base.Columns["EmbossTapeNo"];
                this.columnMoldRecogNGAdjust = base.Columns["MoldRecogNGAdjust"];
                this.columnTGCondition = base.Columns["TGCondition"];
                this.columnHasuuNowAdjust = base.Columns["HasuuNowAdjust"];
                this.columnFirstInspTestHead = base.Columns["FirstInspTestHead"];
                this.columnOutsourceLotNo = base.Columns["OutsourceLotNo"];
                this.columnContainerBoxNo = base.Columns["ContainerBoxNo"];
                this.columnsumyld = base.Columns["sumyld"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass() {
                this.columnMCNo = new global::System.Data.DataColumn("MCNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMCNo);
                this.columnLotNo = new global::System.Data.DataColumn("LotNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotNo);
                this.columnLotStartTime = new global::System.Data.DataColumn("LotStartTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotStartTime);
                this.columnMCType = new global::System.Data.DataColumn("MCType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMCType);
                this.columnOPNo = new global::System.Data.DataColumn("OPNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOPNo);
                this.columnInputQty = new global::System.Data.DataColumn("InputQty", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInputQty);
                this.columnTotalGood = new global::System.Data.DataColumn("TotalGood", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalGood);
                this.columnTotalNG = new global::System.Data.DataColumn("TotalNG", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalNG);
                this.columnOPRate = new global::System.Data.DataColumn("OPRate", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOPRate);
                this.columnMaximumRPM = new global::System.Data.DataColumn("MaximumRPM", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaximumRPM);
                this.columnAverageRPM = new global::System.Data.DataColumn("AverageRPM", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageRPM);
                this.columnMTBF = new global::System.Data.DataColumn("MTBF", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMTBF);
                this.columnMTTR = new global::System.Data.DataColumn("MTTR", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMTTR);
                this.columnAlarmTotal = new global::System.Data.DataColumn("AlarmTotal", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlarmTotal);
                this.columnLotEndTime = new global::System.Data.DataColumn("LotEndTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotEndTime);
                this.columnRunTime = new global::System.Data.DataColumn("RunTime", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunTime);
                this.columnStopTime = new global::System.Data.DataColumn("StopTime", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopTime);
                this.columnAlarmTime = new global::System.Data.DataColumn("AlarmTime", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlarmTime);
                this.columnSelfConVersion = new global::System.Data.DataColumn("SelfConVersion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelfConVersion);
                this.columnNetVersion = new global::System.Data.DataColumn("NetVersion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetVersion);
                this.columnTestFlow = new global::System.Data.DataColumn("TestFlow", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestFlow);
                this.columnLaserMark1 = new global::System.Data.DataColumn("LaserMark1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLaserMark1);
                this.columnLaserMark2 = new global::System.Data.DataColumn("LaserMark2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLaserMark2);
                this.columnLaserMark3 = new global::System.Data.DataColumn("LaserMark3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLaserMark3);
                this.columnOSProgram = new global::System.Data.DataColumn("OSProgram", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSProgram);
                this.columnFTProgram = new global::System.Data.DataColumn("FTProgram", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTProgram);
                this.columnTelekoCheck = new global::System.Data.DataColumn("TelekoCheck", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTelekoCheck);
                this.columnASICheck = new global::System.Data.DataColumn("ASICheck", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnASICheck);
                this.columnHasuuBefore = new global::System.Data.DataColumn("HasuuBefore", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasuuBefore);
                this.columnHasuuNow = new global::System.Data.DataColumn("HasuuNow", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasuuNow);
                this.columnFrontNG = new global::System.Data.DataColumn("FrontNG", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrontNG);
                this.columnOS2NG = new global::System.Data.DataColumn("OS2NG", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOS2NG);
                this.columnFrontMarkerNG = new global::System.Data.DataColumn("FrontMarkerNG", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrontMarkerNG);
                this.columnFLMarkerNG = new global::System.Data.DataColumn("FLMarkerNG", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLMarkerNG);
                this.columnOSTesterNG = new global::System.Data.DataColumn("OSTesterNG", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSTesterNG);
                this.columnFTTesterNG = new global::System.Data.DataColumn("FTTesterNG", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTTesterNG);
                this.columnMarkingRecogNG = new global::System.Data.DataColumn("MarkingRecogNG", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarkingRecogNG);
                this.columnMoldRecogNG = new global::System.Data.DataColumn("MoldRecogNG", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMoldRecogNG);
                this.columnTPRecogNG = new global::System.Data.DataColumn("TPRecogNG", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTPRecogNG);
                this.columnMekaNG1 = new global::System.Data.DataColumn("MekaNG1", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMekaNG1);
                this.columnMekaNG2 = new global::System.Data.DataColumn("MekaNG2", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMekaNG2);
                this.columnMekaNG3 = new global::System.Data.DataColumn("MekaNG3", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMekaNG3);
                this.columnMekaNG4 = new global::System.Data.DataColumn("MekaNG4", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMekaNG4);
                this.columnMekaNG5 = new global::System.Data.DataColumn("MekaNG5", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMekaNG5);
                this.columnActualMekaNG1 = new global::System.Data.DataColumn("ActualMekaNG1", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualMekaNG1);
                this.columnActualMekaNG2 = new global::System.Data.DataColumn("ActualMekaNG2", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualMekaNG2);
                this.columnActualMekaNG3 = new global::System.Data.DataColumn("ActualMekaNG3", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualMekaNG3);
                this.columnActualMekaNG4 = new global::System.Data.DataColumn("ActualMekaNG4", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualMekaNG4);
                this.columnActualMekaNG5 = new global::System.Data.DataColumn("ActualMekaNG5", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualMekaNG5);
                this.columnOSChPass1 = new global::System.Data.DataColumn("OSChPass1", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSChPass1);
                this.columnOSChPass2 = new global::System.Data.DataColumn("OSChPass2", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSChPass2);
                this.columnOSChPass3 = new global::System.Data.DataColumn("OSChPass3", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSChPass3);
                this.columnOSChPass4 = new global::System.Data.DataColumn("OSChPass4", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSChPass4);
                this.columnOSChPass5 = new global::System.Data.DataColumn("OSChPass5", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSChPass5);
                this.columnOSChPass6 = new global::System.Data.DataColumn("OSChPass6", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSChPass6);
                this.columnOSChPass7 = new global::System.Data.DataColumn("OSChPass7", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSChPass7);
                this.columnOSChPass8 = new global::System.Data.DataColumn("OSChPass8", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSChPass8);
                this.columnOS1ChFail1 = new global::System.Data.DataColumn("OS1ChFail1", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOS1ChFail1);
                this.columnOS1ChFail2 = new global::System.Data.DataColumn("OS1ChFail2", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOS1ChFail2);
                this.columnOS1ChFail3 = new global::System.Data.DataColumn("OS1ChFail3", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOS1ChFail3);
                this.columnOS1ChFail4 = new global::System.Data.DataColumn("OS1ChFail4", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOS1ChFail4);
                this.columnOS1ChFail5 = new global::System.Data.DataColumn("OS1ChFail5", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOS1ChFail5);
                this.columnOS1ChFail6 = new global::System.Data.DataColumn("OS1ChFail6", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOS1ChFail6);
                this.columnOS1ChFail7 = new global::System.Data.DataColumn("OS1ChFail7", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOS1ChFail7);
                this.columnOS1ChFail8 = new global::System.Data.DataColumn("OS1ChFail8", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOS1ChFail8);
                this.columnOS2ChFail1 = new global::System.Data.DataColumn("OS2ChFail1", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOS2ChFail1);
                this.columnOS2ChFail2 = new global::System.Data.DataColumn("OS2ChFail2", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOS2ChFail2);
                this.columnOS2ChFail3 = new global::System.Data.DataColumn("OS2ChFail3", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOS2ChFail3);
                this.columnOS2ChFail4 = new global::System.Data.DataColumn("OS2ChFail4", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOS2ChFail4);
                this.columnOS2ChFail5 = new global::System.Data.DataColumn("OS2ChFail5", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOS2ChFail5);
                this.columnOS2ChFail6 = new global::System.Data.DataColumn("OS2ChFail6", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOS2ChFail6);
                this.columnOS2ChFail7 = new global::System.Data.DataColumn("OS2ChFail7", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOS2ChFail7);
                this.columnOS2ChFail8 = new global::System.Data.DataColumn("OS2ChFail8", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOS2ChFail8);
                this.columnOSChRetry1 = new global::System.Data.DataColumn("OSChRetry1", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSChRetry1);
                this.columnOSChRetry2 = new global::System.Data.DataColumn("OSChRetry2", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSChRetry2);
                this.columnOSChRetry3 = new global::System.Data.DataColumn("OSChRetry3", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSChRetry3);
                this.columnOSChRetry4 = new global::System.Data.DataColumn("OSChRetry4", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSChRetry4);
                this.columnOSChRetry5 = new global::System.Data.DataColumn("OSChRetry5", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSChRetry5);
                this.columnOSChRetry6 = new global::System.Data.DataColumn("OSChRetry6", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSChRetry6);
                this.columnOSChRetry7 = new global::System.Data.DataColumn("OSChRetry7", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSChRetry7);
                this.columnOSChRetry8 = new global::System.Data.DataColumn("OSChRetry8", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSChRetry8);
                this.columnFTChPass1 = new global::System.Data.DataColumn("FTChPass1", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChPass1);
                this.columnFTChPass2 = new global::System.Data.DataColumn("FTChPass2", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChPass2);
                this.columnFTChPass3 = new global::System.Data.DataColumn("FTChPass3", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChPass3);
                this.columnFTChPass4 = new global::System.Data.DataColumn("FTChPass4", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChPass4);
                this.columnFTChPass5 = new global::System.Data.DataColumn("FTChPass5", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChPass5);
                this.columnFTChPass6 = new global::System.Data.DataColumn("FTChPass6", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChPass6);
                this.columnFTChPass7 = new global::System.Data.DataColumn("FTChPass7", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChPass7);
                this.columnFTChPass8 = new global::System.Data.DataColumn("FTChPass8", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChPass8);
                this.columnFTChFail1 = new global::System.Data.DataColumn("FTChFail1", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChFail1);
                this.columnFTChFail2 = new global::System.Data.DataColumn("FTChFail2", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChFail2);
                this.columnFTChFail3 = new global::System.Data.DataColumn("FTChFail3", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChFail3);
                this.columnFTChFail4 = new global::System.Data.DataColumn("FTChFail4", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChFail4);
                this.columnFTChFail5 = new global::System.Data.DataColumn("FTChFail5", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChFail5);
                this.columnFTChFail6 = new global::System.Data.DataColumn("FTChFail6", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChFail6);
                this.columnFTChFail7 = new global::System.Data.DataColumn("FTChFail7", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChFail7);
                this.columnFTChFail8 = new global::System.Data.DataColumn("FTChFail8", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChFail8);
                this.columnFTChRetry1 = new global::System.Data.DataColumn("FTChRetry1", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChRetry1);
                this.columnFTChRetry2 = new global::System.Data.DataColumn("FTChRetry2", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChRetry2);
                this.columnFTChRetry3 = new global::System.Data.DataColumn("FTChRetry3", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChRetry3);
                this.columnFTChRetry4 = new global::System.Data.DataColumn("FTChRetry4", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChRetry4);
                this.columnFTChRetry5 = new global::System.Data.DataColumn("FTChRetry5", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChRetry5);
                this.columnFTChRetry6 = new global::System.Data.DataColumn("FTChRetry6", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChRetry6);
                this.columnFTChRetry7 = new global::System.Data.DataColumn("FTChRetry7", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChRetry7);
                this.columnFTChRetry8 = new global::System.Data.DataColumn("FTChRetry8", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTChRetry8);
                this.columnWaferLotNo = new global::System.Data.DataColumn("WaferLotNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWaferLotNo);
                this.columnTempOSYield = new global::System.Data.DataColumn("TempOSYield", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTempOSYield);
                this.columnTempFTYield = new global::System.Data.DataColumn("TempFTYield", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTempFTYield);
                this.columnNomarkCheck = new global::System.Data.DataColumn("NomarkCheck", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNomarkCheck);
                this.columnMCProgramVersion1 = new global::System.Data.DataColumn("MCProgramVersion1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMCProgramVersion1);
                this.columnMCProgramVersion2 = new global::System.Data.DataColumn("MCProgramVersion2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMCProgramVersion2);
                this.columnMCProgramVersion3 = new global::System.Data.DataColumn("MCProgramVersion3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMCProgramVersion3);
                this.columnMCProgramVersion4 = new global::System.Data.DataColumn("MCProgramVersion4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMCProgramVersion4);
                this.columnKanagataCheck = new global::System.Data.DataColumn("KanagataCheck", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKanagataCheck);
                this.columnVacuumCheck = new global::System.Data.DataColumn("VacuumCheck", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVacuumCheck);
                this.columnDBNG = new global::System.Data.DataColumn("DBNG", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDBNG);
                this.columnPNashiNG = new global::System.Data.DataColumn("PNashiNG", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPNashiNG);
                this.columnWBNG = new global::System.Data.DataColumn("WBNG", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWBNG);
                this.columnWBInspectionNG = new global::System.Data.DataColumn("WBInspectionNG", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWBInspectionNG);
                this.columnTurningOnRank = new global::System.Data.DataColumn("TurningOnRank", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTurningOnRank);
                this.columnMissingIC = new global::System.Data.DataColumn("MissingIC", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMissingIC);
                this.columnMissingICGL = new global::System.Data.DataColumn("MissingICGL", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMissingICGL);
                this.columnFTSampleCheck = new global::System.Data.DataColumn("FTSampleCheck", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTSampleCheck);
                this.columnJigCheck = new global::System.Data.DataColumn("JigCheck", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJigCheck);
                this.columnKanaCleanBefore = new global::System.Data.DataColumn("KanaCleanBefore", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKanaCleanBefore);
                this.columnKanaCleanAfter = new global::System.Data.DataColumn("KanaCleanAfter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKanaCleanAfter);
                this.columnNGSampleCheck_Pn = new global::System.Data.DataColumn("NGSampleCheck_Pn", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGSampleCheck_Pn);
                this.columnNGSampleCheck_N = new global::System.Data.DataColumn("NGSampleCheck_N", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGSampleCheck_N);
                this.columnVisualCheckMode = new global::System.Data.DataColumn("VisualCheckMode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisualCheckMode);
                this.columnVisualCheckAbnormal = new global::System.Data.DataColumn("VisualCheckAbnormal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisualCheckAbnormal);
                this.columnVisualCheckAdjust = new global::System.Data.DataColumn("VisualCheckAdjust", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisualCheckAdjust);
                this.columnFirstShotCheckMode = new global::System.Data.DataColumn("FirstShotCheckMode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstShotCheckMode);
                this.columnFirstShotCheckModeAbnormal = new global::System.Data.DataColumn("FirstShotCheckModeAbnormal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstShotCheckModeAbnormal);
                this.columnFirstShotCheckModeAdjust = new global::System.Data.DataColumn("FirstShotCheckModeAdjust", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstShotCheckModeAdjust);
                this.columnEmbossTapeChange = new global::System.Data.DataColumn("EmbossTapeChange", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmbossTapeChange);
                this.columnCoverTapeChange = new global::System.Data.DataColumn("CoverTapeChange", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoverTapeChange);
                this.columnIronStampCleaning = new global::System.Data.DataColumn("IronStampCleaning", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIronStampCleaning);
                this.columnGLCheck = new global::System.Data.DataColumn("GLCheck", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGLCheck);
                this.columnLotJudgement = new global::System.Data.DataColumn("LotJudgement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotJudgement);
                this.columnGoodAdjust = new global::System.Data.DataColumn("GoodAdjust", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodAdjust);
                this.columnNGAdjust = new global::System.Data.DataColumn("NGAdjust", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGAdjust);
                this.columnFTNGAdjust = new global::System.Data.DataColumn("FTNGAdjust", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTNGAdjust);
                this.columnOSNGAdjust = new global::System.Data.DataColumn("OSNGAdjust", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSNGAdjust);
                this.columnMekaNGAdjust = new global::System.Data.DataColumn("MekaNGAdjust", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMekaNGAdjust);
                this.columnMarkerNGAdjust = new global::System.Data.DataColumn("MarkerNGAdjust", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarkerNGAdjust);
                this.columnTPRecogNGadjust = new global::System.Data.DataColumn("TPRecogNGadjust", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTPRecogNGadjust);
                this.columnOPJudgement = new global::System.Data.DataColumn("OPJudgement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOPJudgement);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columnInputQtyAdjust = new global::System.Data.DataColumn("InputQtyAdjust", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInputQtyAdjust);
                this.columnEmbossTapeNo = new global::System.Data.DataColumn("EmbossTapeNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmbossTapeNo);
                this.columnMoldRecogNGAdjust = new global::System.Data.DataColumn("MoldRecogNGAdjust", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMoldRecogNGAdjust);
                this.columnTGCondition = new global::System.Data.DataColumn("TGCondition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTGCondition);
                this.columnHasuuNowAdjust = new global::System.Data.DataColumn("HasuuNowAdjust", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasuuNowAdjust);
                this.columnFirstInspTestHead = new global::System.Data.DataColumn("FirstInspTestHead", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstInspTestHead);
                this.columnOutsourceLotNo = new global::System.Data.DataColumn("OutsourceLotNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutsourceLotNo);
                this.columnContainerBoxNo = new global::System.Data.DataColumn("ContainerBoxNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContainerBoxNo);
                this.columnsumyld = new global::System.Data.DataColumn("sumyld", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsumyld);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMCNo,
                                this.columnLotNo,
                                this.columnLotStartTime}, true));
                this.columnMCNo.AllowDBNull = false;
                this.columnMCNo.MaxLength = 10;
                this.columnLotNo.AllowDBNull = false;
                this.columnLotNo.MaxLength = 10;
                this.columnLotStartTime.AllowDBNull = false;
                this.columnMCType.MaxLength = 10;
                this.columnOPNo.MaxLength = 8;
                this.columnSelfConVersion.MaxLength = 50;
                this.columnNetVersion.MaxLength = 50;
                this.columnTestFlow.MaxLength = 50;
                this.columnLaserMark1.MaxLength = 20;
                this.columnLaserMark2.MaxLength = 20;
                this.columnLaserMark3.MaxLength = 20;
                this.columnOSProgram.MaxLength = 20;
                this.columnFTProgram.MaxLength = 20;
                this.columnTelekoCheck.MaxLength = 50;
                this.columnASICheck.MaxLength = 50;
                this.columnWaferLotNo.MaxLength = 50;
                this.columnNomarkCheck.MaxLength = 50;
                this.columnMCProgramVersion1.MaxLength = 50;
                this.columnMCProgramVersion2.MaxLength = 50;
                this.columnMCProgramVersion3.MaxLength = 50;
                this.columnMCProgramVersion4.MaxLength = 50;
                this.columnKanagataCheck.MaxLength = 50;
                this.columnVacuumCheck.MaxLength = 50;
                this.columnTurningOnRank.MaxLength = 2;
                this.columnFTSampleCheck.MaxLength = 4;
                this.columnJigCheck.MaxLength = 4;
                this.columnKanaCleanBefore.MaxLength = 1;
                this.columnKanaCleanAfter.MaxLength = 1;
                this.columnVisualCheckMode.MaxLength = 1;
                this.columnVisualCheckAbnormal.MaxLength = 3;
                this.columnVisualCheckAdjust.MaxLength = 1;
                this.columnFirstShotCheckMode.MaxLength = 1;
                this.columnFirstShotCheckModeAbnormal.MaxLength = 3;
                this.columnFirstShotCheckModeAdjust.MaxLength = 1;
                this.columnGLCheck.MaxLength = 6;
                this.columnLotJudgement.MaxLength = 9;
                this.columnOPJudgement.MaxLength = 6;
                this.columnRemark.MaxLength = 50;
                this.columnEmbossTapeNo.MaxLength = 10;
                this.columnTGCondition.MaxLength = 2;
                this.columnFirstInspTestHead.MaxLength = 3;
                this.columnOutsourceLotNo.MaxLength = 10;
                this.columnContainerBoxNo.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public FLDataRow NewFLDataRow() {
                return ((FLDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FLDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(FLDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FLDataRowChanged != null)) {
                    this.FLDataRowChanged(this, new FLDataRowChangeEvent(((FLDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FLDataRowChanging != null)) {
                    this.FLDataRowChanging(this, new FLDataRowChangeEvent(((FLDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FLDataRowDeleted != null)) {
                    this.FLDataRowDeleted(this, new FLDataRowChangeEvent(((FLDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FLDataRowDeleting != null)) {
                    this.FLDataRowDeleting(this, new FLDataRowChangeEvent(((FLDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveFLDataRow(FLDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DBxDataSet ds = new DBxDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FLDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class FLDataRow : global::System.Data.DataRow {
            
            private FLDataDataTable tableFLData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal FLDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFLData = ((FLDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string MCNo {
                get {
                    return ((string)(this[this.tableFLData.MCNoColumn]));
                }
                set {
                    this[this.tableFLData.MCNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string LotNo {
                get {
                    return ((string)(this[this.tableFLData.LotNoColumn]));
                }
                set {
                    this[this.tableFLData.LotNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public System.DateTime LotStartTime {
                get {
                    return ((global::System.DateTime)(this[this.tableFLData.LotStartTimeColumn]));
                }
                set {
                    this[this.tableFLData.LotStartTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string MCType {
                get {
                    try {
                        return ((string)(this[this.tableFLData.MCTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MCType\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MCTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string OPNo {
                get {
                    try {
                        return ((string)(this[this.tableFLData.OPNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OPNo\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OPNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short InputQty {
                get {
                    try {
                        return ((short)(this[this.tableFLData.InputQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InputQty\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.InputQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short TotalGood {
                get {
                    try {
                        return ((short)(this[this.tableFLData.TotalGoodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalGood\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.TotalGoodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short TotalNG {
                get {
                    try {
                        return ((short)(this[this.tableFLData.TotalNGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalNG\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.TotalNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public float OPRate {
                get {
                    try {
                        return ((float)(this[this.tableFLData.OPRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OPRate\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OPRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public float MaximumRPM {
                get {
                    try {
                        return ((float)(this[this.tableFLData.MaximumRPMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaximumRPM\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MaximumRPMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public float AverageRPM {
                get {
                    try {
                        return ((float)(this[this.tableFLData.AverageRPMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageRPM\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.AverageRPMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public float MTBF {
                get {
                    try {
                        return ((float)(this[this.tableFLData.MTBFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MTBF\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MTBFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public float MTTR {
                get {
                    try {
                        return ((float)(this[this.tableFLData.MTTRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MTTR\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MTTRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short AlarmTotal {
                get {
                    try {
                        return ((short)(this[this.tableFLData.AlarmTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AlarmTotal\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.AlarmTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public System.DateTime LotEndTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFLData.LotEndTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotEndTime\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.LotEndTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public float RunTime {
                get {
                    try {
                        return ((float)(this[this.tableFLData.RunTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunTime\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.RunTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public float StopTime {
                get {
                    try {
                        return ((float)(this[this.tableFLData.StopTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StopTime\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.StopTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public float AlarmTime {
                get {
                    try {
                        return ((float)(this[this.tableFLData.AlarmTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AlarmTime\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.AlarmTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string SelfConVersion {
                get {
                    try {
                        return ((string)(this[this.tableFLData.SelfConVersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SelfConVersion\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.SelfConVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string NetVersion {
                get {
                    try {
                        return ((string)(this[this.tableFLData.NetVersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NetVersion\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.NetVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TestFlow {
                get {
                    try {
                        return ((string)(this[this.tableFLData.TestFlowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestFlow\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.TestFlowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string LaserMark1 {
                get {
                    try {
                        return ((string)(this[this.tableFLData.LaserMark1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LaserMark1\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.LaserMark1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string LaserMark2 {
                get {
                    try {
                        return ((string)(this[this.tableFLData.LaserMark2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LaserMark2\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.LaserMark2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string LaserMark3 {
                get {
                    try {
                        return ((string)(this[this.tableFLData.LaserMark3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LaserMark3\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.LaserMark3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string OSProgram {
                get {
                    try {
                        return ((string)(this[this.tableFLData.OSProgramColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSProgram\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSProgramColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string FTProgram {
                get {
                    try {
                        return ((string)(this[this.tableFLData.FTProgramColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTProgram\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTProgramColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TelekoCheck {
                get {
                    try {
                        return ((string)(this[this.tableFLData.TelekoCheckColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TelekoCheck\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.TelekoCheckColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ASICheck {
                get {
                    try {
                        return ((string)(this[this.tableFLData.ASICheckColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ASICheck\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.ASICheckColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short HasuuBefore {
                get {
                    try {
                        return ((short)(this[this.tableFLData.HasuuBeforeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasuuBefore\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.HasuuBeforeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short HasuuNow {
                get {
                    try {
                        return ((short)(this[this.tableFLData.HasuuNowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasuuNow\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.HasuuNowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FrontNG {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FrontNGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FrontNG\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FrontNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OS2NG {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OS2NGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OS2NG\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OS2NGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FrontMarkerNG {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FrontMarkerNGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FrontMarkerNG\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FrontMarkerNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FLMarkerNG {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FLMarkerNGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FLMarkerNG\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FLMarkerNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OSTesterNG {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OSTesterNGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSTesterNG\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSTesterNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTTesterNG {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTTesterNGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTTesterNG\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTTesterNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short MarkingRecogNG {
                get {
                    try {
                        return ((short)(this[this.tableFLData.MarkingRecogNGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MarkingRecogNG\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MarkingRecogNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short MoldRecogNG {
                get {
                    try {
                        return ((short)(this[this.tableFLData.MoldRecogNGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MoldRecogNG\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MoldRecogNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short TPRecogNG {
                get {
                    try {
                        return ((short)(this[this.tableFLData.TPRecogNGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TPRecogNG\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.TPRecogNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short MekaNG1 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.MekaNG1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MekaNG1\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MekaNG1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short MekaNG2 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.MekaNG2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MekaNG2\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MekaNG2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short MekaNG3 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.MekaNG3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MekaNG3\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MekaNG3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short MekaNG4 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.MekaNG4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MekaNG4\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MekaNG4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short MekaNG5 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.MekaNG5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MekaNG5\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MekaNG5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short ActualMekaNG1 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.ActualMekaNG1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualMekaNG1\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.ActualMekaNG1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short ActualMekaNG2 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.ActualMekaNG2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualMekaNG2\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.ActualMekaNG2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short ActualMekaNG3 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.ActualMekaNG3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualMekaNG3\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.ActualMekaNG3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short ActualMekaNG4 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.ActualMekaNG4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualMekaNG4\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.ActualMekaNG4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short ActualMekaNG5 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.ActualMekaNG5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualMekaNG5\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.ActualMekaNG5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OSChPass1 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OSChPass1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSChPass1\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSChPass1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OSChPass2 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OSChPass2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSChPass2\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSChPass2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OSChPass3 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OSChPass3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSChPass3\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSChPass3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OSChPass4 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OSChPass4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSChPass4\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSChPass4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OSChPass5 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OSChPass5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSChPass5\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSChPass5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OSChPass6 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OSChPass6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSChPass6\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSChPass6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OSChPass7 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OSChPass7Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSChPass7\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSChPass7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OSChPass8 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OSChPass8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSChPass8\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSChPass8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OS1ChFail1 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OS1ChFail1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OS1ChFail1\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OS1ChFail1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OS1ChFail2 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OS1ChFail2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OS1ChFail2\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OS1ChFail2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OS1ChFail3 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OS1ChFail3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OS1ChFail3\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OS1ChFail3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OS1ChFail4 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OS1ChFail4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OS1ChFail4\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OS1ChFail4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OS1ChFail5 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OS1ChFail5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OS1ChFail5\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OS1ChFail5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OS1ChFail6 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OS1ChFail6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OS1ChFail6\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OS1ChFail6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OS1ChFail7 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OS1ChFail7Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OS1ChFail7\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OS1ChFail7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OS1ChFail8 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OS1ChFail8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OS1ChFail8\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OS1ChFail8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OS2ChFail1 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OS2ChFail1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OS2ChFail1\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OS2ChFail1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OS2ChFail2 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OS2ChFail2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OS2ChFail2\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OS2ChFail2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OS2ChFail3 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OS2ChFail3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OS2ChFail3\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OS2ChFail3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OS2ChFail4 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OS2ChFail4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OS2ChFail4\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OS2ChFail4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OS2ChFail5 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OS2ChFail5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OS2ChFail5\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OS2ChFail5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OS2ChFail6 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OS2ChFail6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OS2ChFail6\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OS2ChFail6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OS2ChFail7 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OS2ChFail7Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OS2ChFail7\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OS2ChFail7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OS2ChFail8 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OS2ChFail8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OS2ChFail8\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OS2ChFail8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OSChRetry1 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OSChRetry1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSChRetry1\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSChRetry1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OSChRetry2 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OSChRetry2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSChRetry2\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSChRetry2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OSChRetry3 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OSChRetry3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSChRetry3\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSChRetry3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OSChRetry4 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OSChRetry4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSChRetry4\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSChRetry4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OSChRetry5 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OSChRetry5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSChRetry5\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSChRetry5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OSChRetry6 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OSChRetry6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSChRetry6\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSChRetry6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OSChRetry7 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OSChRetry7Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSChRetry7\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSChRetry7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OSChRetry8 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OSChRetry8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSChRetry8\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSChRetry8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChPass1 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChPass1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChPass1\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChPass1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChPass2 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChPass2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChPass2\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChPass2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChPass3 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChPass3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChPass3\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChPass3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChPass4 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChPass4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChPass4\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChPass4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChPass5 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChPass5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChPass5\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChPass5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChPass6 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChPass6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChPass6\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChPass6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChPass7 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChPass7Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChPass7\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChPass7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChPass8 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChPass8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChPass8\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChPass8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChFail1 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChFail1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChFail1\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChFail1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChFail2 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChFail2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChFail2\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChFail2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChFail3 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChFail3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChFail3\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChFail3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChFail4 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChFail4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChFail4\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChFail4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChFail5 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChFail5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChFail5\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChFail5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChFail6 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChFail6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChFail6\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChFail6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChFail7 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChFail7Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChFail7\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChFail7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChFail8 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChFail8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChFail8\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChFail8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChRetry1 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChRetry1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChRetry1\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChRetry1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChRetry2 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChRetry2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChRetry2\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChRetry2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChRetry3 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChRetry3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChRetry3\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChRetry3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChRetry4 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChRetry4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChRetry4\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChRetry4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChRetry5 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChRetry5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChRetry5\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChRetry5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChRetry6 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChRetry6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChRetry6\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChRetry6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChRetry7 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChRetry7Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChRetry7\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChRetry7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTChRetry8 {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTChRetry8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTChRetry8\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTChRetry8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string WaferLotNo {
                get {
                    try {
                        return ((string)(this[this.tableFLData.WaferLotNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WaferLotNo\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.WaferLotNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public float TempOSYield {
                get {
                    try {
                        return ((float)(this[this.tableFLData.TempOSYieldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TempOSYield\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.TempOSYieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public float TempFTYield {
                get {
                    try {
                        return ((float)(this[this.tableFLData.TempFTYieldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TempFTYield\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.TempFTYieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string NomarkCheck {
                get {
                    try {
                        return ((string)(this[this.tableFLData.NomarkCheckColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NomarkCheck\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.NomarkCheckColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string MCProgramVersion1 {
                get {
                    try {
                        return ((string)(this[this.tableFLData.MCProgramVersion1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MCProgramVersion1\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MCProgramVersion1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string MCProgramVersion2 {
                get {
                    try {
                        return ((string)(this[this.tableFLData.MCProgramVersion2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MCProgramVersion2\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MCProgramVersion2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string MCProgramVersion3 {
                get {
                    try {
                        return ((string)(this[this.tableFLData.MCProgramVersion3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MCProgramVersion3\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MCProgramVersion3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string MCProgramVersion4 {
                get {
                    try {
                        return ((string)(this[this.tableFLData.MCProgramVersion4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MCProgramVersion4\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MCProgramVersion4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string KanagataCheck {
                get {
                    try {
                        return ((string)(this[this.tableFLData.KanagataCheckColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KanagataCheck\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.KanagataCheckColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string VacuumCheck {
                get {
                    try {
                        return ((string)(this[this.tableFLData.VacuumCheckColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VacuumCheck\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.VacuumCheckColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short DBNG {
                get {
                    try {
                        return ((short)(this[this.tableFLData.DBNGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DBNG\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.DBNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short PNashiNG {
                get {
                    try {
                        return ((short)(this[this.tableFLData.PNashiNGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PNashiNG\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.PNashiNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short WBNG {
                get {
                    try {
                        return ((short)(this[this.tableFLData.WBNGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WBNG\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.WBNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short WBInspectionNG {
                get {
                    try {
                        return ((short)(this[this.tableFLData.WBInspectionNGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WBInspectionNG\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.WBInspectionNGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TurningOnRank {
                get {
                    try {
                        return ((string)(this[this.tableFLData.TurningOnRankColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TurningOnRank\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.TurningOnRankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short MissingIC {
                get {
                    try {
                        return ((short)(this[this.tableFLData.MissingICColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MissingIC\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MissingICColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool MissingICGL {
                get {
                    try {
                        return ((bool)(this[this.tableFLData.MissingICGLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MissingICGL\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MissingICGLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string FTSampleCheck {
                get {
                    try {
                        return ((string)(this[this.tableFLData.FTSampleCheckColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTSampleCheck\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTSampleCheckColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string JigCheck {
                get {
                    try {
                        return ((string)(this[this.tableFLData.JigCheckColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JigCheck\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.JigCheckColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string KanaCleanBefore {
                get {
                    try {
                        return ((string)(this[this.tableFLData.KanaCleanBeforeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KanaCleanBefore\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.KanaCleanBeforeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string KanaCleanAfter {
                get {
                    try {
                        return ((string)(this[this.tableFLData.KanaCleanAfterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KanaCleanAfter\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.KanaCleanAfterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short NGSampleCheck_Pn {
                get {
                    try {
                        return ((short)(this[this.tableFLData.NGSampleCheck_PnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGSampleCheck_Pn\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.NGSampleCheck_PnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short NGSampleCheck_N {
                get {
                    try {
                        return ((short)(this[this.tableFLData.NGSampleCheck_NColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGSampleCheck_N\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.NGSampleCheck_NColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string VisualCheckMode {
                get {
                    try {
                        return ((string)(this[this.tableFLData.VisualCheckModeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VisualCheckMode\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.VisualCheckModeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string VisualCheckAbnormal {
                get {
                    try {
                        return ((string)(this[this.tableFLData.VisualCheckAbnormalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VisualCheckAbnormal\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.VisualCheckAbnormalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string VisualCheckAdjust {
                get {
                    try {
                        return ((string)(this[this.tableFLData.VisualCheckAdjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VisualCheckAdjust\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.VisualCheckAdjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string FirstShotCheckMode {
                get {
                    try {
                        return ((string)(this[this.tableFLData.FirstShotCheckModeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstShotCheckMode\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FirstShotCheckModeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string FirstShotCheckModeAbnormal {
                get {
                    try {
                        return ((string)(this[this.tableFLData.FirstShotCheckModeAbnormalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstShotCheckModeAbnormal\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FirstShotCheckModeAbnormalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string FirstShotCheckModeAdjust {
                get {
                    try {
                        return ((string)(this[this.tableFLData.FirstShotCheckModeAdjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstShotCheckModeAdjust\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FirstShotCheckModeAdjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short EmbossTapeChange {
                get {
                    try {
                        return ((short)(this[this.tableFLData.EmbossTapeChangeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmbossTapeChange\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.EmbossTapeChangeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short CoverTapeChange {
                get {
                    try {
                        return ((short)(this[this.tableFLData.CoverTapeChangeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoverTapeChange\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.CoverTapeChangeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short IronStampCleaning {
                get {
                    try {
                        return ((short)(this[this.tableFLData.IronStampCleaningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IronStampCleaning\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.IronStampCleaningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string GLCheck {
                get {
                    try {
                        return ((string)(this[this.tableFLData.GLCheckColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GLCheck\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.GLCheckColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string LotJudgement {
                get {
                    try {
                        return ((string)(this[this.tableFLData.LotJudgementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotJudgement\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.LotJudgementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short GoodAdjust {
                get {
                    try {
                        return ((short)(this[this.tableFLData.GoodAdjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GoodAdjust\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.GoodAdjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short NGAdjust {
                get {
                    try {
                        return ((short)(this[this.tableFLData.NGAdjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGAdjust\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.NGAdjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short FTNGAdjust {
                get {
                    try {
                        return ((short)(this[this.tableFLData.FTNGAdjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FTNGAdjust\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FTNGAdjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short OSNGAdjust {
                get {
                    try {
                        return ((short)(this[this.tableFLData.OSNGAdjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OSNGAdjust\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OSNGAdjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short MekaNGAdjust {
                get {
                    try {
                        return ((short)(this[this.tableFLData.MekaNGAdjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MekaNGAdjust\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MekaNGAdjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short MarkerNGAdjust {
                get {
                    try {
                        return ((short)(this[this.tableFLData.MarkerNGAdjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MarkerNGAdjust\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MarkerNGAdjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short TPRecogNGadjust {
                get {
                    try {
                        return ((short)(this[this.tableFLData.TPRecogNGadjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TPRecogNGadjust\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.TPRecogNGadjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string OPJudgement {
                get {
                    try {
                        return ((string)(this[this.tableFLData.OPJudgementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OPJudgement\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OPJudgementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tableFLData.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remark\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short InputQtyAdjust {
                get {
                    try {
                        return ((short)(this[this.tableFLData.InputQtyAdjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InputQtyAdjust\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.InputQtyAdjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string EmbossTapeNo {
                get {
                    try {
                        return ((string)(this[this.tableFLData.EmbossTapeNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmbossTapeNo\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.EmbossTapeNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short MoldRecogNGAdjust {
                get {
                    try {
                        return ((short)(this[this.tableFLData.MoldRecogNGAdjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MoldRecogNGAdjust\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.MoldRecogNGAdjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TGCondition {
                get {
                    try {
                        return ((string)(this[this.tableFLData.TGConditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TGCondition\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.TGConditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public short HasuuNowAdjust {
                get {
                    try {
                        return ((short)(this[this.tableFLData.HasuuNowAdjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasuuNowAdjust\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.HasuuNowAdjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string FirstInspTestHead {
                get {
                    try {
                        return ((string)(this[this.tableFLData.FirstInspTestHeadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstInspTestHead\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.FirstInspTestHeadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string OutsourceLotNo {
                get {
                    try {
                        return ((string)(this[this.tableFLData.OutsourceLotNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutsourceLotNo\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.OutsourceLotNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ContainerBoxNo {
                get {
                    try {
                        return ((string)(this[this.tableFLData.ContainerBoxNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContainerBoxNo\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.ContainerBoxNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public float sumyld {
                get {
                    try {
                        return ((float)(this[this.tableFLData.sumyldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sumyld\' in table \'FLData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFLData.sumyldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMCTypeNull() {
                return this.IsNull(this.tableFLData.MCTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMCTypeNull() {
                this[this.tableFLData.MCTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOPNoNull() {
                return this.IsNull(this.tableFLData.OPNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOPNoNull() {
                this[this.tableFLData.OPNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsInputQtyNull() {
                return this.IsNull(this.tableFLData.InputQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetInputQtyNull() {
                this[this.tableFLData.InputQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTotalGoodNull() {
                return this.IsNull(this.tableFLData.TotalGoodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTotalGoodNull() {
                this[this.tableFLData.TotalGoodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTotalNGNull() {
                return this.IsNull(this.tableFLData.TotalNGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTotalNGNull() {
                this[this.tableFLData.TotalNGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOPRateNull() {
                return this.IsNull(this.tableFLData.OPRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOPRateNull() {
                this[this.tableFLData.OPRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMaximumRPMNull() {
                return this.IsNull(this.tableFLData.MaximumRPMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMaximumRPMNull() {
                this[this.tableFLData.MaximumRPMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsAverageRPMNull() {
                return this.IsNull(this.tableFLData.AverageRPMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetAverageRPMNull() {
                this[this.tableFLData.AverageRPMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMTBFNull() {
                return this.IsNull(this.tableFLData.MTBFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMTBFNull() {
                this[this.tableFLData.MTBFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMTTRNull() {
                return this.IsNull(this.tableFLData.MTTRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMTTRNull() {
                this[this.tableFLData.MTTRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsAlarmTotalNull() {
                return this.IsNull(this.tableFLData.AlarmTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetAlarmTotalNull() {
                this[this.tableFLData.AlarmTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsLotEndTimeNull() {
                return this.IsNull(this.tableFLData.LotEndTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetLotEndTimeNull() {
                this[this.tableFLData.LotEndTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsRunTimeNull() {
                return this.IsNull(this.tableFLData.RunTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetRunTimeNull() {
                this[this.tableFLData.RunTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsStopTimeNull() {
                return this.IsNull(this.tableFLData.StopTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetStopTimeNull() {
                this[this.tableFLData.StopTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsAlarmTimeNull() {
                return this.IsNull(this.tableFLData.AlarmTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetAlarmTimeNull() {
                this[this.tableFLData.AlarmTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsSelfConVersionNull() {
                return this.IsNull(this.tableFLData.SelfConVersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetSelfConVersionNull() {
                this[this.tableFLData.SelfConVersionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsNetVersionNull() {
                return this.IsNull(this.tableFLData.NetVersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetNetVersionNull() {
                this[this.tableFLData.NetVersionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTestFlowNull() {
                return this.IsNull(this.tableFLData.TestFlowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTestFlowNull() {
                this[this.tableFLData.TestFlowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsLaserMark1Null() {
                return this.IsNull(this.tableFLData.LaserMark1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetLaserMark1Null() {
                this[this.tableFLData.LaserMark1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsLaserMark2Null() {
                return this.IsNull(this.tableFLData.LaserMark2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetLaserMark2Null() {
                this[this.tableFLData.LaserMark2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsLaserMark3Null() {
                return this.IsNull(this.tableFLData.LaserMark3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetLaserMark3Null() {
                this[this.tableFLData.LaserMark3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSProgramNull() {
                return this.IsNull(this.tableFLData.OSProgramColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSProgramNull() {
                this[this.tableFLData.OSProgramColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTProgramNull() {
                return this.IsNull(this.tableFLData.FTProgramColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTProgramNull() {
                this[this.tableFLData.FTProgramColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTelekoCheckNull() {
                return this.IsNull(this.tableFLData.TelekoCheckColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTelekoCheckNull() {
                this[this.tableFLData.TelekoCheckColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsASICheckNull() {
                return this.IsNull(this.tableFLData.ASICheckColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetASICheckNull() {
                this[this.tableFLData.ASICheckColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsHasuuBeforeNull() {
                return this.IsNull(this.tableFLData.HasuuBeforeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetHasuuBeforeNull() {
                this[this.tableFLData.HasuuBeforeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsHasuuNowNull() {
                return this.IsNull(this.tableFLData.HasuuNowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetHasuuNowNull() {
                this[this.tableFLData.HasuuNowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFrontNGNull() {
                return this.IsNull(this.tableFLData.FrontNGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFrontNGNull() {
                this[this.tableFLData.FrontNGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOS2NGNull() {
                return this.IsNull(this.tableFLData.OS2NGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOS2NGNull() {
                this[this.tableFLData.OS2NGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFrontMarkerNGNull() {
                return this.IsNull(this.tableFLData.FrontMarkerNGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFrontMarkerNGNull() {
                this[this.tableFLData.FrontMarkerNGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFLMarkerNGNull() {
                return this.IsNull(this.tableFLData.FLMarkerNGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFLMarkerNGNull() {
                this[this.tableFLData.FLMarkerNGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSTesterNGNull() {
                return this.IsNull(this.tableFLData.OSTesterNGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSTesterNGNull() {
                this[this.tableFLData.OSTesterNGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTTesterNGNull() {
                return this.IsNull(this.tableFLData.FTTesterNGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTTesterNGNull() {
                this[this.tableFLData.FTTesterNGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMarkingRecogNGNull() {
                return this.IsNull(this.tableFLData.MarkingRecogNGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMarkingRecogNGNull() {
                this[this.tableFLData.MarkingRecogNGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMoldRecogNGNull() {
                return this.IsNull(this.tableFLData.MoldRecogNGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMoldRecogNGNull() {
                this[this.tableFLData.MoldRecogNGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTPRecogNGNull() {
                return this.IsNull(this.tableFLData.TPRecogNGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTPRecogNGNull() {
                this[this.tableFLData.TPRecogNGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMekaNG1Null() {
                return this.IsNull(this.tableFLData.MekaNG1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMekaNG1Null() {
                this[this.tableFLData.MekaNG1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMekaNG2Null() {
                return this.IsNull(this.tableFLData.MekaNG2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMekaNG2Null() {
                this[this.tableFLData.MekaNG2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMekaNG3Null() {
                return this.IsNull(this.tableFLData.MekaNG3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMekaNG3Null() {
                this[this.tableFLData.MekaNG3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMekaNG4Null() {
                return this.IsNull(this.tableFLData.MekaNG4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMekaNG4Null() {
                this[this.tableFLData.MekaNG4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMekaNG5Null() {
                return this.IsNull(this.tableFLData.MekaNG5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMekaNG5Null() {
                this[this.tableFLData.MekaNG5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsActualMekaNG1Null() {
                return this.IsNull(this.tableFLData.ActualMekaNG1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetActualMekaNG1Null() {
                this[this.tableFLData.ActualMekaNG1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsActualMekaNG2Null() {
                return this.IsNull(this.tableFLData.ActualMekaNG2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetActualMekaNG2Null() {
                this[this.tableFLData.ActualMekaNG2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsActualMekaNG3Null() {
                return this.IsNull(this.tableFLData.ActualMekaNG3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetActualMekaNG3Null() {
                this[this.tableFLData.ActualMekaNG3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsActualMekaNG4Null() {
                return this.IsNull(this.tableFLData.ActualMekaNG4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetActualMekaNG4Null() {
                this[this.tableFLData.ActualMekaNG4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsActualMekaNG5Null() {
                return this.IsNull(this.tableFLData.ActualMekaNG5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetActualMekaNG5Null() {
                this[this.tableFLData.ActualMekaNG5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSChPass1Null() {
                return this.IsNull(this.tableFLData.OSChPass1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSChPass1Null() {
                this[this.tableFLData.OSChPass1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSChPass2Null() {
                return this.IsNull(this.tableFLData.OSChPass2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSChPass2Null() {
                this[this.tableFLData.OSChPass2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSChPass3Null() {
                return this.IsNull(this.tableFLData.OSChPass3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSChPass3Null() {
                this[this.tableFLData.OSChPass3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSChPass4Null() {
                return this.IsNull(this.tableFLData.OSChPass4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSChPass4Null() {
                this[this.tableFLData.OSChPass4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSChPass5Null() {
                return this.IsNull(this.tableFLData.OSChPass5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSChPass5Null() {
                this[this.tableFLData.OSChPass5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSChPass6Null() {
                return this.IsNull(this.tableFLData.OSChPass6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSChPass6Null() {
                this[this.tableFLData.OSChPass6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSChPass7Null() {
                return this.IsNull(this.tableFLData.OSChPass7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSChPass7Null() {
                this[this.tableFLData.OSChPass7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSChPass8Null() {
                return this.IsNull(this.tableFLData.OSChPass8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSChPass8Null() {
                this[this.tableFLData.OSChPass8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOS1ChFail1Null() {
                return this.IsNull(this.tableFLData.OS1ChFail1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOS1ChFail1Null() {
                this[this.tableFLData.OS1ChFail1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOS1ChFail2Null() {
                return this.IsNull(this.tableFLData.OS1ChFail2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOS1ChFail2Null() {
                this[this.tableFLData.OS1ChFail2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOS1ChFail3Null() {
                return this.IsNull(this.tableFLData.OS1ChFail3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOS1ChFail3Null() {
                this[this.tableFLData.OS1ChFail3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOS1ChFail4Null() {
                return this.IsNull(this.tableFLData.OS1ChFail4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOS1ChFail4Null() {
                this[this.tableFLData.OS1ChFail4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOS1ChFail5Null() {
                return this.IsNull(this.tableFLData.OS1ChFail5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOS1ChFail5Null() {
                this[this.tableFLData.OS1ChFail5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOS1ChFail6Null() {
                return this.IsNull(this.tableFLData.OS1ChFail6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOS1ChFail6Null() {
                this[this.tableFLData.OS1ChFail6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOS1ChFail7Null() {
                return this.IsNull(this.tableFLData.OS1ChFail7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOS1ChFail7Null() {
                this[this.tableFLData.OS1ChFail7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOS1ChFail8Null() {
                return this.IsNull(this.tableFLData.OS1ChFail8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOS1ChFail8Null() {
                this[this.tableFLData.OS1ChFail8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOS2ChFail1Null() {
                return this.IsNull(this.tableFLData.OS2ChFail1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOS2ChFail1Null() {
                this[this.tableFLData.OS2ChFail1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOS2ChFail2Null() {
                return this.IsNull(this.tableFLData.OS2ChFail2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOS2ChFail2Null() {
                this[this.tableFLData.OS2ChFail2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOS2ChFail3Null() {
                return this.IsNull(this.tableFLData.OS2ChFail3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOS2ChFail3Null() {
                this[this.tableFLData.OS2ChFail3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOS2ChFail4Null() {
                return this.IsNull(this.tableFLData.OS2ChFail4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOS2ChFail4Null() {
                this[this.tableFLData.OS2ChFail4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOS2ChFail5Null() {
                return this.IsNull(this.tableFLData.OS2ChFail5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOS2ChFail5Null() {
                this[this.tableFLData.OS2ChFail5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOS2ChFail6Null() {
                return this.IsNull(this.tableFLData.OS2ChFail6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOS2ChFail6Null() {
                this[this.tableFLData.OS2ChFail6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOS2ChFail7Null() {
                return this.IsNull(this.tableFLData.OS2ChFail7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOS2ChFail7Null() {
                this[this.tableFLData.OS2ChFail7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOS2ChFail8Null() {
                return this.IsNull(this.tableFLData.OS2ChFail8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOS2ChFail8Null() {
                this[this.tableFLData.OS2ChFail8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSChRetry1Null() {
                return this.IsNull(this.tableFLData.OSChRetry1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSChRetry1Null() {
                this[this.tableFLData.OSChRetry1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSChRetry2Null() {
                return this.IsNull(this.tableFLData.OSChRetry2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSChRetry2Null() {
                this[this.tableFLData.OSChRetry2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSChRetry3Null() {
                return this.IsNull(this.tableFLData.OSChRetry3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSChRetry3Null() {
                this[this.tableFLData.OSChRetry3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSChRetry4Null() {
                return this.IsNull(this.tableFLData.OSChRetry4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSChRetry4Null() {
                this[this.tableFLData.OSChRetry4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSChRetry5Null() {
                return this.IsNull(this.tableFLData.OSChRetry5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSChRetry5Null() {
                this[this.tableFLData.OSChRetry5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSChRetry6Null() {
                return this.IsNull(this.tableFLData.OSChRetry6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSChRetry6Null() {
                this[this.tableFLData.OSChRetry6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSChRetry7Null() {
                return this.IsNull(this.tableFLData.OSChRetry7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSChRetry7Null() {
                this[this.tableFLData.OSChRetry7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSChRetry8Null() {
                return this.IsNull(this.tableFLData.OSChRetry8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSChRetry8Null() {
                this[this.tableFLData.OSChRetry8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChPass1Null() {
                return this.IsNull(this.tableFLData.FTChPass1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChPass1Null() {
                this[this.tableFLData.FTChPass1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChPass2Null() {
                return this.IsNull(this.tableFLData.FTChPass2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChPass2Null() {
                this[this.tableFLData.FTChPass2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChPass3Null() {
                return this.IsNull(this.tableFLData.FTChPass3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChPass3Null() {
                this[this.tableFLData.FTChPass3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChPass4Null() {
                return this.IsNull(this.tableFLData.FTChPass4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChPass4Null() {
                this[this.tableFLData.FTChPass4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChPass5Null() {
                return this.IsNull(this.tableFLData.FTChPass5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChPass5Null() {
                this[this.tableFLData.FTChPass5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChPass6Null() {
                return this.IsNull(this.tableFLData.FTChPass6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChPass6Null() {
                this[this.tableFLData.FTChPass6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChPass7Null() {
                return this.IsNull(this.tableFLData.FTChPass7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChPass7Null() {
                this[this.tableFLData.FTChPass7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChPass8Null() {
                return this.IsNull(this.tableFLData.FTChPass8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChPass8Null() {
                this[this.tableFLData.FTChPass8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChFail1Null() {
                return this.IsNull(this.tableFLData.FTChFail1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChFail1Null() {
                this[this.tableFLData.FTChFail1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChFail2Null() {
                return this.IsNull(this.tableFLData.FTChFail2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChFail2Null() {
                this[this.tableFLData.FTChFail2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChFail3Null() {
                return this.IsNull(this.tableFLData.FTChFail3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChFail3Null() {
                this[this.tableFLData.FTChFail3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChFail4Null() {
                return this.IsNull(this.tableFLData.FTChFail4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChFail4Null() {
                this[this.tableFLData.FTChFail4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChFail5Null() {
                return this.IsNull(this.tableFLData.FTChFail5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChFail5Null() {
                this[this.tableFLData.FTChFail5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChFail6Null() {
                return this.IsNull(this.tableFLData.FTChFail6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChFail6Null() {
                this[this.tableFLData.FTChFail6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChFail7Null() {
                return this.IsNull(this.tableFLData.FTChFail7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChFail7Null() {
                this[this.tableFLData.FTChFail7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChFail8Null() {
                return this.IsNull(this.tableFLData.FTChFail8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChFail8Null() {
                this[this.tableFLData.FTChFail8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChRetry1Null() {
                return this.IsNull(this.tableFLData.FTChRetry1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChRetry1Null() {
                this[this.tableFLData.FTChRetry1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChRetry2Null() {
                return this.IsNull(this.tableFLData.FTChRetry2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChRetry2Null() {
                this[this.tableFLData.FTChRetry2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChRetry3Null() {
                return this.IsNull(this.tableFLData.FTChRetry3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChRetry3Null() {
                this[this.tableFLData.FTChRetry3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChRetry4Null() {
                return this.IsNull(this.tableFLData.FTChRetry4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChRetry4Null() {
                this[this.tableFLData.FTChRetry4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChRetry5Null() {
                return this.IsNull(this.tableFLData.FTChRetry5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChRetry5Null() {
                this[this.tableFLData.FTChRetry5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChRetry6Null() {
                return this.IsNull(this.tableFLData.FTChRetry6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChRetry6Null() {
                this[this.tableFLData.FTChRetry6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChRetry7Null() {
                return this.IsNull(this.tableFLData.FTChRetry7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChRetry7Null() {
                this[this.tableFLData.FTChRetry7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTChRetry8Null() {
                return this.IsNull(this.tableFLData.FTChRetry8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTChRetry8Null() {
                this[this.tableFLData.FTChRetry8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsWaferLotNoNull() {
                return this.IsNull(this.tableFLData.WaferLotNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetWaferLotNoNull() {
                this[this.tableFLData.WaferLotNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTempOSYieldNull() {
                return this.IsNull(this.tableFLData.TempOSYieldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTempOSYieldNull() {
                this[this.tableFLData.TempOSYieldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTempFTYieldNull() {
                return this.IsNull(this.tableFLData.TempFTYieldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTempFTYieldNull() {
                this[this.tableFLData.TempFTYieldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsNomarkCheckNull() {
                return this.IsNull(this.tableFLData.NomarkCheckColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetNomarkCheckNull() {
                this[this.tableFLData.NomarkCheckColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMCProgramVersion1Null() {
                return this.IsNull(this.tableFLData.MCProgramVersion1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMCProgramVersion1Null() {
                this[this.tableFLData.MCProgramVersion1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMCProgramVersion2Null() {
                return this.IsNull(this.tableFLData.MCProgramVersion2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMCProgramVersion2Null() {
                this[this.tableFLData.MCProgramVersion2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMCProgramVersion3Null() {
                return this.IsNull(this.tableFLData.MCProgramVersion3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMCProgramVersion3Null() {
                this[this.tableFLData.MCProgramVersion3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMCProgramVersion4Null() {
                return this.IsNull(this.tableFLData.MCProgramVersion4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMCProgramVersion4Null() {
                this[this.tableFLData.MCProgramVersion4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsKanagataCheckNull() {
                return this.IsNull(this.tableFLData.KanagataCheckColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetKanagataCheckNull() {
                this[this.tableFLData.KanagataCheckColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsVacuumCheckNull() {
                return this.IsNull(this.tableFLData.VacuumCheckColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetVacuumCheckNull() {
                this[this.tableFLData.VacuumCheckColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsDBNGNull() {
                return this.IsNull(this.tableFLData.DBNGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetDBNGNull() {
                this[this.tableFLData.DBNGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsPNashiNGNull() {
                return this.IsNull(this.tableFLData.PNashiNGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetPNashiNGNull() {
                this[this.tableFLData.PNashiNGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsWBNGNull() {
                return this.IsNull(this.tableFLData.WBNGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetWBNGNull() {
                this[this.tableFLData.WBNGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsWBInspectionNGNull() {
                return this.IsNull(this.tableFLData.WBInspectionNGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetWBInspectionNGNull() {
                this[this.tableFLData.WBInspectionNGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTurningOnRankNull() {
                return this.IsNull(this.tableFLData.TurningOnRankColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTurningOnRankNull() {
                this[this.tableFLData.TurningOnRankColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMissingICNull() {
                return this.IsNull(this.tableFLData.MissingICColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMissingICNull() {
                this[this.tableFLData.MissingICColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMissingICGLNull() {
                return this.IsNull(this.tableFLData.MissingICGLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMissingICGLNull() {
                this[this.tableFLData.MissingICGLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTSampleCheckNull() {
                return this.IsNull(this.tableFLData.FTSampleCheckColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTSampleCheckNull() {
                this[this.tableFLData.FTSampleCheckColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsJigCheckNull() {
                return this.IsNull(this.tableFLData.JigCheckColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetJigCheckNull() {
                this[this.tableFLData.JigCheckColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsKanaCleanBeforeNull() {
                return this.IsNull(this.tableFLData.KanaCleanBeforeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetKanaCleanBeforeNull() {
                this[this.tableFLData.KanaCleanBeforeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsKanaCleanAfterNull() {
                return this.IsNull(this.tableFLData.KanaCleanAfterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetKanaCleanAfterNull() {
                this[this.tableFLData.KanaCleanAfterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsNGSampleCheck_PnNull() {
                return this.IsNull(this.tableFLData.NGSampleCheck_PnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetNGSampleCheck_PnNull() {
                this[this.tableFLData.NGSampleCheck_PnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsNGSampleCheck_NNull() {
                return this.IsNull(this.tableFLData.NGSampleCheck_NColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetNGSampleCheck_NNull() {
                this[this.tableFLData.NGSampleCheck_NColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsVisualCheckModeNull() {
                return this.IsNull(this.tableFLData.VisualCheckModeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetVisualCheckModeNull() {
                this[this.tableFLData.VisualCheckModeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsVisualCheckAbnormalNull() {
                return this.IsNull(this.tableFLData.VisualCheckAbnormalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetVisualCheckAbnormalNull() {
                this[this.tableFLData.VisualCheckAbnormalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsVisualCheckAdjustNull() {
                return this.IsNull(this.tableFLData.VisualCheckAdjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetVisualCheckAdjustNull() {
                this[this.tableFLData.VisualCheckAdjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFirstShotCheckModeNull() {
                return this.IsNull(this.tableFLData.FirstShotCheckModeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFirstShotCheckModeNull() {
                this[this.tableFLData.FirstShotCheckModeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFirstShotCheckModeAbnormalNull() {
                return this.IsNull(this.tableFLData.FirstShotCheckModeAbnormalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFirstShotCheckModeAbnormalNull() {
                this[this.tableFLData.FirstShotCheckModeAbnormalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFirstShotCheckModeAdjustNull() {
                return this.IsNull(this.tableFLData.FirstShotCheckModeAdjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFirstShotCheckModeAdjustNull() {
                this[this.tableFLData.FirstShotCheckModeAdjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsEmbossTapeChangeNull() {
                return this.IsNull(this.tableFLData.EmbossTapeChangeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetEmbossTapeChangeNull() {
                this[this.tableFLData.EmbossTapeChangeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsCoverTapeChangeNull() {
                return this.IsNull(this.tableFLData.CoverTapeChangeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetCoverTapeChangeNull() {
                this[this.tableFLData.CoverTapeChangeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsIronStampCleaningNull() {
                return this.IsNull(this.tableFLData.IronStampCleaningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetIronStampCleaningNull() {
                this[this.tableFLData.IronStampCleaningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsGLCheckNull() {
                return this.IsNull(this.tableFLData.GLCheckColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetGLCheckNull() {
                this[this.tableFLData.GLCheckColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsLotJudgementNull() {
                return this.IsNull(this.tableFLData.LotJudgementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetLotJudgementNull() {
                this[this.tableFLData.LotJudgementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsGoodAdjustNull() {
                return this.IsNull(this.tableFLData.GoodAdjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetGoodAdjustNull() {
                this[this.tableFLData.GoodAdjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsNGAdjustNull() {
                return this.IsNull(this.tableFLData.NGAdjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetNGAdjustNull() {
                this[this.tableFLData.NGAdjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFTNGAdjustNull() {
                return this.IsNull(this.tableFLData.FTNGAdjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFTNGAdjustNull() {
                this[this.tableFLData.FTNGAdjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOSNGAdjustNull() {
                return this.IsNull(this.tableFLData.OSNGAdjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOSNGAdjustNull() {
                this[this.tableFLData.OSNGAdjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMekaNGAdjustNull() {
                return this.IsNull(this.tableFLData.MekaNGAdjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMekaNGAdjustNull() {
                this[this.tableFLData.MekaNGAdjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMarkerNGAdjustNull() {
                return this.IsNull(this.tableFLData.MarkerNGAdjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMarkerNGAdjustNull() {
                this[this.tableFLData.MarkerNGAdjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTPRecogNGadjustNull() {
                return this.IsNull(this.tableFLData.TPRecogNGadjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTPRecogNGadjustNull() {
                this[this.tableFLData.TPRecogNGadjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOPJudgementNull() {
                return this.IsNull(this.tableFLData.OPJudgementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOPJudgementNull() {
                this[this.tableFLData.OPJudgementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsRemarkNull() {
                return this.IsNull(this.tableFLData.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetRemarkNull() {
                this[this.tableFLData.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsInputQtyAdjustNull() {
                return this.IsNull(this.tableFLData.InputQtyAdjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetInputQtyAdjustNull() {
                this[this.tableFLData.InputQtyAdjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsEmbossTapeNoNull() {
                return this.IsNull(this.tableFLData.EmbossTapeNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetEmbossTapeNoNull() {
                this[this.tableFLData.EmbossTapeNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsMoldRecogNGAdjustNull() {
                return this.IsNull(this.tableFLData.MoldRecogNGAdjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetMoldRecogNGAdjustNull() {
                this[this.tableFLData.MoldRecogNGAdjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTGConditionNull() {
                return this.IsNull(this.tableFLData.TGConditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTGConditionNull() {
                this[this.tableFLData.TGConditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsHasuuNowAdjustNull() {
                return this.IsNull(this.tableFLData.HasuuNowAdjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetHasuuNowAdjustNull() {
                this[this.tableFLData.HasuuNowAdjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsFirstInspTestHeadNull() {
                return this.IsNull(this.tableFLData.FirstInspTestHeadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetFirstInspTestHeadNull() {
                this[this.tableFLData.FirstInspTestHeadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsOutsourceLotNoNull() {
                return this.IsNull(this.tableFLData.OutsourceLotNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetOutsourceLotNoNull() {
                this[this.tableFLData.OutsourceLotNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsContainerBoxNoNull() {
                return this.IsNull(this.tableFLData.ContainerBoxNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetContainerBoxNoNull() {
                this[this.tableFLData.ContainerBoxNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IssumyldNull() {
                return this.IsNull(this.tableFLData.sumyldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetsumyldNull() {
                this[this.tableFLData.sumyldColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class FLDataRowChangeEvent : global::System.EventArgs {
            
            private FLDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public FLDataRowChangeEvent(FLDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public FLDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace test2.DBxDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FLDataTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public FLDataTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FLData";
            tableMapping.ColumnMappings.Add("MCNo", "MCNo");
            tableMapping.ColumnMappings.Add("LotNo", "LotNo");
            tableMapping.ColumnMappings.Add("LotStartTime", "LotStartTime");
            tableMapping.ColumnMappings.Add("MCType", "MCType");
            tableMapping.ColumnMappings.Add("OPNo", "OPNo");
            tableMapping.ColumnMappings.Add("InputQty", "InputQty");
            tableMapping.ColumnMappings.Add("TotalGood", "TotalGood");
            tableMapping.ColumnMappings.Add("TotalNG", "TotalNG");
            tableMapping.ColumnMappings.Add("OPRate", "OPRate");
            tableMapping.ColumnMappings.Add("MaximumRPM", "MaximumRPM");
            tableMapping.ColumnMappings.Add("AverageRPM", "AverageRPM");
            tableMapping.ColumnMappings.Add("MTBF", "MTBF");
            tableMapping.ColumnMappings.Add("MTTR", "MTTR");
            tableMapping.ColumnMappings.Add("AlarmTotal", "AlarmTotal");
            tableMapping.ColumnMappings.Add("LotEndTime", "LotEndTime");
            tableMapping.ColumnMappings.Add("RunTime", "RunTime");
            tableMapping.ColumnMappings.Add("StopTime", "StopTime");
            tableMapping.ColumnMappings.Add("AlarmTime", "AlarmTime");
            tableMapping.ColumnMappings.Add("SelfConVersion", "SelfConVersion");
            tableMapping.ColumnMappings.Add("NetVersion", "NetVersion");
            tableMapping.ColumnMappings.Add("TestFlow", "TestFlow");
            tableMapping.ColumnMappings.Add("LaserMark1", "LaserMark1");
            tableMapping.ColumnMappings.Add("LaserMark2", "LaserMark2");
            tableMapping.ColumnMappings.Add("LaserMark3", "LaserMark3");
            tableMapping.ColumnMappings.Add("OSProgram", "OSProgram");
            tableMapping.ColumnMappings.Add("FTProgram", "FTProgram");
            tableMapping.ColumnMappings.Add("TelekoCheck", "TelekoCheck");
            tableMapping.ColumnMappings.Add("ASICheck", "ASICheck");
            tableMapping.ColumnMappings.Add("HasuuBefore", "HasuuBefore");
            tableMapping.ColumnMappings.Add("HasuuNow", "HasuuNow");
            tableMapping.ColumnMappings.Add("FrontNG", "FrontNG");
            tableMapping.ColumnMappings.Add("OS2NG", "OS2NG");
            tableMapping.ColumnMappings.Add("FrontMarkerNG", "FrontMarkerNG");
            tableMapping.ColumnMappings.Add("FLMarkerNG", "FLMarkerNG");
            tableMapping.ColumnMappings.Add("OSTesterNG", "OSTesterNG");
            tableMapping.ColumnMappings.Add("FTTesterNG", "FTTesterNG");
            tableMapping.ColumnMappings.Add("MarkingRecogNG", "MarkingRecogNG");
            tableMapping.ColumnMappings.Add("MoldRecogNG", "MoldRecogNG");
            tableMapping.ColumnMappings.Add("TPRecogNG", "TPRecogNG");
            tableMapping.ColumnMappings.Add("MekaNG1", "MekaNG1");
            tableMapping.ColumnMappings.Add("MekaNG2", "MekaNG2");
            tableMapping.ColumnMappings.Add("MekaNG3", "MekaNG3");
            tableMapping.ColumnMappings.Add("MekaNG4", "MekaNG4");
            tableMapping.ColumnMappings.Add("MekaNG5", "MekaNG5");
            tableMapping.ColumnMappings.Add("ActualMekaNG1", "ActualMekaNG1");
            tableMapping.ColumnMappings.Add("ActualMekaNG2", "ActualMekaNG2");
            tableMapping.ColumnMappings.Add("ActualMekaNG3", "ActualMekaNG3");
            tableMapping.ColumnMappings.Add("ActualMekaNG4", "ActualMekaNG4");
            tableMapping.ColumnMappings.Add("ActualMekaNG5", "ActualMekaNG5");
            tableMapping.ColumnMappings.Add("OSChPass1", "OSChPass1");
            tableMapping.ColumnMappings.Add("OSChPass2", "OSChPass2");
            tableMapping.ColumnMappings.Add("OSChPass3", "OSChPass3");
            tableMapping.ColumnMappings.Add("OSChPass4", "OSChPass4");
            tableMapping.ColumnMappings.Add("OSChPass5", "OSChPass5");
            tableMapping.ColumnMappings.Add("OSChPass6", "OSChPass6");
            tableMapping.ColumnMappings.Add("OSChPass7", "OSChPass7");
            tableMapping.ColumnMappings.Add("OSChPass8", "OSChPass8");
            tableMapping.ColumnMappings.Add("OS1ChFail1", "OS1ChFail1");
            tableMapping.ColumnMappings.Add("OS1ChFail2", "OS1ChFail2");
            tableMapping.ColumnMappings.Add("OS1ChFail3", "OS1ChFail3");
            tableMapping.ColumnMappings.Add("OS1ChFail4", "OS1ChFail4");
            tableMapping.ColumnMappings.Add("OS1ChFail5", "OS1ChFail5");
            tableMapping.ColumnMappings.Add("OS1ChFail6", "OS1ChFail6");
            tableMapping.ColumnMappings.Add("OS1ChFail7", "OS1ChFail7");
            tableMapping.ColumnMappings.Add("OS1ChFail8", "OS1ChFail8");
            tableMapping.ColumnMappings.Add("OS2ChFail1", "OS2ChFail1");
            tableMapping.ColumnMappings.Add("OS2ChFail2", "OS2ChFail2");
            tableMapping.ColumnMappings.Add("OS2ChFail3", "OS2ChFail3");
            tableMapping.ColumnMappings.Add("OS2ChFail4", "OS2ChFail4");
            tableMapping.ColumnMappings.Add("OS2ChFail5", "OS2ChFail5");
            tableMapping.ColumnMappings.Add("OS2ChFail6", "OS2ChFail6");
            tableMapping.ColumnMappings.Add("OS2ChFail7", "OS2ChFail7");
            tableMapping.ColumnMappings.Add("OS2ChFail8", "OS2ChFail8");
            tableMapping.ColumnMappings.Add("OSChRetry1", "OSChRetry1");
            tableMapping.ColumnMappings.Add("OSChRetry2", "OSChRetry2");
            tableMapping.ColumnMappings.Add("OSChRetry3", "OSChRetry3");
            tableMapping.ColumnMappings.Add("OSChRetry4", "OSChRetry4");
            tableMapping.ColumnMappings.Add("OSChRetry5", "OSChRetry5");
            tableMapping.ColumnMappings.Add("OSChRetry6", "OSChRetry6");
            tableMapping.ColumnMappings.Add("OSChRetry7", "OSChRetry7");
            tableMapping.ColumnMappings.Add("OSChRetry8", "OSChRetry8");
            tableMapping.ColumnMappings.Add("FTChPass1", "FTChPass1");
            tableMapping.ColumnMappings.Add("FTChPass2", "FTChPass2");
            tableMapping.ColumnMappings.Add("FTChPass3", "FTChPass3");
            tableMapping.ColumnMappings.Add("FTChPass4", "FTChPass4");
            tableMapping.ColumnMappings.Add("FTChPass5", "FTChPass5");
            tableMapping.ColumnMappings.Add("FTChPass6", "FTChPass6");
            tableMapping.ColumnMappings.Add("FTChPass7", "FTChPass7");
            tableMapping.ColumnMappings.Add("FTChPass8", "FTChPass8");
            tableMapping.ColumnMappings.Add("FTChFail1", "FTChFail1");
            tableMapping.ColumnMappings.Add("FTChFail2", "FTChFail2");
            tableMapping.ColumnMappings.Add("FTChFail3", "FTChFail3");
            tableMapping.ColumnMappings.Add("FTChFail4", "FTChFail4");
            tableMapping.ColumnMappings.Add("FTChFail5", "FTChFail5");
            tableMapping.ColumnMappings.Add("FTChFail6", "FTChFail6");
            tableMapping.ColumnMappings.Add("FTChFail7", "FTChFail7");
            tableMapping.ColumnMappings.Add("FTChFail8", "FTChFail8");
            tableMapping.ColumnMappings.Add("FTChRetry1", "FTChRetry1");
            tableMapping.ColumnMappings.Add("FTChRetry2", "FTChRetry2");
            tableMapping.ColumnMappings.Add("FTChRetry3", "FTChRetry3");
            tableMapping.ColumnMappings.Add("FTChRetry4", "FTChRetry4");
            tableMapping.ColumnMappings.Add("FTChRetry5", "FTChRetry5");
            tableMapping.ColumnMappings.Add("FTChRetry6", "FTChRetry6");
            tableMapping.ColumnMappings.Add("FTChRetry7", "FTChRetry7");
            tableMapping.ColumnMappings.Add("FTChRetry8", "FTChRetry8");
            tableMapping.ColumnMappings.Add("WaferLotNo", "WaferLotNo");
            tableMapping.ColumnMappings.Add("TempOSYield", "TempOSYield");
            tableMapping.ColumnMappings.Add("TempFTYield", "TempFTYield");
            tableMapping.ColumnMappings.Add("NomarkCheck", "NomarkCheck");
            tableMapping.ColumnMappings.Add("MCProgramVersion1", "MCProgramVersion1");
            tableMapping.ColumnMappings.Add("MCProgramVersion2", "MCProgramVersion2");
            tableMapping.ColumnMappings.Add("MCProgramVersion3", "MCProgramVersion3");
            tableMapping.ColumnMappings.Add("MCProgramVersion4", "MCProgramVersion4");
            tableMapping.ColumnMappings.Add("KanagataCheck", "KanagataCheck");
            tableMapping.ColumnMappings.Add("VacuumCheck", "VacuumCheck");
            tableMapping.ColumnMappings.Add("DBNG", "DBNG");
            tableMapping.ColumnMappings.Add("PNashiNG", "PNashiNG");
            tableMapping.ColumnMappings.Add("WBNG", "WBNG");
            tableMapping.ColumnMappings.Add("WBInspectionNG", "WBInspectionNG");
            tableMapping.ColumnMappings.Add("TurningOnRank", "TurningOnRank");
            tableMapping.ColumnMappings.Add("MissingIC", "MissingIC");
            tableMapping.ColumnMappings.Add("MissingICGL", "MissingICGL");
            tableMapping.ColumnMappings.Add("FTSampleCheck", "FTSampleCheck");
            tableMapping.ColumnMappings.Add("JigCheck", "JigCheck");
            tableMapping.ColumnMappings.Add("KanaCleanBefore", "KanaCleanBefore");
            tableMapping.ColumnMappings.Add("KanaCleanAfter", "KanaCleanAfter");
            tableMapping.ColumnMappings.Add("NGSampleCheck_Pn", "NGSampleCheck_Pn");
            tableMapping.ColumnMappings.Add("NGSampleCheck_N", "NGSampleCheck_N");
            tableMapping.ColumnMappings.Add("VisualCheckMode", "VisualCheckMode");
            tableMapping.ColumnMappings.Add("VisualCheckAbnormal", "VisualCheckAbnormal");
            tableMapping.ColumnMappings.Add("VisualCheckAdjust", "VisualCheckAdjust");
            tableMapping.ColumnMappings.Add("FirstShotCheckMode", "FirstShotCheckMode");
            tableMapping.ColumnMappings.Add("FirstShotCheckModeAbnormal", "FirstShotCheckModeAbnormal");
            tableMapping.ColumnMappings.Add("FirstShotCheckModeAdjust", "FirstShotCheckModeAdjust");
            tableMapping.ColumnMappings.Add("EmbossTapeChange", "EmbossTapeChange");
            tableMapping.ColumnMappings.Add("CoverTapeChange", "CoverTapeChange");
            tableMapping.ColumnMappings.Add("IronStampCleaning", "IronStampCleaning");
            tableMapping.ColumnMappings.Add("GLCheck", "GLCheck");
            tableMapping.ColumnMappings.Add("LotJudgement", "LotJudgement");
            tableMapping.ColumnMappings.Add("GoodAdjust", "GoodAdjust");
            tableMapping.ColumnMappings.Add("NGAdjust", "NGAdjust");
            tableMapping.ColumnMappings.Add("FTNGAdjust", "FTNGAdjust");
            tableMapping.ColumnMappings.Add("OSNGAdjust", "OSNGAdjust");
            tableMapping.ColumnMappings.Add("MekaNGAdjust", "MekaNGAdjust");
            tableMapping.ColumnMappings.Add("MarkerNGAdjust", "MarkerNGAdjust");
            tableMapping.ColumnMappings.Add("TPRecogNGadjust", "TPRecogNGadjust");
            tableMapping.ColumnMappings.Add("OPJudgement", "OPJudgement");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            tableMapping.ColumnMappings.Add("InputQtyAdjust", "InputQtyAdjust");
            tableMapping.ColumnMappings.Add("EmbossTapeNo", "EmbossTapeNo");
            tableMapping.ColumnMappings.Add("MoldRecogNGAdjust", "MoldRecogNGAdjust");
            tableMapping.ColumnMappings.Add("TGCondition", "TGCondition");
            tableMapping.ColumnMappings.Add("HasuuNowAdjust", "HasuuNowAdjust");
            tableMapping.ColumnMappings.Add("FirstInspTestHead", "FirstInspTestHead");
            tableMapping.ColumnMappings.Add("OutsourceLotNo", "OutsourceLotNo");
            tableMapping.ColumnMappings.Add("ContainerBoxNo", "ContainerBoxNo");
            tableMapping.ColumnMappings.Add("sumyld", "sumyld");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[FLData] WHERE (([MCNo] = @Original_MCNo) AND ([LotNo] = @Origi" +
                "nal_LotNo) AND ([LotStartTime] = @Original_LotStartTime) AND ((@IsNull_MCType = " +
                "1 AND [MCType] IS NULL) OR ([MCType] = @Original_MCType)) AND ((@IsNull_OPNo = 1" +
                " AND [OPNo] IS NULL) OR ([OPNo] = @Original_OPNo)) AND ((@IsNull_InputQty = 1 AN" +
                "D [InputQty] IS NULL) OR ([InputQty] = @Original_InputQty)) AND ((@IsNull_TotalG" +
                "ood = 1 AND [TotalGood] IS NULL) OR ([TotalGood] = @Original_TotalGood)) AND ((@" +
                "IsNull_TotalNG = 1 AND [TotalNG] IS NULL) OR ([TotalNG] = @Original_TotalNG)) AN" +
                "D ((@IsNull_OPRate = 1 AND [OPRate] IS NULL) OR ([OPRate] = @Original_OPRate)) A" +
                "ND ((@IsNull_MaximumRPM = 1 AND [MaximumRPM] IS NULL) OR ([MaximumRPM] = @Origin" +
                "al_MaximumRPM)) AND ((@IsNull_AverageRPM = 1 AND [AverageRPM] IS NULL) OR ([Aver" +
                "ageRPM] = @Original_AverageRPM)) AND ((@IsNull_MTBF = 1 AND [MTBF] IS NULL) OR (" +
                "[MTBF] = @Original_MTBF)) AND ((@IsNull_MTTR = 1 AND [MTTR] IS NULL) OR ([MTTR] " +
                "= @Original_MTTR)) AND ((@IsNull_AlarmTotal = 1 AND [AlarmTotal] IS NULL) OR ([A" +
                "larmTotal] = @Original_AlarmTotal)) AND ((@IsNull_LotEndTime = 1 AND [LotEndTime" +
                "] IS NULL) OR ([LotEndTime] = @Original_LotEndTime)) AND ((@IsNull_RunTime = 1 A" +
                "ND [RunTime] IS NULL) OR ([RunTime] = @Original_RunTime)) AND ((@IsNull_StopTime" +
                " = 1 AND [StopTime] IS NULL) OR ([StopTime] = @Original_StopTime)) AND ((@IsNull" +
                "_AlarmTime = 1 AND [AlarmTime] IS NULL) OR ([AlarmTime] = @Original_AlarmTime)) " +
                "AND ((@IsNull_SelfConVersion = 1 AND [SelfConVersion] IS NULL) OR ([SelfConVersi" +
                "on] = @Original_SelfConVersion)) AND ((@IsNull_NetVersion = 1 AND [NetVersion] I" +
                "S NULL) OR ([NetVersion] = @Original_NetVersion)) AND ((@IsNull_TestFlow = 1 AND" +
                " [TestFlow] IS NULL) OR ([TestFlow] = @Original_TestFlow)) AND ((@IsNull_LaserMa" +
                "rk1 = 1 AND [LaserMark1] IS NULL) OR ([LaserMark1] = @Original_LaserMark1)) AND " +
                "((@IsNull_LaserMark2 = 1 AND [LaserMark2] IS NULL) OR ([LaserMark2] = @Original_" +
                "LaserMark2)) AND ((@IsNull_LaserMark3 = 1 AND [LaserMark3] IS NULL) OR ([LaserMa" +
                "rk3] = @Original_LaserMark3)) AND ((@IsNull_OSProgram = 1 AND [OSProgram] IS NUL" +
                "L) OR ([OSProgram] = @Original_OSProgram)) AND ((@IsNull_FTProgram = 1 AND [FTPr" +
                "ogram] IS NULL) OR ([FTProgram] = @Original_FTProgram)) AND ((@IsNull_TelekoChec" +
                "k = 1 AND [TelekoCheck] IS NULL) OR ([TelekoCheck] = @Original_TelekoCheck)) AND" +
                " ((@IsNull_ASICheck = 1 AND [ASICheck] IS NULL) OR ([ASICheck] = @Original_ASICh" +
                "eck)) AND ((@IsNull_HasuuBefore = 1 AND [HasuuBefore] IS NULL) OR ([HasuuBefore]" +
                " = @Original_HasuuBefore)) AND ((@IsNull_HasuuNow = 1 AND [HasuuNow] IS NULL) OR" +
                " ([HasuuNow] = @Original_HasuuNow)) AND ((@IsNull_FrontNG = 1 AND [FrontNG] IS N" +
                "ULL) OR ([FrontNG] = @Original_FrontNG)) AND ((@IsNull_OS2NG = 1 AND [OS2NG] IS " +
                "NULL) OR ([OS2NG] = @Original_OS2NG)) AND ((@IsNull_FrontMarkerNG = 1 AND [Front" +
                "MarkerNG] IS NULL) OR ([FrontMarkerNG] = @Original_FrontMarkerNG)) AND ((@IsNull" +
                "_FLMarkerNG = 1 AND [FLMarkerNG] IS NULL) OR ([FLMarkerNG] = @Original_FLMarkerN" +
                "G)) AND ((@IsNull_OSTesterNG = 1 AND [OSTesterNG] IS NULL) OR ([OSTesterNG] = @O" +
                "riginal_OSTesterNG)) AND ((@IsNull_FTTesterNG = 1 AND [FTTesterNG] IS NULL) OR (" +
                "[FTTesterNG] = @Original_FTTesterNG)) AND ((@IsNull_MarkingRecogNG = 1 AND [Mark" +
                "ingRecogNG] IS NULL) OR ([MarkingRecogNG] = @Original_MarkingRecogNG)) AND ((@Is" +
                "Null_MoldRecogNG = 1 AND [MoldRecogNG] IS NULL) OR ([MoldRecogNG] = @Original_Mo" +
                "ldRecogNG)) AND ((@IsNull_TPRecogNG = 1 AND [TPRecogNG] IS NULL) OR ([TPRecogNG]" +
                " = @Original_TPRecogNG)) AND ((@IsNull_MekaNG1 = 1 AND [MekaNG1] IS NULL) OR ([M" +
                "ekaNG1] = @Original_MekaNG1)) AND ((@IsNull_MekaNG2 = 1 AND [MekaNG2] IS NULL) O" +
                "R ([MekaNG2] = @Original_MekaNG2)) AND ((@IsNull_MekaNG3 = 1 AND [MekaNG3] IS NU" +
                "LL) OR ([MekaNG3] = @Original_MekaNG3)) AND ((@IsNull_MekaNG4 = 1 AND [MekaNG4] " +
                "IS NULL) OR ([MekaNG4] = @Original_MekaNG4)) AND ((@IsNull_MekaNG5 = 1 AND [Meka" +
                "NG5] IS NULL) OR ([MekaNG5] = @Original_MekaNG5)) AND ((@IsNull_ActualMekaNG1 = " +
                "1 AND [ActualMekaNG1] IS NULL) OR ([ActualMekaNG1] = @Original_ActualMekaNG1)) A" +
                "ND ((@IsNull_ActualMekaNG2 = 1 AND [ActualMekaNG2] IS NULL) OR ([ActualMekaNG2] " +
                "= @Original_ActualMekaNG2)) AND ((@IsNull_ActualMekaNG3 = 1 AND [ActualMekaNG3] " +
                "IS NULL) OR ([ActualMekaNG3] = @Original_ActualMekaNG3)) AND ((@IsNull_ActualMek" +
                "aNG4 = 1 AND [ActualMekaNG4] IS NULL) OR ([ActualMekaNG4] = @Original_ActualMeka" +
                "NG4)) AND ((@IsNull_ActualMekaNG5 = 1 AND [ActualMekaNG5] IS NULL) OR ([ActualMe" +
                "kaNG5] = @Original_ActualMekaNG5)) AND ((@IsNull_OSChPass1 = 1 AND [OSChPass1] I" +
                "S NULL) OR ([OSChPass1] = @Original_OSChPass1)) AND ((@IsNull_OSChPass2 = 1 AND " +
                "[OSChPass2] IS NULL) OR ([OSChPass2] = @Original_OSChPass2)) AND ((@IsNull_OSChP" +
                "ass3 = 1 AND [OSChPass3] IS NULL) OR ([OSChPass3] = @Original_OSChPass3)) AND ((" +
                "@IsNull_OSChPass4 = 1 AND [OSChPass4] IS NULL) OR ([OSChPass4] = @Original_OSChP" +
                "ass4)) AND ((@IsNull_OSChPass5 = 1 AND [OSChPass5] IS NULL) OR ([OSChPass5] = @O" +
                "riginal_OSChPass5)) AND ((@IsNull_OSChPass6 = 1 AND [OSChPass6] IS NULL) OR ([OS" +
                "ChPass6] = @Original_OSChPass6)) AND ((@IsNull_OSChPass7 = 1 AND [OSChPass7] IS " +
                "NULL) OR ([OSChPass7] = @Original_OSChPass7)) AND ((@IsNull_OSChPass8 = 1 AND [O" +
                "SChPass8] IS NULL) OR ([OSChPass8] = @Original_OSChPass8)) AND ((@IsNull_OS1ChFa" +
                "il1 = 1 AND [OS1ChFail1] IS NULL) OR ([OS1ChFail1] = @Original_OS1ChFail1)) AND " +
                "((@IsNull_OS1ChFail2 = 1 AND [OS1ChFail2] IS NULL) OR ([OS1ChFail2] = @Original_" +
                "OS1ChFail2)) AND ((@IsNull_OS1ChFail3 = 1 AND [OS1ChFail3] IS NULL) OR ([OS1ChFa" +
                "il3] = @Original_OS1ChFail3)) AND ((@IsNull_OS1ChFail4 = 1 AND [OS1ChFail4] IS N" +
                "ULL) OR ([OS1ChFail4] = @Original_OS1ChFail4)) AND ((@IsNull_OS1ChFail5 = 1 AND " +
                "[OS1ChFail5] IS NULL) OR ([OS1ChFail5] = @Original_OS1ChFail5)) AND ((@IsNull_OS" +
                "1ChFail6 = 1 AND [OS1ChFail6] IS NULL) OR ([OS1ChFail6] = @Original_OS1ChFail6))" +
                " AND ((@IsNull_OS1ChFail7 = 1 AND [OS1ChFail7] IS NULL) OR ([OS1ChFail7] = @Orig" +
                "inal_OS1ChFail7)) AND ((@IsNull_OS1ChFail8 = 1 AND [OS1ChFail8] IS NULL) OR ([OS" +
                "1ChFail8] = @Original_OS1ChFail8)) AND ((@IsNull_OS2ChFail1 = 1 AND [OS2ChFail1]" +
                " IS NULL) OR ([OS2ChFail1] = @Original_OS2ChFail1)) AND ((@IsNull_OS2ChFail2 = 1" +
                " AND [OS2ChFail2] IS NULL) OR ([OS2ChFail2] = @Original_OS2ChFail2)) AND ((@IsNu" +
                "ll_OS2ChFail3 = 1 AND [OS2ChFail3] IS NULL) OR ([OS2ChFail3] = @Original_OS2ChFa" +
                "il3)) AND ((@IsNull_OS2ChFail4 = 1 AND [OS2ChFail4] IS NULL) OR ([OS2ChFail4] = " +
                "@Original_OS2ChFail4)) AND ((@IsNull_OS2ChFail5 = 1 AND [OS2ChFail5] IS NULL) OR" +
                " ([OS2ChFail5] = @Original_OS2ChFail5)) AND ((@IsNull_OS2ChFail6 = 1 AND [OS2ChF" +
                "ail6] IS NULL) OR ([OS2ChFail6] = @Original_OS2ChFail6)) AND ((@IsNull_OS2ChFail" +
                "7 = 1 AND [OS2ChFail7] IS NULL) OR ([OS2ChFail7] = @Original_OS2ChFail7)) AND ((" +
                "@IsNull_OS2ChFail8 = 1 AND [OS2ChFail8] IS NULL) OR ([OS2ChFail8] = @Original_OS" +
                "2ChFail8)) AND ((@IsNull_OSChRetry1 = 1 AND [OSChRetry1] IS NULL) OR ([OSChRetry" +
                "1] = @Original_OSChRetry1)) AND ((@IsNull_OSChRetry2 = 1 AND [OSChRetry2] IS NUL" +
                "L) OR ([OSChRetry2] = @Original_OSChRetry2)) AND ((@IsNull_OSChRetry3 = 1 AND [O" +
                "SChRetry3] IS NULL) OR ([OSChRetry3] = @Original_OSChRetry3)) AND ((@IsNull_OSCh" +
                "Retry4 = 1 AND [OSChRetry4] IS NULL) OR ([OSChRetry4] = @Original_OSChRetry4)) A" +
                "ND ((@IsNull_OSChRetry5 = 1 AND [OSChRetry5] IS NULL) OR ([OSChRetry5] = @Origin" +
                "al_OSChRetry5)) AND ((@IsNull_OSChRetry6 = 1 AND [OSChRetry6] IS NULL) OR ([OSCh" +
                "Retry6] = @Original_OSChRetry6)) AND ((@IsNull_OSChRetry7 = 1 AND [OSChRetry7] I" +
                "S NULL) OR ([OSChRetry7] = @Original_OSChRetry7)) AND ((@IsNull_OSChRetry8 = 1 A" +
                "ND [OSChRetry8] IS NULL) OR ([OSChRetry8] = @Original_OSChRetry8)) AND ((@IsNull" +
                "_FTChPass1 = 1 AND [FTChPass1] IS NULL) OR ([FTChPass1] = @Original_FTChPass1)) " +
                "AND ((@IsNull_FTChPass2 = 1 AND [FTChPass2] IS NULL) OR ([FTChPass2] = @Original" +
                "_FTChPass2)) AND ((@IsNull_FTChPass3 = 1 AND [FTChPass3] IS NULL) OR ([FTChPass3" +
                "] = @Original_FTChPass3)) AND ((@IsNull_FTChPass4 = 1 AND [FTChPass4] IS NULL) O" +
                "R ([FTChPass4] = @Original_FTChPass4)) AND ((@IsNull_FTChPass5 = 1 AND [FTChPass" +
                "5] IS NULL) OR ([FTChPass5] = @Original_FTChPass5)) AND ((@IsNull_FTChPass6 = 1 " +
                "AND [FTChPass6] IS NULL) OR ([FTChPass6] = @Original_FTChPass6)) AND ((@IsNull_F" +
                "TChPass7 = 1 AND [FTChPass7] IS NULL) OR ([FTChPass7] = @Original_FTChPass7)) AN" +
                "D ((@IsNull_FTChPass8 = 1 AND [FTChPass8] IS NULL) OR ([FTChPass8] = @Original_F" +
                "TChPass8)) AND ((@IsNull_FTChFail1 = 1 AND [FTChFail1] IS NULL) OR ([FTChFail1] " +
                "= @Original_FTChFail1)) AND ((@IsNull_FTChFail2 = 1 AND [FTChFail2] IS NULL) OR " +
                "([FTChFail2] = @Original_FTChFail2)) AND ((@IsNull_FTChFail3 = 1 AND [FTChFail3]" +
                " IS NULL) OR ([FTChFail3] = @Original_FTChFail3)) AND ((@IsNull_FTChFail4 = 1 AN" +
                "D [FTChFail4] IS NULL) OR ([FTChFail4] = @Original_FTChFail4)) AND ((@IsNull_FTC" +
                "hFail5 = 1 AND [FTChFail5] IS NULL) OR ([FTChFail5] = @Original_FTChFail5)) AND " +
                "((@IsNull_FTChFail6 = 1 AND [FTChFail6] IS NULL) OR ([FTChFail6] = @Original_FTC" +
                "hFail6)) AND ((@IsNull_FTChFail7 = 1 AND [FTChFail7] IS NULL) OR ([FTChFail7] = " +
                "@Original_FTChFail7)) AND ((@IsNull_FTChFail8 = 1 AND [FTChFail8] IS NULL) OR ([" +
                "FTChFail8] = @Original_FTChFail8)) AND ((@IsNull_FTChRetry1 = 1 AND [FTChRetry1]" +
                " IS NULL) OR ([FTChRetry1] = @Original_FTChRetry1)) AND ((@IsNull_FTChRetry2 = 1" +
                " AND [FTChRetry2] IS NULL) OR ([FTChRetry2] = @Original_FTChRetry2)) AND ((@IsNu" +
                "ll_FTChRetry3 = 1 AND [FTChRetry3] IS NULL) OR ([FTChRetry3] = @Original_FTChRet" +
                "ry3)) AND ((@IsNull_FTChRetry4 = 1 AND [FTChRetry4] IS NULL) OR ([FTChRetry4] = " +
                "@Original_FTChRetry4)) AND ((@IsNull_FTChRetry5 = 1 AND [FTChRetry5] IS NULL) OR" +
                " ([FTChRetry5] = @Original_FTChRetry5)) AND ((@IsNull_FTChRetry6 = 1 AND [FTChRe" +
                "try6] IS NULL) OR ([FTChRetry6] = @Original_FTChRetry6)) AND ((@IsNull_FTChRetry" +
                "7 = 1 AND [FTChRetry7] IS NULL) OR ([FTChRetry7] = @Original_FTChRetry7)) AND ((" +
                "@IsNull_FTChRetry8 = 1 AND [FTChRetry8] IS NULL) OR ([FTChRetry8] = @Original_FT" +
                "ChRetry8)) AND ((@IsNull_WaferLotNo = 1 AND [WaferLotNo] IS NULL) OR ([WaferLotN" +
                "o] = @Original_WaferLotNo)) AND ((@IsNull_TempOSYield = 1 AND [TempOSYield] IS N" +
                "ULL) OR ([TempOSYield] = @Original_TempOSYield)) AND ((@IsNull_TempFTYield = 1 A" +
                "ND [TempFTYield] IS NULL) OR ([TempFTYield] = @Original_TempFTYield)) AND ((@IsN" +
                "ull_NomarkCheck = 1 AND [NomarkCheck] IS NULL) OR ([NomarkCheck] = @Original_Nom" +
                "arkCheck)) AND ((@IsNull_MCProgramVersion1 = 1 AND [MCProgramVersion1] IS NULL) " +
                "OR ([MCProgramVersion1] = @Original_MCProgramVersion1)) AND ((@IsNull_MCProgramV" +
                "ersion2 = 1 AND [MCProgramVersion2] IS NULL) OR ([MCProgramVersion2] = @Original" +
                "_MCProgramVersion2)) AND ((@IsNull_MCProgramVersion3 = 1 AND [MCProgramVersion3]" +
                " IS NULL) OR ([MCProgramVersion3] = @Original_MCProgramVersion3)) AND ((@IsNull_" +
                "MCProgramVersion4 = 1 AND [MCProgramVersion4] IS NULL) OR ([MCProgramVersion4] =" +
                " @Original_MCProgramVersion4)) AND ((@IsNull_KanagataCheck = 1 AND [KanagataChec" +
                "k] IS NULL) OR ([KanagataCheck] = @Original_KanagataCheck)) AND ((@IsNull_Vacuum" +
                "Check = 1 AND [VacuumCheck] IS NULL) OR ([VacuumCheck] = @Original_VacuumCheck))" +
                " AND ((@IsNull_DBNG = 1 AND [DBNG] IS NULL) OR ([DBNG] = @Original_DBNG)) AND ((" +
                "@IsNull_PNashiNG = 1 AND [PNashiNG] IS NULL) OR ([PNashiNG] = @Original_PNashiNG" +
                ")) AND ((@IsNull_WBNG = 1 AND [WBNG] IS NULL) OR ([WBNG] = @Original_WBNG)) AND " +
                "((@IsNull_WBInspectionNG = 1 AND [WBInspectionNG] IS NULL) OR ([WBInspectionNG] " +
                "= @Original_WBInspectionNG)) AND ((@IsNull_TurningOnRank = 1 AND [TurningOnRank]" +
                " IS NULL) OR ([TurningOnRank] = @Original_TurningOnRank)) AND ((@IsNull_MissingI" +
                "C = 1 AND [MissingIC] IS NULL) OR ([MissingIC] = @Original_MissingIC)) AND ((@Is" +
                "Null_MissingICGL = 1 AND [MissingICGL] IS NULL) OR ([MissingICGL] = @Original_Mi" +
                "ssingICGL)) AND ((@IsNull_FTSampleCheck = 1 AND [FTSampleCheck] IS NULL) OR ([FT" +
                "SampleCheck] = @Original_FTSampleCheck)) AND ((@IsNull_JigCheck = 1 AND [JigChec" +
                "k] IS NULL) OR ([JigCheck] = @Original_JigCheck)) AND ((@IsNull_KanaCleanBefore " +
                "= 1 AND [KanaCleanBefore] IS NULL) OR ([KanaCleanBefore] = @Original_KanaCleanBe" +
                "fore)) AND ((@IsNull_KanaCleanAfter = 1 AND [KanaCleanAfter] IS NULL) OR ([KanaC" +
                "leanAfter] = @Original_KanaCleanAfter)) AND ((@IsNull_NGSampleCheck_Pn = 1 AND [" +
                "NGSampleCheck_Pn] IS NULL) OR ([NGSampleCheck_Pn] = @Original_NGSampleCheck_Pn))" +
                " AND ((@IsNull_NGSampleCheck_N = 1 AND [NGSampleCheck_N] IS NULL) OR ([NGSampleC" +
                "heck_N] = @Original_NGSampleCheck_N)) AND ((@IsNull_VisualCheckMode = 1 AND [Vis" +
                "ualCheckMode] IS NULL) OR ([VisualCheckMode] = @Original_VisualCheckMode)) AND (" +
                "(@IsNull_VisualCheckAbnormal = 1 AND [VisualCheckAbnormal] IS NULL) OR ([VisualC" +
                "heckAbnormal] = @Original_VisualCheckAbnormal)) AND ((@IsNull_VisualCheckAdjust " +
                "= 1 AND [VisualCheckAdjust] IS NULL) OR ([VisualCheckAdjust] = @Original_VisualC" +
                "heckAdjust)) AND ((@IsNull_FirstShotCheckMode = 1 AND [FirstShotCheckMode] IS NU" +
                "LL) OR ([FirstShotCheckMode] = @Original_FirstShotCheckMode)) AND ((@IsNull_Firs" +
                "tShotCheckModeAbnormal = 1 AND [FirstShotCheckModeAbnormal] IS NULL) OR ([FirstS" +
                "hotCheckModeAbnormal] = @Original_FirstShotCheckModeAbnormal)) AND ((@IsNull_Fir" +
                "stShotCheckModeAdjust = 1 AND [FirstShotCheckModeAdjust] IS NULL) OR ([FirstShot" +
                "CheckModeAdjust] = @Original_FirstShotCheckModeAdjust)) AND ((@IsNull_EmbossTape" +
                "Change = 1 AND [EmbossTapeChange] IS NULL) OR ([EmbossTapeChange] = @Original_Em" +
                "bossTapeChange)) AND ((@IsNull_CoverTapeChange = 1 AND [CoverTapeChange] IS NULL" +
                ") OR ([CoverTapeChange] = @Original_CoverTapeChange)) AND ((@IsNull_IronStampCle" +
                "aning = 1 AND [IronStampCleaning] IS NULL) OR ([IronStampCleaning] = @Original_I" +
                "ronStampCleaning)) AND ((@IsNull_GLCheck = 1 AND [GLCheck] IS NULL) OR ([GLCheck" +
                "] = @Original_GLCheck)) AND ((@IsNull_LotJudgement = 1 AND [LotJudgement] IS NUL" +
                "L) OR ([LotJudgement] = @Original_LotJudgement)) AND ((@IsNull_GoodAdjust = 1 AN" +
                "D [GoodAdjust] IS NULL) OR ([GoodAdjust] = @Original_GoodAdjust)) AND ((@IsNull_" +
                "NGAdjust = 1 AND [NGAdjust] IS NULL) OR ([NGAdjust] = @Original_NGAdjust)) AND (" +
                "(@IsNull_FTNGAdjust = 1 AND [FTNGAdjust] IS NULL) OR ([FTNGAdjust] = @Original_F" +
                "TNGAdjust)) AND ((@IsNull_OSNGAdjust = 1 AND [OSNGAdjust] IS NULL) OR ([OSNGAdju" +
                "st] = @Original_OSNGAdjust)) AND ((@IsNull_MekaNGAdjust = 1 AND [MekaNGAdjust] I" +
                "S NULL) OR ([MekaNGAdjust] = @Original_MekaNGAdjust)) AND ((@IsNull_MarkerNGAdju" +
                "st = 1 AND [MarkerNGAdjust] IS NULL) OR ([MarkerNGAdjust] = @Original_MarkerNGAd" +
                "just)) AND ((@IsNull_TPRecogNGadjust = 1 AND [TPRecogNGadjust] IS NULL) OR ([TPR" +
                "ecogNGadjust] = @Original_TPRecogNGadjust)) AND ((@IsNull_OPJudgement = 1 AND [O" +
                "PJudgement] IS NULL) OR ([OPJudgement] = @Original_OPJudgement)) AND ((@IsNull_R" +
                "emark = 1 AND [Remark] IS NULL) OR ([Remark] = @Original_Remark)) AND ((@IsNull_" +
                "InputQtyAdjust = 1 AND [InputQtyAdjust] IS NULL) OR ([InputQtyAdjust] = @Origina" +
                "l_InputQtyAdjust)) AND ((@IsNull_EmbossTapeNo = 1 AND [EmbossTapeNo] IS NULL) OR" +
                " ([EmbossTapeNo] = @Original_EmbossTapeNo)) AND ((@IsNull_MoldRecogNGAdjust = 1 " +
                "AND [MoldRecogNGAdjust] IS NULL) OR ([MoldRecogNGAdjust] = @Original_MoldRecogNG" +
                "Adjust)) AND ((@IsNull_TGCondition = 1 AND [TGCondition] IS NULL) OR ([TGConditi" +
                "on] = @Original_TGCondition)) AND ((@IsNull_HasuuNowAdjust = 1 AND [HasuuNowAdju" +
                "st] IS NULL) OR ([HasuuNowAdjust] = @Original_HasuuNowAdjust)) AND ((@IsNull_Fir" +
                "stInspTestHead = 1 AND [FirstInspTestHead] IS NULL) OR ([FirstInspTestHead] = @O" +
                "riginal_FirstInspTestHead)) AND ((@IsNull_OutsourceLotNo = 1 AND [OutsourceLotNo" +
                "] IS NULL) OR ([OutsourceLotNo] = @Original_OutsourceLotNo)) AND ((@IsNull_Conta" +
                "inerBoxNo = 1 AND [ContainerBoxNo] IS NULL) OR ([ContainerBoxNo] = @Original_Con" +
                "tainerBoxNo)) AND ((@IsNull_sumyld = 1 AND [sumyld] IS NULL) OR ([sumyld] = @Ori" +
                "ginal_sumyld)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MCNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LotStartTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotStartTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MCType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MCType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OPNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OPNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_InputQty", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InputQty", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InputQty", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InputQty", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TotalGood", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalGood", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalGood", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalGood", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TotalNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OPRate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPRate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OPRate", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPRate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MaximumRPM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaximumRPM", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MaximumRPM", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaximumRPM", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AverageRPM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AverageRPM", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AverageRPM", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AverageRPM", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MTBF", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MTBF", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MTBF", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MTBF", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MTTR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MTTR", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MTTR", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MTTR", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AlarmTotal", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AlarmTotal", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AlarmTotal", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AlarmTotal", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LotEndTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotEndTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LotEndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotEndTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RunTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RunTime", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StopTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StopTime", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AlarmTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AlarmTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AlarmTime", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AlarmTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SelfConVersion", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelfConVersion", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SelfConVersion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelfConVersion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NetVersion", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NetVersion", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NetVersion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NetVersion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TestFlow", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestFlow", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestFlow", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestFlow", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LaserMark1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaserMark1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LaserMark1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaserMark1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LaserMark2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaserMark2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LaserMark2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaserMark2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LaserMark3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaserMark3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LaserMark3", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaserMark3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSProgram", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSProgram", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSProgram", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSProgram", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTProgram", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTProgram", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTProgram", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTProgram", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TelekoCheck", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TelekoCheck", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TelekoCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TelekoCheck", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ASICheck", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ASICheck", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ASICheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ASICheck", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HasuuBefore", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HasuuBefore", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HasuuBefore", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HasuuBefore", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HasuuNow", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HasuuNow", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HasuuNow", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HasuuNow", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FrontNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FrontNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FrontNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FrontNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS2NG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2NG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS2NG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2NG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FrontMarkerNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FrontMarkerNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FrontMarkerNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FrontMarkerNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FLMarkerNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FLMarkerNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FLMarkerNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FLMarkerNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSTesterNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSTesterNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSTesterNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSTesterNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTTesterNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTTesterNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTTesterNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTTesterNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MarkingRecogNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarkingRecogNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MarkingRecogNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarkingRecogNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MoldRecogNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MoldRecogNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MoldRecogNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MoldRecogNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TPRecogNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TPRecogNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TPRecogNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TPRecogNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MekaNG1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MekaNG1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MekaNG2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MekaNG2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MekaNG3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MekaNG3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MekaNG4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MekaNG4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MekaNG5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MekaNG5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ActualMekaNG1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActualMekaNG1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ActualMekaNG2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActualMekaNG2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ActualMekaNG3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActualMekaNG3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ActualMekaNG4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActualMekaNG4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ActualMekaNG5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActualMekaNG5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChPass1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChPass1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChPass2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChPass2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChPass3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChPass3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChPass4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChPass4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChPass5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChPass5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChPass6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass6", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChPass6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass6", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChPass7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass7", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChPass7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass7", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChPass8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass8", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChPass8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass8", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS1ChFail1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS1ChFail1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS1ChFail2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS1ChFail2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS1ChFail3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS1ChFail3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS1ChFail4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS1ChFail4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS1ChFail5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS1ChFail5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS1ChFail6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail6", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS1ChFail6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail6", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS1ChFail7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail7", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS1ChFail7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail7", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS1ChFail8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail8", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS1ChFail8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail8", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS2ChFail1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS2ChFail1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS2ChFail2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS2ChFail2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS2ChFail3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS2ChFail3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS2ChFail4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS2ChFail4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS2ChFail5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS2ChFail5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS2ChFail6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail6", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS2ChFail6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail6", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS2ChFail7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail7", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS2ChFail7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail7", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS2ChFail8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail8", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS2ChFail8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail8", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChRetry1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChRetry1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChRetry2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChRetry2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChRetry3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChRetry3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChRetry4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChRetry4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChRetry5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChRetry5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChRetry6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry6", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChRetry6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry6", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChRetry7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry7", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChRetry7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry7", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChRetry8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry8", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChRetry8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry8", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChPass1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChPass1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChPass2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChPass2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChPass3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChPass3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChPass4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChPass4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChPass5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChPass5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChPass6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass6", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChPass6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass6", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChPass7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass7", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChPass7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass7", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChPass8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass8", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChPass8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass8", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChFail1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChFail1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChFail2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChFail2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChFail3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChFail3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChFail4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChFail4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChFail5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChFail5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChFail6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail6", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChFail6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail6", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChFail7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail7", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChFail7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail7", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChFail8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail8", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChFail8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail8", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChRetry1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChRetry1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChRetry2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChRetry2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChRetry3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChRetry3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChRetry4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChRetry4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChRetry5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChRetry5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChRetry6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry6", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChRetry6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry6", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChRetry7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry7", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChRetry7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry7", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChRetry8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry8", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChRetry8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry8", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_WaferLotNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WaferLotNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WaferLotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WaferLotNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TempOSYield", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TempOSYield", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TempOSYield", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TempOSYield", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TempFTYield", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TempFTYield", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TempFTYield", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TempFTYield", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NomarkCheck", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NomarkCheck", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NomarkCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NomarkCheck", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MCProgramVersion1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MCProgramVersion1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MCProgramVersion2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MCProgramVersion2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MCProgramVersion3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MCProgramVersion3", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MCProgramVersion4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MCProgramVersion4", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_KanagataCheck", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KanagataCheck", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_KanagataCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KanagataCheck", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_VacuumCheck", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VacuumCheck", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VacuumCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VacuumCheck", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DBNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DBNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DBNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DBNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PNashiNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PNashiNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PNashiNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PNashiNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_WBNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WBNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WBNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WBNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_WBInspectionNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WBInspectionNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WBInspectionNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WBInspectionNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TurningOnRank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TurningOnRank", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TurningOnRank", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TurningOnRank", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MissingIC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MissingIC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MissingIC", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MissingIC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MissingICGL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MissingICGL", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MissingICGL", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MissingICGL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTSampleCheck", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTSampleCheck", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTSampleCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTSampleCheck", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_JigCheck", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JigCheck", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JigCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JigCheck", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_KanaCleanBefore", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KanaCleanBefore", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_KanaCleanBefore", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KanaCleanBefore", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_KanaCleanAfter", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KanaCleanAfter", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_KanaCleanAfter", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KanaCleanAfter", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NGSampleCheck_Pn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGSampleCheck_Pn", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NGSampleCheck_Pn", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGSampleCheck_Pn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NGSampleCheck_N", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGSampleCheck_N", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NGSampleCheck_N", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGSampleCheck_N", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_VisualCheckMode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisualCheckMode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisualCheckMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisualCheckMode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_VisualCheckAbnormal", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisualCheckAbnormal", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisualCheckAbnormal", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisualCheckAbnormal", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_VisualCheckAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisualCheckAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisualCheckAdjust", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisualCheckAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FirstShotCheckMode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstShotCheckMode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FirstShotCheckMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstShotCheckMode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FirstShotCheckModeAbnormal", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstShotCheckModeAbnormal", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FirstShotCheckModeAbnormal", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstShotCheckModeAbnormal", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FirstShotCheckModeAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstShotCheckModeAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FirstShotCheckModeAdjust", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstShotCheckModeAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EmbossTapeChange", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmbossTapeChange", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmbossTapeChange", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmbossTapeChange", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CoverTapeChange", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoverTapeChange", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CoverTapeChange", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoverTapeChange", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IronStampCleaning", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IronStampCleaning", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IronStampCleaning", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IronStampCleaning", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GLCheck", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GLCheck", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GLCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GLCheck", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LotJudgement", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotJudgement", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LotJudgement", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotJudgement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GoodAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GoodAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GoodAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GoodAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NGAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTNGAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTNGAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTNGAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSNGAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSNGAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSNGAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MekaNGAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNGAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MekaNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNGAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MarkerNGAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarkerNGAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MarkerNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarkerNGAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TPRecogNGadjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TPRecogNGadjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TPRecogNGadjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TPRecogNGadjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OPJudgement", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPJudgement", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OPJudgement", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPJudgement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remark", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_InputQtyAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InputQtyAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InputQtyAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InputQtyAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EmbossTapeNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmbossTapeNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmbossTapeNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmbossTapeNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MoldRecogNGAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MoldRecogNGAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MoldRecogNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MoldRecogNGAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TGCondition", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TGCondition", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TGCondition", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TGCondition", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HasuuNowAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HasuuNowAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HasuuNowAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HasuuNowAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FirstInspTestHead", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstInspTestHead", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FirstInspTestHead", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstInspTestHead", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OutsourceLotNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OutsourceLotNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OutsourceLotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OutsourceLotNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ContainerBoxNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContainerBoxNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContainerBoxNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContainerBoxNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_sumyld", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sumyld", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sumyld", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sumyld", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[FLData] ([MCNo], [LotNo], [LotStartTime], [MCType], [OPNo], [I" +
                "nputQty], [TotalGood], [TotalNG], [OPRate], [MaximumRPM], [AverageRPM], [MTBF], " +
                "[MTTR], [AlarmTotal], [LotEndTime], [RunTime], [StopTime], [AlarmTime], [SelfCon" +
                "Version], [NetVersion], [TestFlow], [LaserMark1], [LaserMark2], [LaserMark3], [O" +
                "SProgram], [FTProgram], [TelekoCheck], [ASICheck], [HasuuBefore], [HasuuNow], [F" +
                "rontNG], [OS2NG], [FrontMarkerNG], [FLMarkerNG], [OSTesterNG], [FTTesterNG], [Ma" +
                "rkingRecogNG], [MoldRecogNG], [TPRecogNG], [MekaNG1], [MekaNG2], [MekaNG3], [Mek" +
                "aNG4], [MekaNG5], [ActualMekaNG1], [ActualMekaNG2], [ActualMekaNG3], [ActualMeka" +
                "NG4], [ActualMekaNG5], [OSChPass1], [OSChPass2], [OSChPass3], [OSChPass4], [OSCh" +
                "Pass5], [OSChPass6], [OSChPass7], [OSChPass8], [OS1ChFail1], [OS1ChFail2], [OS1C" +
                "hFail3], [OS1ChFail4], [OS1ChFail5], [OS1ChFail6], [OS1ChFail7], [OS1ChFail8], [" +
                "OS2ChFail1], [OS2ChFail2], [OS2ChFail3], [OS2ChFail4], [OS2ChFail5], [OS2ChFail6" +
                "], [OS2ChFail7], [OS2ChFail8], [OSChRetry1], [OSChRetry2], [OSChRetry3], [OSChRe" +
                "try4], [OSChRetry5], [OSChRetry6], [OSChRetry7], [OSChRetry8], [FTChPass1], [FTC" +
                "hPass2], [FTChPass3], [FTChPass4], [FTChPass5], [FTChPass6], [FTChPass7], [FTChP" +
                "ass8], [FTChFail1], [FTChFail2], [FTChFail3], [FTChFail4], [FTChFail5], [FTChFai" +
                "l6], [FTChFail7], [FTChFail8], [FTChRetry1], [FTChRetry2], [FTChRetry3], [FTChRe" +
                "try4], [FTChRetry5], [FTChRetry6], [FTChRetry7], [FTChRetry8], [WaferLotNo], [Te" +
                "mpOSYield], [TempFTYield], [NomarkCheck], [MCProgramVersion1], [MCProgramVersion" +
                "2], [MCProgramVersion3], [MCProgramVersion4], [KanagataCheck], [VacuumCheck], [D" +
                "BNG], [PNashiNG], [WBNG], [WBInspectionNG], [TurningOnRank], [MissingIC], [Missi" +
                "ngICGL], [FTSampleCheck], [JigCheck], [KanaCleanBefore], [KanaCleanAfter], [NGSa" +
                "mpleCheck_Pn], [NGSampleCheck_N], [VisualCheckMode], [VisualCheckAbnormal], [Vis" +
                "ualCheckAdjust], [FirstShotCheckMode], [FirstShotCheckModeAbnormal], [FirstShotC" +
                "heckModeAdjust], [EmbossTapeChange], [CoverTapeChange], [IronStampCleaning], [GL" +
                "Check], [LotJudgement], [GoodAdjust], [NGAdjust], [FTNGAdjust], [OSNGAdjust], [M" +
                "ekaNGAdjust], [MarkerNGAdjust], [TPRecogNGadjust], [OPJudgement], [Remark], [Inp" +
                "utQtyAdjust], [EmbossTapeNo], [MoldRecogNGAdjust], [TGCondition], [HasuuNowAdjus" +
                "t], [FirstInspTestHead], [OutsourceLotNo], [ContainerBoxNo], [sumyld]) VALUES (@" +
                "MCNo, @LotNo, @LotStartTime, @MCType, @OPNo, @InputQty, @TotalGood, @TotalNG, @O" +
                "PRate, @MaximumRPM, @AverageRPM, @MTBF, @MTTR, @AlarmTotal, @LotEndTime, @RunTim" +
                "e, @StopTime, @AlarmTime, @SelfConVersion, @NetVersion, @TestFlow, @LaserMark1, " +
                "@LaserMark2, @LaserMark3, @OSProgram, @FTProgram, @TelekoCheck, @ASICheck, @Hasu" +
                "uBefore, @HasuuNow, @FrontNG, @OS2NG, @FrontMarkerNG, @FLMarkerNG, @OSTesterNG, " +
                "@FTTesterNG, @MarkingRecogNG, @MoldRecogNG, @TPRecogNG, @MekaNG1, @MekaNG2, @Mek" +
                "aNG3, @MekaNG4, @MekaNG5, @ActualMekaNG1, @ActualMekaNG2, @ActualMekaNG3, @Actua" +
                "lMekaNG4, @ActualMekaNG5, @OSChPass1, @OSChPass2, @OSChPass3, @OSChPass4, @OSChP" +
                "ass5, @OSChPass6, @OSChPass7, @OSChPass8, @OS1ChFail1, @OS1ChFail2, @OS1ChFail3," +
                " @OS1ChFail4, @OS1ChFail5, @OS1ChFail6, @OS1ChFail7, @OS1ChFail8, @OS2ChFail1, @" +
                "OS2ChFail2, @OS2ChFail3, @OS2ChFail4, @OS2ChFail5, @OS2ChFail6, @OS2ChFail7, @OS" +
                "2ChFail8, @OSChRetry1, @OSChRetry2, @OSChRetry3, @OSChRetry4, @OSChRetry5, @OSCh" +
                "Retry6, @OSChRetry7, @OSChRetry8, @FTChPass1, @FTChPass2, @FTChPass3, @FTChPass4" +
                ", @FTChPass5, @FTChPass6, @FTChPass7, @FTChPass8, @FTChFail1, @FTChFail2, @FTChF" +
                "ail3, @FTChFail4, @FTChFail5, @FTChFail6, @FTChFail7, @FTChFail8, @FTChRetry1, @" +
                "FTChRetry2, @FTChRetry3, @FTChRetry4, @FTChRetry5, @FTChRetry6, @FTChRetry7, @FT" +
                "ChRetry8, @WaferLotNo, @TempOSYield, @TempFTYield, @NomarkCheck, @MCProgramVersi" +
                "on1, @MCProgramVersion2, @MCProgramVersion3, @MCProgramVersion4, @KanagataCheck," +
                " @VacuumCheck, @DBNG, @PNashiNG, @WBNG, @WBInspectionNG, @TurningOnRank, @Missin" +
                "gIC, @MissingICGL, @FTSampleCheck, @JigCheck, @KanaCleanBefore, @KanaCleanAfter," +
                " @NGSampleCheck_Pn, @NGSampleCheck_N, @VisualCheckMode, @VisualCheckAbnormal, @V" +
                "isualCheckAdjust, @FirstShotCheckMode, @FirstShotCheckModeAbnormal, @FirstShotCh" +
                "eckModeAdjust, @EmbossTapeChange, @CoverTapeChange, @IronStampCleaning, @GLCheck" +
                ", @LotJudgement, @GoodAdjust, @NGAdjust, @FTNGAdjust, @OSNGAdjust, @MekaNGAdjust" +
                ", @MarkerNGAdjust, @TPRecogNGadjust, @OPJudgement, @Remark, @InputQtyAdjust, @Em" +
                "bossTapeNo, @MoldRecogNGAdjust, @TGCondition, @HasuuNowAdjust, @FirstInspTestHea" +
                "d, @OutsourceLotNo, @ContainerBoxNo, @sumyld);\r\nSELECT TOP (1) MCNo, LotNo, LotS" +
                "tartTime, MCType, OPNo, InputQty, TotalGood, TotalNG, OPRate, MaximumRPM, Averag" +
                "eRPM, MTBF, MTTR, AlarmTotal, LotEndTime, RunTime, StopTime, AlarmTime, SelfConV" +
                "ersion, NetVersion, TestFlow, LaserMark1, LaserMark2, LaserMark3, OSProgram, FTP" +
                "rogram, TelekoCheck, ASICheck, HasuuBefore, HasuuNow, FrontNG, OS2NG, FrontMarke" +
                "rNG, FLMarkerNG, OSTesterNG, FTTesterNG, MarkingRecogNG, MoldRecogNG, TPRecogNG," +
                " MekaNG1, MekaNG2, MekaNG3, MekaNG4, MekaNG5, ActualMekaNG1, ActualMekaNG2, Actu" +
                "alMekaNG3, ActualMekaNG4, ActualMekaNG5, OSChPass1, OSChPass2, OSChPass3, OSChPa" +
                "ss4, OSChPass5, OSChPass6, OSChPass7, OSChPass8, OS1ChFail1, OS1ChFail2, OS1ChFa" +
                "il3, OS1ChFail4, OS1ChFail5, OS1ChFail6, OS1ChFail7, OS1ChFail8, OS2ChFail1, OS2" +
                "ChFail2, OS2ChFail3, OS2ChFail4, OS2ChFail5, OS2ChFail6, OS2ChFail7, OS2ChFail8," +
                " OSChRetry1, OSChRetry2, OSChRetry3, OSChRetry4, OSChRetry5, OSChRetry6, OSChRet" +
                "ry7, OSChRetry8, FTChPass1, FTChPass2, FTChPass3, FTChPass4, FTChPass5, FTChPass" +
                "6, FTChPass7, FTChPass8, FTChFail1, FTChFail2, FTChFail3, FTChFail4, FTChFail5, " +
                "FTChFail6, FTChFail7, FTChFail8, FTChRetry1, FTChRetry2, FTChRetry3, FTChRetry4," +
                " FTChRetry5, FTChRetry6, FTChRetry7, FTChRetry8, WaferLotNo, TempOSYield, TempFT" +
                "Yield, NomarkCheck, MCProgramVersion1, MCProgramVersion2, MCProgramVersion3, MCP" +
                "rogramVersion4, KanagataCheck, VacuumCheck, DBNG, PNashiNG, WBNG, WBInspectionNG" +
                ", TurningOnRank, MissingIC, MissingICGL, FTSampleCheck, JigCheck, KanaCleanBefor" +
                "e, KanaCleanAfter, NGSampleCheck_Pn, NGSampleCheck_N, VisualCheckMode, VisualChe" +
                "ckAbnormal, VisualCheckAdjust, FirstShotCheckMode, FirstShotCheckModeAbnormal, F" +
                "irstShotCheckModeAdjust, EmbossTapeChange, CoverTapeChange, IronStampCleaning, G" +
                "LCheck, LotJudgement, GoodAdjust, NGAdjust, FTNGAdjust, OSNGAdjust, MekaNGAdjust" +
                ", MarkerNGAdjust, TPRecogNGadjust, OPJudgement, Remark, InputQtyAdjust, EmbossTa" +
                "peNo, MoldRecogNGAdjust, TGCondition, HasuuNowAdjust, FirstInspTestHead, Outsour" +
                "ceLotNo, ContainerBoxNo, sumyld FROM FLData WHERE (LotNo = @LotNo) AND (LotStart" +
                "Time = @LotStartTime) AND (MCNo = @MCNo)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MCNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LotStartTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotStartTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MCType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OPNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InputQty", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InputQty", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalGood", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalGood", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OPRate", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPRate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MaximumRPM", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaximumRPM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AverageRPM", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AverageRPM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MTBF", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MTBF", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MTTR", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MTTR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AlarmTotal", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AlarmTotal", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LotEndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotEndTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunTime", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StopTime", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AlarmTime", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AlarmTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelfConVersion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelfConVersion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NetVersion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NetVersion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestFlow", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestFlow", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LaserMark1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaserMark1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LaserMark2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaserMark2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LaserMark3", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaserMark3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSProgram", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSProgram", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTProgram", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTProgram", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TelekoCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TelekoCheck", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ASICheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ASICheck", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HasuuBefore", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HasuuBefore", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HasuuNow", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HasuuNow", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FrontNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FrontNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS2NG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2NG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FrontMarkerNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FrontMarkerNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FLMarkerNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FLMarkerNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSTesterNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSTesterNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTTesterNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTTesterNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarkingRecogNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarkingRecogNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MoldRecogNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MoldRecogNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TPRecogNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TPRecogNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MekaNG1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MekaNG2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MekaNG3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MekaNG4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MekaNG5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActualMekaNG1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActualMekaNG2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActualMekaNG3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActualMekaNG4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActualMekaNG5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChPass1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChPass2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChPass3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChPass4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChPass5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChPass6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass6", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChPass7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass7", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChPass8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass8", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS1ChFail1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS1ChFail2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS1ChFail3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS1ChFail4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS1ChFail5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS1ChFail6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail6", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS1ChFail7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail7", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS1ChFail8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail8", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS2ChFail1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS2ChFail2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS2ChFail3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS2ChFail4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS2ChFail5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS2ChFail6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail6", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS2ChFail7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail7", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS2ChFail8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail8", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChRetry1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChRetry2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChRetry3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChRetry4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChRetry5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChRetry6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry6", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChRetry7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry7", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChRetry8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry8", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChPass1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChPass2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChPass3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChPass4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChPass5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChPass6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass6", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChPass7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass7", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChPass8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass8", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChFail1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChFail2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChFail3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChFail4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChFail5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChFail6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail6", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChFail7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail7", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChFail8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail8", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChRetry1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChRetry2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChRetry3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChRetry4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChRetry5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChRetry6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry6", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChRetry7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry7", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChRetry8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry8", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WaferLotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WaferLotNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TempOSYield", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TempOSYield", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TempFTYield", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TempFTYield", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NomarkCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NomarkCheck", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MCProgramVersion1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MCProgramVersion2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MCProgramVersion3", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MCProgramVersion4", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KanagataCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KanagataCheck", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VacuumCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VacuumCheck", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DBNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DBNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PNashiNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PNashiNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WBNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WBNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WBInspectionNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WBInspectionNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TurningOnRank", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TurningOnRank", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MissingIC", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MissingIC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MissingICGL", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MissingICGL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTSampleCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTSampleCheck", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JigCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JigCheck", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KanaCleanBefore", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KanaCleanBefore", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KanaCleanAfter", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KanaCleanAfter", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NGSampleCheck_Pn", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGSampleCheck_Pn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NGSampleCheck_N", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGSampleCheck_N", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisualCheckMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisualCheckMode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisualCheckAbnormal", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisualCheckAbnormal", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisualCheckAdjust", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisualCheckAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstShotCheckMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstShotCheckMode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstShotCheckModeAbnormal", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstShotCheckModeAbnormal", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstShotCheckModeAdjust", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstShotCheckModeAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmbossTapeChange", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmbossTapeChange", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CoverTapeChange", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoverTapeChange", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IronStampCleaning", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IronStampCleaning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GLCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GLCheck", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LotJudgement", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotJudgement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GoodAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GoodAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTNGAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSNGAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MekaNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNGAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarkerNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarkerNGAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TPRecogNGadjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TPRecogNGadjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OPJudgement", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPJudgement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InputQtyAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InputQtyAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmbossTapeNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmbossTapeNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MoldRecogNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MoldRecogNGAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TGCondition", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TGCondition", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HasuuNowAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HasuuNowAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstInspTestHead", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstInspTestHead", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OutsourceLotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OutsourceLotNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContainerBoxNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContainerBoxNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sumyld", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sumyld", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[FLData] SET [MCNo] = @MCNo, [LotNo] = @LotNo, [LotStartTime] = @Lot" +
                "StartTime, [MCType] = @MCType, [OPNo] = @OPNo, [InputQty] = @InputQty, [TotalGoo" +
                "d] = @TotalGood, [TotalNG] = @TotalNG, [OPRate] = @OPRate, [MaximumRPM] = @Maxim" +
                "umRPM, [AverageRPM] = @AverageRPM, [MTBF] = @MTBF, [MTTR] = @MTTR, [AlarmTotal] " +
                "= @AlarmTotal, [LotEndTime] = @LotEndTime, [RunTime] = @RunTime, [StopTime] = @S" +
                "topTime, [AlarmTime] = @AlarmTime, [SelfConVersion] = @SelfConVersion, [NetVersi" +
                "on] = @NetVersion, [TestFlow] = @TestFlow, [LaserMark1] = @LaserMark1, [LaserMar" +
                "k2] = @LaserMark2, [LaserMark3] = @LaserMark3, [OSProgram] = @OSProgram, [FTProg" +
                "ram] = @FTProgram, [TelekoCheck] = @TelekoCheck, [ASICheck] = @ASICheck, [HasuuB" +
                "efore] = @HasuuBefore, [HasuuNow] = @HasuuNow, [FrontNG] = @FrontNG, [OS2NG] = @" +
                "OS2NG, [FrontMarkerNG] = @FrontMarkerNG, [FLMarkerNG] = @FLMarkerNG, [OSTesterNG" +
                "] = @OSTesterNG, [FTTesterNG] = @FTTesterNG, [MarkingRecogNG] = @MarkingRecogNG," +
                " [MoldRecogNG] = @MoldRecogNG, [TPRecogNG] = @TPRecogNG, [MekaNG1] = @MekaNG1, [" +
                "MekaNG2] = @MekaNG2, [MekaNG3] = @MekaNG3, [MekaNG4] = @MekaNG4, [MekaNG5] = @Me" +
                "kaNG5, [ActualMekaNG1] = @ActualMekaNG1, [ActualMekaNG2] = @ActualMekaNG2, [Actu" +
                "alMekaNG3] = @ActualMekaNG3, [ActualMekaNG4] = @ActualMekaNG4, [ActualMekaNG5] =" +
                " @ActualMekaNG5, [OSChPass1] = @OSChPass1, [OSChPass2] = @OSChPass2, [OSChPass3]" +
                " = @OSChPass3, [OSChPass4] = @OSChPass4, [OSChPass5] = @OSChPass5, [OSChPass6] =" +
                " @OSChPass6, [OSChPass7] = @OSChPass7, [OSChPass8] = @OSChPass8, [OS1ChFail1] = " +
                "@OS1ChFail1, [OS1ChFail2] = @OS1ChFail2, [OS1ChFail3] = @OS1ChFail3, [OS1ChFail4" +
                "] = @OS1ChFail4, [OS1ChFail5] = @OS1ChFail5, [OS1ChFail6] = @OS1ChFail6, [OS1ChF" +
                "ail7] = @OS1ChFail7, [OS1ChFail8] = @OS1ChFail8, [OS2ChFail1] = @OS2ChFail1, [OS" +
                "2ChFail2] = @OS2ChFail2, [OS2ChFail3] = @OS2ChFail3, [OS2ChFail4] = @OS2ChFail4," +
                " [OS2ChFail5] = @OS2ChFail5, [OS2ChFail6] = @OS2ChFail6, [OS2ChFail7] = @OS2ChFa" +
                "il7, [OS2ChFail8] = @OS2ChFail8, [OSChRetry1] = @OSChRetry1, [OSChRetry2] = @OSC" +
                "hRetry2, [OSChRetry3] = @OSChRetry3, [OSChRetry4] = @OSChRetry4, [OSChRetry5] = " +
                "@OSChRetry5, [OSChRetry6] = @OSChRetry6, [OSChRetry7] = @OSChRetry7, [OSChRetry8" +
                "] = @OSChRetry8, [FTChPass1] = @FTChPass1, [FTChPass2] = @FTChPass2, [FTChPass3]" +
                " = @FTChPass3, [FTChPass4] = @FTChPass4, [FTChPass5] = @FTChPass5, [FTChPass6] =" +
                " @FTChPass6, [FTChPass7] = @FTChPass7, [FTChPass8] = @FTChPass8, [FTChFail1] = @" +
                "FTChFail1, [FTChFail2] = @FTChFail2, [FTChFail3] = @FTChFail3, [FTChFail4] = @FT" +
                "ChFail4, [FTChFail5] = @FTChFail5, [FTChFail6] = @FTChFail6, [FTChFail7] = @FTCh" +
                "Fail7, [FTChFail8] = @FTChFail8, [FTChRetry1] = @FTChRetry1, [FTChRetry2] = @FTC" +
                "hRetry2, [FTChRetry3] = @FTChRetry3, [FTChRetry4] = @FTChRetry4, [FTChRetry5] = " +
                "@FTChRetry5, [FTChRetry6] = @FTChRetry6, [FTChRetry7] = @FTChRetry7, [FTChRetry8" +
                "] = @FTChRetry8, [WaferLotNo] = @WaferLotNo, [TempOSYield] = @TempOSYield, [Temp" +
                "FTYield] = @TempFTYield, [NomarkCheck] = @NomarkCheck, [MCProgramVersion1] = @MC" +
                "ProgramVersion1, [MCProgramVersion2] = @MCProgramVersion2, [MCProgramVersion3] =" +
                " @MCProgramVersion3, [MCProgramVersion4] = @MCProgramVersion4, [KanagataCheck] =" +
                " @KanagataCheck, [VacuumCheck] = @VacuumCheck, [DBNG] = @DBNG, [PNashiNG] = @PNa" +
                "shiNG, [WBNG] = @WBNG, [WBInspectionNG] = @WBInspectionNG, [TurningOnRank] = @Tu" +
                "rningOnRank, [MissingIC] = @MissingIC, [MissingICGL] = @MissingICGL, [FTSampleCh" +
                "eck] = @FTSampleCheck, [JigCheck] = @JigCheck, [KanaCleanBefore] = @KanaCleanBef" +
                "ore, [KanaCleanAfter] = @KanaCleanAfter, [NGSampleCheck_Pn] = @NGSampleCheck_Pn," +
                " [NGSampleCheck_N] = @NGSampleCheck_N, [VisualCheckMode] = @VisualCheckMode, [Vi" +
                "sualCheckAbnormal] = @VisualCheckAbnormal, [VisualCheckAdjust] = @VisualCheckAdj" +
                "ust, [FirstShotCheckMode] = @FirstShotCheckMode, [FirstShotCheckModeAbnormal] = " +
                "@FirstShotCheckModeAbnormal, [FirstShotCheckModeAdjust] = @FirstShotCheckModeAdj" +
                "ust, [EmbossTapeChange] = @EmbossTapeChange, [CoverTapeChange] = @CoverTapeChang" +
                "e, [IronStampCleaning] = @IronStampCleaning, [GLCheck] = @GLCheck, [LotJudgement" +
                "] = @LotJudgement, [GoodAdjust] = @GoodAdjust, [NGAdjust] = @NGAdjust, [FTNGAdju" +
                "st] = @FTNGAdjust, [OSNGAdjust] = @OSNGAdjust, [MekaNGAdjust] = @MekaNGAdjust, [" +
                "MarkerNGAdjust] = @MarkerNGAdjust, [TPRecogNGadjust] = @TPRecogNGadjust, [OPJudg" +
                "ement] = @OPJudgement, [Remark] = @Remark, [InputQtyAdjust] = @InputQtyAdjust, [" +
                "EmbossTapeNo] = @EmbossTapeNo, [MoldRecogNGAdjust] = @MoldRecogNGAdjust, [TGCond" +
                "ition] = @TGCondition, [HasuuNowAdjust] = @HasuuNowAdjust, [FirstInspTestHead] =" +
                " @FirstInspTestHead, [OutsourceLotNo] = @OutsourceLotNo, [ContainerBoxNo] = @Con" +
                "tainerBoxNo, [sumyld] = @sumyld WHERE (([MCNo] = @Original_MCNo) AND ([LotNo] = " +
                "@Original_LotNo) AND ([LotStartTime] = @Original_LotStartTime) AND ((@IsNull_MCT" +
                "ype = 1 AND [MCType] IS NULL) OR ([MCType] = @Original_MCType)) AND ((@IsNull_OP" +
                "No = 1 AND [OPNo] IS NULL) OR ([OPNo] = @Original_OPNo)) AND ((@IsNull_InputQty " +
                "= 1 AND [InputQty] IS NULL) OR ([InputQty] = @Original_InputQty)) AND ((@IsNull_" +
                "TotalGood = 1 AND [TotalGood] IS NULL) OR ([TotalGood] = @Original_TotalGood)) A" +
                "ND ((@IsNull_TotalNG = 1 AND [TotalNG] IS NULL) OR ([TotalNG] = @Original_TotalN" +
                "G)) AND ((@IsNull_OPRate = 1 AND [OPRate] IS NULL) OR ([OPRate] = @Original_OPRa" +
                "te)) AND ((@IsNull_MaximumRPM = 1 AND [MaximumRPM] IS NULL) OR ([MaximumRPM] = @" +
                "Original_MaximumRPM)) AND ((@IsNull_AverageRPM = 1 AND [AverageRPM] IS NULL) OR " +
                "([AverageRPM] = @Original_AverageRPM)) AND ((@IsNull_MTBF = 1 AND [MTBF] IS NULL" +
                ") OR ([MTBF] = @Original_MTBF)) AND ((@IsNull_MTTR = 1 AND [MTTR] IS NULL) OR ([" +
                "MTTR] = @Original_MTTR)) AND ((@IsNull_AlarmTotal = 1 AND [AlarmTotal] IS NULL) " +
                "OR ([AlarmTotal] = @Original_AlarmTotal)) AND ((@IsNull_LotEndTime = 1 AND [LotE" +
                "ndTime] IS NULL) OR ([LotEndTime] = @Original_LotEndTime)) AND ((@IsNull_RunTime" +
                " = 1 AND [RunTime] IS NULL) OR ([RunTime] = @Original_RunTime)) AND ((@IsNull_St" +
                "opTime = 1 AND [StopTime] IS NULL) OR ([StopTime] = @Original_StopTime)) AND ((@" +
                "IsNull_AlarmTime = 1 AND [AlarmTime] IS NULL) OR ([AlarmTime] = @Original_AlarmT" +
                "ime)) AND ((@IsNull_SelfConVersion = 1 AND [SelfConVersion] IS NULL) OR ([SelfCo" +
                "nVersion] = @Original_SelfConVersion)) AND ((@IsNull_NetVersion = 1 AND [NetVers" +
                "ion] IS NULL) OR ([NetVersion] = @Original_NetVersion)) AND ((@IsNull_TestFlow =" +
                " 1 AND [TestFlow] IS NULL) OR ([TestFlow] = @Original_TestFlow)) AND ((@IsNull_L" +
                "aserMark1 = 1 AND [LaserMark1] IS NULL) OR ([LaserMark1] = @Original_LaserMark1)" +
                ") AND ((@IsNull_LaserMark2 = 1 AND [LaserMark2] IS NULL) OR ([LaserMark2] = @Ori" +
                "ginal_LaserMark2)) AND ((@IsNull_LaserMark3 = 1 AND [LaserMark3] IS NULL) OR ([L" +
                "aserMark3] = @Original_LaserMark3)) AND ((@IsNull_OSProgram = 1 AND [OSProgram] " +
                "IS NULL) OR ([OSProgram] = @Original_OSProgram)) AND ((@IsNull_FTProgram = 1 AND" +
                " [FTProgram] IS NULL) OR ([FTProgram] = @Original_FTProgram)) AND ((@IsNull_Tele" +
                "koCheck = 1 AND [TelekoCheck] IS NULL) OR ([TelekoCheck] = @Original_TelekoCheck" +
                ")) AND ((@IsNull_ASICheck = 1 AND [ASICheck] IS NULL) OR ([ASICheck] = @Original" +
                "_ASICheck)) AND ((@IsNull_HasuuBefore = 1 AND [HasuuBefore] IS NULL) OR ([HasuuB" +
                "efore] = @Original_HasuuBefore)) AND ((@IsNull_HasuuNow = 1 AND [HasuuNow] IS NU" +
                "LL) OR ([HasuuNow] = @Original_HasuuNow)) AND ((@IsNull_FrontNG = 1 AND [FrontNG" +
                "] IS NULL) OR ([FrontNG] = @Original_FrontNG)) AND ((@IsNull_OS2NG = 1 AND [OS2N" +
                "G] IS NULL) OR ([OS2NG] = @Original_OS2NG)) AND ((@IsNull_FrontMarkerNG = 1 AND " +
                "[FrontMarkerNG] IS NULL) OR ([FrontMarkerNG] = @Original_FrontMarkerNG)) AND ((@" +
                "IsNull_FLMarkerNG = 1 AND [FLMarkerNG] IS NULL) OR ([FLMarkerNG] = @Original_FLM" +
                "arkerNG)) AND ((@IsNull_OSTesterNG = 1 AND [OSTesterNG] IS NULL) OR ([OSTesterNG" +
                "] = @Original_OSTesterNG)) AND ((@IsNull_FTTesterNG = 1 AND [FTTesterNG] IS NULL" +
                ") OR ([FTTesterNG] = @Original_FTTesterNG)) AND ((@IsNull_MarkingRecogNG = 1 AND" +
                " [MarkingRecogNG] IS NULL) OR ([MarkingRecogNG] = @Original_MarkingRecogNG)) AND" +
                " ((@IsNull_MoldRecogNG = 1 AND [MoldRecogNG] IS NULL) OR ([MoldRecogNG] = @Origi" +
                "nal_MoldRecogNG)) AND ((@IsNull_TPRecogNG = 1 AND [TPRecogNG] IS NULL) OR ([TPRe" +
                "cogNG] = @Original_TPRecogNG)) AND ((@IsNull_MekaNG1 = 1 AND [MekaNG1] IS NULL) " +
                "OR ([MekaNG1] = @Original_MekaNG1)) AND ((@IsNull_MekaNG2 = 1 AND [MekaNG2] IS N" +
                "ULL) OR ([MekaNG2] = @Original_MekaNG2)) AND ((@IsNull_MekaNG3 = 1 AND [MekaNG3]" +
                " IS NULL) OR ([MekaNG3] = @Original_MekaNG3)) AND ((@IsNull_MekaNG4 = 1 AND [Mek" +
                "aNG4] IS NULL) OR ([MekaNG4] = @Original_MekaNG4)) AND ((@IsNull_MekaNG5 = 1 AND" +
                " [MekaNG5] IS NULL) OR ([MekaNG5] = @Original_MekaNG5)) AND ((@IsNull_ActualMeka" +
                "NG1 = 1 AND [ActualMekaNG1] IS NULL) OR ([ActualMekaNG1] = @Original_ActualMekaN" +
                "G1)) AND ((@IsNull_ActualMekaNG2 = 1 AND [ActualMekaNG2] IS NULL) OR ([ActualMek" +
                "aNG2] = @Original_ActualMekaNG2)) AND ((@IsNull_ActualMekaNG3 = 1 AND [ActualMek" +
                "aNG3] IS NULL) OR ([ActualMekaNG3] = @Original_ActualMekaNG3)) AND ((@IsNull_Act" +
                "ualMekaNG4 = 1 AND [ActualMekaNG4] IS NULL) OR ([ActualMekaNG4] = @Original_Actu" +
                "alMekaNG4)) AND ((@IsNull_ActualMekaNG5 = 1 AND [ActualMekaNG5] IS NULL) OR ([Ac" +
                "tualMekaNG5] = @Original_ActualMekaNG5)) AND ((@IsNull_OSChPass1 = 1 AND [OSChPa" +
                "ss1] IS NULL) OR ([OSChPass1] = @Original_OSChPass1)) AND ((@IsNull_OSChPass2 = " +
                "1 AND [OSChPass2] IS NULL) OR ([OSChPass2] = @Original_OSChPass2)) AND ((@IsNull" +
                "_OSChPass3 = 1 AND [OSChPass3] IS NULL) OR ([OSChPass3] = @Original_OSChPass3)) " +
                "AND ((@IsNull_OSChPass4 = 1 AND [OSChPass4] IS NULL) OR ([OSChPass4] = @Original" +
                "_OSChPass4)) AND ((@IsNull_OSChPass5 = 1 AND [OSChPass5] IS NULL) OR ([OSChPass5" +
                "] = @Original_OSChPass5)) AND ((@IsNull_OSChPass6 = 1 AND [OSChPass6] IS NULL) O" +
                "R ([OSChPass6] = @Original_OSChPass6)) AND ((@IsNull_OSChPass7 = 1 AND [OSChPass" +
                "7] IS NULL) OR ([OSChPass7] = @Original_OSChPass7)) AND ((@IsNull_OSChPass8 = 1 " +
                "AND [OSChPass8] IS NULL) OR ([OSChPass8] = @Original_OSChPass8)) AND ((@IsNull_O" +
                "S1ChFail1 = 1 AND [OS1ChFail1] IS NULL) OR ([OS1ChFail1] = @Original_OS1ChFail1)" +
                ") AND ((@IsNull_OS1ChFail2 = 1 AND [OS1ChFail2] IS NULL) OR ([OS1ChFail2] = @Ori" +
                "ginal_OS1ChFail2)) AND ((@IsNull_OS1ChFail3 = 1 AND [OS1ChFail3] IS NULL) OR ([O" +
                "S1ChFail3] = @Original_OS1ChFail3)) AND ((@IsNull_OS1ChFail4 = 1 AND [OS1ChFail4" +
                "] IS NULL) OR ([OS1ChFail4] = @Original_OS1ChFail4)) AND ((@IsNull_OS1ChFail5 = " +
                "1 AND [OS1ChFail5] IS NULL) OR ([OS1ChFail5] = @Original_OS1ChFail5)) AND ((@IsN" +
                "ull_OS1ChFail6 = 1 AND [OS1ChFail6] IS NULL) OR ([OS1ChFail6] = @Original_OS1ChF" +
                "ail6)) AND ((@IsNull_OS1ChFail7 = 1 AND [OS1ChFail7] IS NULL) OR ([OS1ChFail7] =" +
                " @Original_OS1ChFail7)) AND ((@IsNull_OS1ChFail8 = 1 AND [OS1ChFail8] IS NULL) O" +
                "R ([OS1ChFail8] = @Original_OS1ChFail8)) AND ((@IsNull_OS2ChFail1 = 1 AND [OS2Ch" +
                "Fail1] IS NULL) OR ([OS2ChFail1] = @Original_OS2ChFail1)) AND ((@IsNull_OS2ChFai" +
                "l2 = 1 AND [OS2ChFail2] IS NULL) OR ([OS2ChFail2] = @Original_OS2ChFail2)) AND (" +
                "(@IsNull_OS2ChFail3 = 1 AND [OS2ChFail3] IS NULL) OR ([OS2ChFail3] = @Original_O" +
                "S2ChFail3)) AND ((@IsNull_OS2ChFail4 = 1 AND [OS2ChFail4] IS NULL) OR ([OS2ChFai" +
                "l4] = @Original_OS2ChFail4)) AND ((@IsNull_OS2ChFail5 = 1 AND [OS2ChFail5] IS NU" +
                "LL) OR ([OS2ChFail5] = @Original_OS2ChFail5)) AND ((@IsNull_OS2ChFail6 = 1 AND [" +
                "OS2ChFail6] IS NULL) OR ([OS2ChFail6] = @Original_OS2ChFail6)) AND ((@IsNull_OS2" +
                "ChFail7 = 1 AND [OS2ChFail7] IS NULL) OR ([OS2ChFail7] = @Original_OS2ChFail7)) " +
                "AND ((@IsNull_OS2ChFail8 = 1 AND [OS2ChFail8] IS NULL) OR ([OS2ChFail8] = @Origi" +
                "nal_OS2ChFail8)) AND ((@IsNull_OSChRetry1 = 1 AND [OSChRetry1] IS NULL) OR ([OSC" +
                "hRetry1] = @Original_OSChRetry1)) AND ((@IsNull_OSChRetry2 = 1 AND [OSChRetry2] " +
                "IS NULL) OR ([OSChRetry2] = @Original_OSChRetry2)) AND ((@IsNull_OSChRetry3 = 1 " +
                "AND [OSChRetry3] IS NULL) OR ([OSChRetry3] = @Original_OSChRetry3)) AND ((@IsNul" +
                "l_OSChRetry4 = 1 AND [OSChRetry4] IS NULL) OR ([OSChRetry4] = @Original_OSChRetr" +
                "y4)) AND ((@IsNull_OSChRetry5 = 1 AND [OSChRetry5] IS NULL) OR ([OSChRetry5] = @" +
                "Original_OSChRetry5)) AND ((@IsNull_OSChRetry6 = 1 AND [OSChRetry6] IS NULL) OR " +
                "([OSChRetry6] = @Original_OSChRetry6)) AND ((@IsNull_OSChRetry7 = 1 AND [OSChRet" +
                "ry7] IS NULL) OR ([OSChRetry7] = @Original_OSChRetry7)) AND ((@IsNull_OSChRetry8" +
                " = 1 AND [OSChRetry8] IS NULL) OR ([OSChRetry8] = @Original_OSChRetry8)) AND ((@" +
                "IsNull_FTChPass1 = 1 AND [FTChPass1] IS NULL) OR ([FTChPass1] = @Original_FTChPa" +
                "ss1)) AND ((@IsNull_FTChPass2 = 1 AND [FTChPass2] IS NULL) OR ([FTChPass2] = @Or" +
                "iginal_FTChPass2)) AND ((@IsNull_FTChPass3 = 1 AND [FTChPass3] IS NULL) OR ([FTC" +
                "hPass3] = @Original_FTChPass3)) AND ((@IsNull_FTChPass4 = 1 AND [FTChPass4] IS N" +
                "ULL) OR ([FTChPass4] = @Original_FTChPass4)) AND ((@IsNull_FTChPass5 = 1 AND [FT" +
                "ChPass5] IS NULL) OR ([FTChPass5] = @Original_FTChPass5)) AND ((@IsNull_FTChPass" +
                "6 = 1 AND [FTChPass6] IS NULL) OR ([FTChPass6] = @Original_FTChPass6)) AND ((@Is" +
                "Null_FTChPass7 = 1 AND [FTChPass7] IS NULL) OR ([FTChPass7] = @Original_FTChPass" +
                "7)) AND ((@IsNull_FTChPass8 = 1 AND [FTChPass8] IS NULL) OR ([FTChPass8] = @Orig" +
                "inal_FTChPass8)) AND ((@IsNull_FTChFail1 = 1 AND [FTChFail1] IS NULL) OR ([FTChF" +
                "ail1] = @Original_FTChFail1)) AND ((@IsNull_FTChFail2 = 1 AND [FTChFail2] IS NUL" +
                "L) OR ([FTChFail2] = @Original_FTChFail2)) AND ((@IsNull_FTChFail3 = 1 AND [FTCh" +
                "Fail3] IS NULL) OR ([FTChFail3] = @Original_FTChFail3)) AND ((@IsNull_FTChFail4 " +
                "= 1 AND [FTChFail4] IS NULL) OR ([FTChFail4] = @Original_FTChFail4)) AND ((@IsNu" +
                "ll_FTChFail5 = 1 AND [FTChFail5] IS NULL) OR ([FTChFail5] = @Original_FTChFail5)" +
                ") AND ((@IsNull_FTChFail6 = 1 AND [FTChFail6] IS NULL) OR ([FTChFail6] = @Origin" +
                "al_FTChFail6)) AND ((@IsNull_FTChFail7 = 1 AND [FTChFail7] IS NULL) OR ([FTChFai" +
                "l7] = @Original_FTChFail7)) AND ((@IsNull_FTChFail8 = 1 AND [FTChFail8] IS NULL)" +
                " OR ([FTChFail8] = @Original_FTChFail8)) AND ((@IsNull_FTChRetry1 = 1 AND [FTChR" +
                "etry1] IS NULL) OR ([FTChRetry1] = @Original_FTChRetry1)) AND ((@IsNull_FTChRetr" +
                "y2 = 1 AND [FTChRetry2] IS NULL) OR ([FTChRetry2] = @Original_FTChRetry2)) AND (" +
                "(@IsNull_FTChRetry3 = 1 AND [FTChRetry3] IS NULL) OR ([FTChRetry3] = @Original_F" +
                "TChRetry3)) AND ((@IsNull_FTChRetry4 = 1 AND [FTChRetry4] IS NULL) OR ([FTChRetr" +
                "y4] = @Original_FTChRetry4)) AND ((@IsNull_FTChRetry5 = 1 AND [FTChRetry5] IS NU" +
                "LL) OR ([FTChRetry5] = @Original_FTChRetry5)) AND ((@IsNull_FTChRetry6 = 1 AND [" +
                "FTChRetry6] IS NULL) OR ([FTChRetry6] = @Original_FTChRetry6)) AND ((@IsNull_FTC" +
                "hRetry7 = 1 AND [FTChRetry7] IS NULL) OR ([FTChRetry7] = @Original_FTChRetry7)) " +
                "AND ((@IsNull_FTChRetry8 = 1 AND [FTChRetry8] IS NULL) OR ([FTChRetry8] = @Origi" +
                "nal_FTChRetry8)) AND ((@IsNull_WaferLotNo = 1 AND [WaferLotNo] IS NULL) OR ([Waf" +
                "erLotNo] = @Original_WaferLotNo)) AND ((@IsNull_TempOSYield = 1 AND [TempOSYield" +
                "] IS NULL) OR ([TempOSYield] = @Original_TempOSYield)) AND ((@IsNull_TempFTYield" +
                " = 1 AND [TempFTYield] IS NULL) OR ([TempFTYield] = @Original_TempFTYield)) AND " +
                "((@IsNull_NomarkCheck = 1 AND [NomarkCheck] IS NULL) OR ([NomarkCheck] = @Origin" +
                "al_NomarkCheck)) AND ((@IsNull_MCProgramVersion1 = 1 AND [MCProgramVersion1] IS " +
                "NULL) OR ([MCProgramVersion1] = @Original_MCProgramVersion1)) AND ((@IsNull_MCPr" +
                "ogramVersion2 = 1 AND [MCProgramVersion2] IS NULL) OR ([MCProgramVersion2] = @Or" +
                "iginal_MCProgramVersion2)) AND ((@IsNull_MCProgramVersion3 = 1 AND [MCProgramVer" +
                "sion3] IS NULL) OR ([MCProgramVersion3] = @Original_MCProgramVersion3)) AND ((@I" +
                "sNull_MCProgramVersion4 = 1 AND [MCProgramVersion4] IS NULL) OR ([MCProgramVersi" +
                "on4] = @Original_MCProgramVersion4)) AND ((@IsNull_KanagataCheck = 1 AND [Kanaga" +
                "taCheck] IS NULL) OR ([KanagataCheck] = @Original_KanagataCheck)) AND ((@IsNull_" +
                "VacuumCheck = 1 AND [VacuumCheck] IS NULL) OR ([VacuumCheck] = @Original_VacuumC" +
                "heck)) AND ((@IsNull_DBNG = 1 AND [DBNG] IS NULL) OR ([DBNG] = @Original_DBNG)) " +
                "AND ((@IsNull_PNashiNG = 1 AND [PNashiNG] IS NULL) OR ([PNashiNG] = @Original_PN" +
                "ashiNG)) AND ((@IsNull_WBNG = 1 AND [WBNG] IS NULL) OR ([WBNG] = @Original_WBNG)" +
                ") AND ((@IsNull_WBInspectionNG = 1 AND [WBInspectionNG] IS NULL) OR ([WBInspecti" +
                "onNG] = @Original_WBInspectionNG)) AND ((@IsNull_TurningOnRank = 1 AND [TurningO" +
                "nRank] IS NULL) OR ([TurningOnRank] = @Original_TurningOnRank)) AND ((@IsNull_Mi" +
                "ssingIC = 1 AND [MissingIC] IS NULL) OR ([MissingIC] = @Original_MissingIC)) AND" +
                " ((@IsNull_MissingICGL = 1 AND [MissingICGL] IS NULL) OR ([MissingICGL] = @Origi" +
                "nal_MissingICGL)) AND ((@IsNull_FTSampleCheck = 1 AND [FTSampleCheck] IS NULL) O" +
                "R ([FTSampleCheck] = @Original_FTSampleCheck)) AND ((@IsNull_JigCheck = 1 AND [J" +
                "igCheck] IS NULL) OR ([JigCheck] = @Original_JigCheck)) AND ((@IsNull_KanaCleanB" +
                "efore = 1 AND [KanaCleanBefore] IS NULL) OR ([KanaCleanBefore] = @Original_KanaC" +
                "leanBefore)) AND ((@IsNull_KanaCleanAfter = 1 AND [KanaCleanAfter] IS NULL) OR (" +
                "[KanaCleanAfter] = @Original_KanaCleanAfter)) AND ((@IsNull_NGSampleCheck_Pn = 1" +
                " AND [NGSampleCheck_Pn] IS NULL) OR ([NGSampleCheck_Pn] = @Original_NGSampleChec" +
                "k_Pn)) AND ((@IsNull_NGSampleCheck_N = 1 AND [NGSampleCheck_N] IS NULL) OR ([NGS" +
                "ampleCheck_N] = @Original_NGSampleCheck_N)) AND ((@IsNull_VisualCheckMode = 1 AN" +
                "D [VisualCheckMode] IS NULL) OR ([VisualCheckMode] = @Original_VisualCheckMode))" +
                " AND ((@IsNull_VisualCheckAbnormal = 1 AND [VisualCheckAbnormal] IS NULL) OR ([V" +
                "isualCheckAbnormal] = @Original_VisualCheckAbnormal)) AND ((@IsNull_VisualCheckA" +
                "djust = 1 AND [VisualCheckAdjust] IS NULL) OR ([VisualCheckAdjust] = @Original_V" +
                "isualCheckAdjust)) AND ((@IsNull_FirstShotCheckMode = 1 AND [FirstShotCheckMode]" +
                " IS NULL) OR ([FirstShotCheckMode] = @Original_FirstShotCheckMode)) AND ((@IsNul" +
                "l_FirstShotCheckModeAbnormal = 1 AND [FirstShotCheckModeAbnormal] IS NULL) OR ([" +
                "FirstShotCheckModeAbnormal] = @Original_FirstShotCheckModeAbnormal)) AND ((@IsNu" +
                "ll_FirstShotCheckModeAdjust = 1 AND [FirstShotCheckModeAdjust] IS NULL) OR ([Fir" +
                "stShotCheckModeAdjust] = @Original_FirstShotCheckModeAdjust)) AND ((@IsNull_Embo" +
                "ssTapeChange = 1 AND [EmbossTapeChange] IS NULL) OR ([EmbossTapeChange] = @Origi" +
                "nal_EmbossTapeChange)) AND ((@IsNull_CoverTapeChange = 1 AND [CoverTapeChange] I" +
                "S NULL) OR ([CoverTapeChange] = @Original_CoverTapeChange)) AND ((@IsNull_IronSt" +
                "ampCleaning = 1 AND [IronStampCleaning] IS NULL) OR ([IronStampCleaning] = @Orig" +
                "inal_IronStampCleaning)) AND ((@IsNull_GLCheck = 1 AND [GLCheck] IS NULL) OR ([G" +
                "LCheck] = @Original_GLCheck)) AND ((@IsNull_LotJudgement = 1 AND [LotJudgement] " +
                "IS NULL) OR ([LotJudgement] = @Original_LotJudgement)) AND ((@IsNull_GoodAdjust " +
                "= 1 AND [GoodAdjust] IS NULL) OR ([GoodAdjust] = @Original_GoodAdjust)) AND ((@I" +
                "sNull_NGAdjust = 1 AND [NGAdjust] IS NULL) OR ([NGAdjust] = @Original_NGAdjust))" +
                " AND ((@IsNull_FTNGAdjust = 1 AND [FTNGAdjust] IS NULL) OR ([FTNGAdjust] = @Orig" +
                "inal_FTNGAdjust)) AND ((@IsNull_OSNGAdjust = 1 AND [OSNGAdjust] IS NULL) OR ([OS" +
                "NGAdjust] = @Original_OSNGAdjust)) AND ((@IsNull_MekaNGAdjust = 1 AND [MekaNGAdj" +
                "ust] IS NULL) OR ([MekaNGAdjust] = @Original_MekaNGAdjust)) AND ((@IsNull_Marker" +
                "NGAdjust = 1 AND [MarkerNGAdjust] IS NULL) OR ([MarkerNGAdjust] = @Original_Mark" +
                "erNGAdjust)) AND ((@IsNull_TPRecogNGadjust = 1 AND [TPRecogNGadjust] IS NULL) OR" +
                " ([TPRecogNGadjust] = @Original_TPRecogNGadjust)) AND ((@IsNull_OPJudgement = 1 " +
                "AND [OPJudgement] IS NULL) OR ([OPJudgement] = @Original_OPJudgement)) AND ((@Is" +
                "Null_Remark = 1 AND [Remark] IS NULL) OR ([Remark] = @Original_Remark)) AND ((@I" +
                "sNull_InputQtyAdjust = 1 AND [InputQtyAdjust] IS NULL) OR ([InputQtyAdjust] = @O" +
                "riginal_InputQtyAdjust)) AND ((@IsNull_EmbossTapeNo = 1 AND [EmbossTapeNo] IS NU" +
                "LL) OR ([EmbossTapeNo] = @Original_EmbossTapeNo)) AND ((@IsNull_MoldRecogNGAdjus" +
                "t = 1 AND [MoldRecogNGAdjust] IS NULL) OR ([MoldRecogNGAdjust] = @Original_MoldR" +
                "ecogNGAdjust)) AND ((@IsNull_TGCondition = 1 AND [TGCondition] IS NULL) OR ([TGC" +
                "ondition] = @Original_TGCondition)) AND ((@IsNull_HasuuNowAdjust = 1 AND [HasuuN" +
                "owAdjust] IS NULL) OR ([HasuuNowAdjust] = @Original_HasuuNowAdjust)) AND ((@IsNu" +
                "ll_FirstInspTestHead = 1 AND [FirstInspTestHead] IS NULL) OR ([FirstInspTestHead" +
                "] = @Original_FirstInspTestHead)) AND ((@IsNull_OutsourceLotNo = 1 AND [Outsourc" +
                "eLotNo] IS NULL) OR ([OutsourceLotNo] = @Original_OutsourceLotNo)) AND ((@IsNull" +
                "_ContainerBoxNo = 1 AND [ContainerBoxNo] IS NULL) OR ([ContainerBoxNo] = @Origin" +
                "al_ContainerBoxNo)) AND ((@IsNull_sumyld = 1 AND [sumyld] IS NULL) OR ([sumyld] " +
                "= @Original_sumyld)));\r\nSELECT TOP (1) MCNo, LotNo, LotStartTime, MCType, OPNo, " +
                "InputQty, TotalGood, TotalNG, OPRate, MaximumRPM, AverageRPM, MTBF, MTTR, AlarmT" +
                "otal, LotEndTime, RunTime, StopTime, AlarmTime, SelfConVersion, NetVersion, Test" +
                "Flow, LaserMark1, LaserMark2, LaserMark3, OSProgram, FTProgram, TelekoCheck, ASI" +
                "Check, HasuuBefore, HasuuNow, FrontNG, OS2NG, FrontMarkerNG, FLMarkerNG, OSTeste" +
                "rNG, FTTesterNG, MarkingRecogNG, MoldRecogNG, TPRecogNG, MekaNG1, MekaNG2, MekaN" +
                "G3, MekaNG4, MekaNG5, ActualMekaNG1, ActualMekaNG2, ActualMekaNG3, ActualMekaNG4" +
                ", ActualMekaNG5, OSChPass1, OSChPass2, OSChPass3, OSChPass4, OSChPass5, OSChPass" +
                "6, OSChPass7, OSChPass8, OS1ChFail1, OS1ChFail2, OS1ChFail3, OS1ChFail4, OS1ChFa" +
                "il5, OS1ChFail6, OS1ChFail7, OS1ChFail8, OS2ChFail1, OS2ChFail2, OS2ChFail3, OS2" +
                "ChFail4, OS2ChFail5, OS2ChFail6, OS2ChFail7, OS2ChFail8, OSChRetry1, OSChRetry2," +
                " OSChRetry3, OSChRetry4, OSChRetry5, OSChRetry6, OSChRetry7, OSChRetry8, FTChPas" +
                "s1, FTChPass2, FTChPass3, FTChPass4, FTChPass5, FTChPass6, FTChPass7, FTChPass8," +
                " FTChFail1, FTChFail2, FTChFail3, FTChFail4, FTChFail5, FTChFail6, FTChFail7, FT" +
                "ChFail8, FTChRetry1, FTChRetry2, FTChRetry3, FTChRetry4, FTChRetry5, FTChRetry6," +
                " FTChRetry7, FTChRetry8, WaferLotNo, TempOSYield, TempFTYield, NomarkCheck, MCPr" +
                "ogramVersion1, MCProgramVersion2, MCProgramVersion3, MCProgramVersion4, Kanagata" +
                "Check, VacuumCheck, DBNG, PNashiNG, WBNG, WBInspectionNG, TurningOnRank, Missing" +
                "IC, MissingICGL, FTSampleCheck, JigCheck, KanaCleanBefore, KanaCleanAfter, NGSam" +
                "pleCheck_Pn, NGSampleCheck_N, VisualCheckMode, VisualCheckAbnormal, VisualCheckA" +
                "djust, FirstShotCheckMode, FirstShotCheckModeAbnormal, FirstShotCheckModeAdjust," +
                " EmbossTapeChange, CoverTapeChange, IronStampCleaning, GLCheck, LotJudgement, Go" +
                "odAdjust, NGAdjust, FTNGAdjust, OSNGAdjust, MekaNGAdjust, MarkerNGAdjust, TPReco" +
                "gNGadjust, OPJudgement, Remark, InputQtyAdjust, EmbossTapeNo, MoldRecogNGAdjust," +
                " TGCondition, HasuuNowAdjust, FirstInspTestHead, OutsourceLotNo, ContainerBoxNo," +
                " sumyld FROM FLData WHERE (LotNo = @LotNo) AND (LotStartTime = @LotStartTime) AN" +
                "D (MCNo = @MCNo)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MCNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LotStartTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotStartTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MCType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OPNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InputQty", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InputQty", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalGood", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalGood", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OPRate", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPRate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MaximumRPM", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaximumRPM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AverageRPM", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AverageRPM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MTBF", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MTBF", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MTTR", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MTTR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AlarmTotal", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AlarmTotal", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LotEndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotEndTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunTime", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StopTime", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AlarmTime", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AlarmTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelfConVersion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelfConVersion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NetVersion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NetVersion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestFlow", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestFlow", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LaserMark1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaserMark1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LaserMark2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaserMark2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LaserMark3", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaserMark3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSProgram", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSProgram", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTProgram", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTProgram", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TelekoCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TelekoCheck", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ASICheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ASICheck", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HasuuBefore", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HasuuBefore", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HasuuNow", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HasuuNow", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FrontNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FrontNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS2NG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2NG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FrontMarkerNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FrontMarkerNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FLMarkerNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FLMarkerNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSTesterNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSTesterNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTTesterNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTTesterNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarkingRecogNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarkingRecogNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MoldRecogNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MoldRecogNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TPRecogNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TPRecogNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MekaNG1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MekaNG2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MekaNG3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MekaNG4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MekaNG5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActualMekaNG1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActualMekaNG2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActualMekaNG3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActualMekaNG4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActualMekaNG5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChPass1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChPass2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChPass3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChPass4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChPass5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChPass6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass6", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChPass7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass7", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChPass8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass8", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS1ChFail1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS1ChFail2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS1ChFail3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS1ChFail4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS1ChFail5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS1ChFail6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail6", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS1ChFail7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail7", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS1ChFail8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail8", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS2ChFail1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS2ChFail2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS2ChFail3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS2ChFail4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS2ChFail5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS2ChFail6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail6", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS2ChFail7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail7", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OS2ChFail8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail8", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChRetry1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChRetry2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChRetry3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChRetry4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChRetry5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChRetry6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry6", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChRetry7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry7", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSChRetry8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry8", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChPass1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChPass2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChPass3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChPass4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChPass5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChPass6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass6", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChPass7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass7", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChPass8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass8", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChFail1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChFail2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChFail3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChFail4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChFail5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChFail6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail6", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChFail7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail7", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChFail8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail8", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChRetry1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChRetry2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChRetry3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChRetry4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChRetry5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry5", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChRetry6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry6", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChRetry7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry7", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTChRetry8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry8", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WaferLotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WaferLotNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TempOSYield", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TempOSYield", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TempFTYield", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TempFTYield", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NomarkCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NomarkCheck", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MCProgramVersion1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MCProgramVersion2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MCProgramVersion3", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MCProgramVersion4", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KanagataCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KanagataCheck", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VacuumCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VacuumCheck", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DBNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DBNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PNashiNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PNashiNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WBNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WBNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WBInspectionNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WBInspectionNG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TurningOnRank", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TurningOnRank", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MissingIC", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MissingIC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MissingICGL", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MissingICGL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTSampleCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTSampleCheck", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JigCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JigCheck", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KanaCleanBefore", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KanaCleanBefore", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KanaCleanAfter", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KanaCleanAfter", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NGSampleCheck_Pn", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGSampleCheck_Pn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NGSampleCheck_N", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGSampleCheck_N", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisualCheckMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisualCheckMode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisualCheckAbnormal", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisualCheckAbnormal", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisualCheckAdjust", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisualCheckAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstShotCheckMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstShotCheckMode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstShotCheckModeAbnormal", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstShotCheckModeAbnormal", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstShotCheckModeAdjust", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstShotCheckModeAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmbossTapeChange", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmbossTapeChange", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CoverTapeChange", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoverTapeChange", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IronStampCleaning", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IronStampCleaning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GLCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GLCheck", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LotJudgement", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotJudgement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GoodAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GoodAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FTNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTNGAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OSNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSNGAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MekaNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNGAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarkerNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarkerNGAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TPRecogNGadjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TPRecogNGadjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OPJudgement", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPJudgement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InputQtyAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InputQtyAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmbossTapeNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmbossTapeNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MoldRecogNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MoldRecogNGAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TGCondition", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TGCondition", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HasuuNowAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HasuuNowAdjust", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstInspTestHead", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstInspTestHead", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OutsourceLotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OutsourceLotNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContainerBoxNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContainerBoxNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sumyld", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sumyld", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MCNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LotStartTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotStartTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MCType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MCType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OPNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OPNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_InputQty", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InputQty", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InputQty", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InputQty", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TotalGood", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalGood", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalGood", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalGood", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TotalNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OPRate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPRate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OPRate", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPRate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MaximumRPM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaximumRPM", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MaximumRPM", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaximumRPM", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AverageRPM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AverageRPM", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AverageRPM", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AverageRPM", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MTBF", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MTBF", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MTBF", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MTBF", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MTTR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MTTR", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MTTR", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MTTR", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AlarmTotal", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AlarmTotal", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AlarmTotal", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AlarmTotal", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LotEndTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotEndTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LotEndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotEndTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RunTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RunTime", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StopTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StopTime", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AlarmTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AlarmTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AlarmTime", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AlarmTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SelfConVersion", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelfConVersion", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SelfConVersion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelfConVersion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NetVersion", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NetVersion", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NetVersion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NetVersion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TestFlow", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestFlow", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestFlow", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestFlow", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LaserMark1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaserMark1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LaserMark1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaserMark1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LaserMark2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaserMark2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LaserMark2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaserMark2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LaserMark3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaserMark3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LaserMark3", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaserMark3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSProgram", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSProgram", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSProgram", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSProgram", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTProgram", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTProgram", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTProgram", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTProgram", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TelekoCheck", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TelekoCheck", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TelekoCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TelekoCheck", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ASICheck", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ASICheck", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ASICheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ASICheck", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HasuuBefore", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HasuuBefore", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HasuuBefore", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HasuuBefore", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HasuuNow", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HasuuNow", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HasuuNow", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HasuuNow", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FrontNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FrontNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FrontNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FrontNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS2NG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2NG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS2NG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2NG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FrontMarkerNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FrontMarkerNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FrontMarkerNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FrontMarkerNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FLMarkerNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FLMarkerNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FLMarkerNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FLMarkerNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSTesterNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSTesterNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSTesterNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSTesterNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTTesterNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTTesterNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTTesterNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTTesterNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MarkingRecogNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarkingRecogNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MarkingRecogNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarkingRecogNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MoldRecogNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MoldRecogNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MoldRecogNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MoldRecogNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TPRecogNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TPRecogNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TPRecogNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TPRecogNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MekaNG1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MekaNG1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MekaNG2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MekaNG2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MekaNG3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MekaNG3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MekaNG4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MekaNG4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MekaNG5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MekaNG5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNG5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ActualMekaNG1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActualMekaNG1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ActualMekaNG2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActualMekaNG2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ActualMekaNG3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActualMekaNG3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ActualMekaNG4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActualMekaNG4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ActualMekaNG5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActualMekaNG5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualMekaNG5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChPass1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChPass1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChPass2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChPass2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChPass3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChPass3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChPass4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChPass4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChPass5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChPass5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChPass6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass6", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChPass6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass6", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChPass7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass7", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChPass7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass7", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChPass8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass8", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChPass8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChPass8", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS1ChFail1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS1ChFail1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS1ChFail2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS1ChFail2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS1ChFail3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS1ChFail3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS1ChFail4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS1ChFail4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS1ChFail5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS1ChFail5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS1ChFail6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail6", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS1ChFail6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail6", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS1ChFail7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail7", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS1ChFail7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail7", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS1ChFail8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail8", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS1ChFail8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS1ChFail8", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS2ChFail1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS2ChFail1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS2ChFail2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS2ChFail2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS2ChFail3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS2ChFail3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS2ChFail4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS2ChFail4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS2ChFail5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS2ChFail5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS2ChFail6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail6", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS2ChFail6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail6", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS2ChFail7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail7", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS2ChFail7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail7", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OS2ChFail8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail8", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OS2ChFail8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OS2ChFail8", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChRetry1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChRetry1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChRetry2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChRetry2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChRetry3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChRetry3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChRetry4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChRetry4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChRetry5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChRetry5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChRetry6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry6", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChRetry6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry6", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChRetry7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry7", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChRetry7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry7", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSChRetry8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry8", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSChRetry8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSChRetry8", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChPass1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChPass1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChPass2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChPass2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChPass3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChPass3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChPass4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChPass4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChPass5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChPass5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChPass6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass6", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChPass6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass6", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChPass7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass7", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChPass7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass7", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChPass8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass8", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChPass8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChPass8", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChFail1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChFail1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChFail2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChFail2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChFail3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChFail3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChFail4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChFail4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChFail5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChFail5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChFail6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail6", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChFail6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail6", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChFail7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail7", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChFail7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail7", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChFail8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail8", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChFail8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChFail8", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChRetry1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChRetry1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChRetry2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChRetry2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChRetry3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChRetry3", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChRetry4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChRetry4", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChRetry5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry5", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChRetry5", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry5", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChRetry6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry6", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChRetry6", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry6", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChRetry7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry7", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChRetry7", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry7", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTChRetry8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry8", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTChRetry8", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTChRetry8", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_WaferLotNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WaferLotNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WaferLotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WaferLotNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TempOSYield", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TempOSYield", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TempOSYield", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TempOSYield", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TempFTYield", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TempFTYield", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TempFTYield", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TempFTYield", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NomarkCheck", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NomarkCheck", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NomarkCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NomarkCheck", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MCProgramVersion1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MCProgramVersion1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MCProgramVersion2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MCProgramVersion2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MCProgramVersion3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MCProgramVersion3", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MCProgramVersion4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MCProgramVersion4", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MCProgramVersion4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_KanagataCheck", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KanagataCheck", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_KanagataCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KanagataCheck", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_VacuumCheck", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VacuumCheck", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VacuumCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VacuumCheck", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DBNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DBNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DBNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DBNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PNashiNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PNashiNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PNashiNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PNashiNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_WBNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WBNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WBNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WBNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_WBInspectionNG", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WBInspectionNG", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WBInspectionNG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WBInspectionNG", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TurningOnRank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TurningOnRank", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TurningOnRank", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TurningOnRank", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MissingIC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MissingIC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MissingIC", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MissingIC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MissingICGL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MissingICGL", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MissingICGL", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MissingICGL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTSampleCheck", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTSampleCheck", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTSampleCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTSampleCheck", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_JigCheck", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JigCheck", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JigCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JigCheck", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_KanaCleanBefore", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KanaCleanBefore", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_KanaCleanBefore", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KanaCleanBefore", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_KanaCleanAfter", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KanaCleanAfter", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_KanaCleanAfter", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KanaCleanAfter", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NGSampleCheck_Pn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGSampleCheck_Pn", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NGSampleCheck_Pn", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGSampleCheck_Pn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NGSampleCheck_N", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGSampleCheck_N", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NGSampleCheck_N", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGSampleCheck_N", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_VisualCheckMode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisualCheckMode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisualCheckMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisualCheckMode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_VisualCheckAbnormal", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisualCheckAbnormal", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisualCheckAbnormal", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisualCheckAbnormal", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_VisualCheckAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisualCheckAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisualCheckAdjust", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisualCheckAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FirstShotCheckMode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstShotCheckMode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FirstShotCheckMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstShotCheckMode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FirstShotCheckModeAbnormal", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstShotCheckModeAbnormal", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FirstShotCheckModeAbnormal", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstShotCheckModeAbnormal", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FirstShotCheckModeAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstShotCheckModeAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FirstShotCheckModeAdjust", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstShotCheckModeAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EmbossTapeChange", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmbossTapeChange", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmbossTapeChange", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmbossTapeChange", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CoverTapeChange", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoverTapeChange", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CoverTapeChange", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoverTapeChange", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IronStampCleaning", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IronStampCleaning", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IronStampCleaning", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IronStampCleaning", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GLCheck", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GLCheck", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GLCheck", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GLCheck", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LotJudgement", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotJudgement", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LotJudgement", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LotJudgement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GoodAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GoodAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GoodAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GoodAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NGAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FTNGAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTNGAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FTNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FTNGAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OSNGAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSNGAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OSNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OSNGAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MekaNGAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNGAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MekaNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MekaNGAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MarkerNGAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarkerNGAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MarkerNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarkerNGAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TPRecogNGadjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TPRecogNGadjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TPRecogNGadjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TPRecogNGadjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OPJudgement", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPJudgement", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OPJudgement", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPJudgement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remark", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_InputQtyAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InputQtyAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InputQtyAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InputQtyAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EmbossTapeNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmbossTapeNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmbossTapeNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmbossTapeNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MoldRecogNGAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MoldRecogNGAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MoldRecogNGAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MoldRecogNGAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TGCondition", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TGCondition", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TGCondition", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TGCondition", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HasuuNowAdjust", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HasuuNowAdjust", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HasuuNowAdjust", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HasuuNowAdjust", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FirstInspTestHead", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstInspTestHead", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FirstInspTestHead", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstInspTestHead", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OutsourceLotNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OutsourceLotNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OutsourceLotNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OutsourceLotNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ContainerBoxNo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContainerBoxNo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContainerBoxNo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContainerBoxNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_sumyld", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sumyld", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sumyld", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sumyld", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::test2.Properties.Settings.Default.Dbxuser;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TOP(1) MCNo, LotNo, LotStartTime, MCType, OPNo, InputQty, TotalGood, Total" +
                "NG, OPRate, MaximumRPM, AverageRPM, MTBF, MTTR, AlarmTotal, LotEndTime, RunTime," +
                " StopTime, AlarmTime, SelfConVersion, NetVersion, TestFlow, LaserMark1, LaserMar" +
                "k2, LaserMark3, OSProgram, FTProgram, TelekoCheck, ASICheck, HasuuBefore, HasuuN" +
                "ow, FrontNG, OS2NG, FrontMarkerNG, FLMarkerNG, OSTesterNG, FTTesterNG, MarkingRe" +
                "cogNG, MoldRecogNG, TPRecogNG, MekaNG1, MekaNG2, MekaNG3, MekaNG4, MekaNG5, Actu" +
                "alMekaNG1, ActualMekaNG2, ActualMekaNG3, ActualMekaNG4, ActualMekaNG5, OSChPass1" +
                ", OSChPass2, OSChPass3, OSChPass4, OSChPass5, OSChPass6, OSChPass7, OSChPass8, O" +
                "S1ChFail1, OS1ChFail2, OS1ChFail3, OS1ChFail4, OS1ChFail5, OS1ChFail6, OS1ChFail" +
                "7, OS1ChFail8, OS2ChFail1, OS2ChFail2, OS2ChFail3, OS2ChFail4, OS2ChFail5, OS2Ch" +
                "Fail6, OS2ChFail7, OS2ChFail8, OSChRetry1, OSChRetry2, OSChRetry3, OSChRetry4, O" +
                "SChRetry5, OSChRetry6, OSChRetry7, OSChRetry8, FTChPass1, FTChPass2, FTChPass3, " +
                "FTChPass4, FTChPass5, FTChPass6, FTChPass7, FTChPass8, FTChFail1, FTChFail2, FTC" +
                "hFail3, FTChFail4, FTChFail5, FTChFail6, FTChFail7, FTChFail8, FTChRetry1, FTChR" +
                "etry2, FTChRetry3, FTChRetry4, FTChRetry5, FTChRetry6, FTChRetry7, FTChRetry8, W" +
                "aferLotNo, TempOSYield, TempFTYield, NomarkCheck, MCProgramVersion1, MCProgramVe" +
                "rsion2, MCProgramVersion3, MCProgramVersion4, KanagataCheck, VacuumCheck, DBNG, " +
                "PNashiNG, WBNG, WBInspectionNG, TurningOnRank, MissingIC, MissingICGL, FTSampleC" +
                "heck, JigCheck, KanaCleanBefore, KanaCleanAfter, NGSampleCheck_Pn, NGSampleCheck" +
                "_N, VisualCheckMode, VisualCheckAbnormal, VisualCheckAdjust, FirstShotCheckMode," +
                " FirstShotCheckModeAbnormal, FirstShotCheckModeAdjust, EmbossTapeChange, CoverTa" +
                "peChange, IronStampCleaning, GLCheck, LotJudgement, GoodAdjust, NGAdjust, FTNGAd" +
                "just, OSNGAdjust, MekaNGAdjust, MarkerNGAdjust, TPRecogNGadjust, OPJudgement, Re" +
                "mark, InputQtyAdjust, EmbossTapeNo, MoldRecogNGAdjust, TGCondition, HasuuNowAdju" +
                "st, FirstInspTestHead, OutsourceLotNo, ContainerBoxNo, sumyld FROM dbo.FLData";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT TOP (10) ASICheck, ActualMekaNG1, ActualMekaNG2, ActualMekaNG3, ActualMeka" +
                "NG4, ActualMekaNG5, AlarmTime, AlarmTotal, AverageRPM, ContainerBoxNo, CoverTape" +
                "Change, DBNG, EmbossTapeChange, EmbossTapeNo, FLMarkerNG, FTChFail1, FTChFail2, " +
                "FTChFail3, FTChFail4, FTChFail5, FTChFail6, FTChFail7, FTChFail8, FTChPass1, FTC" +
                "hPass2, FTChPass3, FTChPass4, FTChPass5, FTChPass6, FTChPass7, FTChPass8, FTChRe" +
                "try1, FTChRetry2, FTChRetry3, FTChRetry4, FTChRetry5, FTChRetry6, FTChRetry7, FT" +
                "ChRetry8, FTNGAdjust, FTProgram, FTSampleCheck, FTTesterNG, FirstInspTestHead, F" +
                "irstShotCheckMode, FirstShotCheckModeAbnormal, FirstShotCheckModeAdjust, FrontMa" +
                "rkerNG, FrontNG, GLCheck, GoodAdjust, HasuuBefore, HasuuNow, HasuuNowAdjust, Inp" +
                "utQty, InputQtyAdjust, IronStampCleaning, JigCheck, KanaCleanAfter, KanaCleanBef" +
                "ore, KanagataCheck, LaserMark1, LaserMark2, LaserMark3, LotEndTime, LotJudgement" +
                ", LotNo, LotStartTime, MCNo, MCProgramVersion1, MCProgramVersion2, MCProgramVers" +
                "ion3, MCProgramVersion4, MCType, MTBF, MTTR, MarkerNGAdjust, MarkingRecogNG, Max" +
                "imumRPM, MekaNG1, MekaNG2, MekaNG3, MekaNG4, MekaNG5, MekaNGAdjust, MissingIC, M" +
                "issingICGL, MoldRecogNG, MoldRecogNGAdjust, NGAdjust, NGSampleCheck_N, NGSampleC" +
                "heck_Pn, NetVersion, NomarkCheck, OPJudgement, OPNo, OPRate, OS1ChFail1, OS1ChFa" +
                "il2, OS1ChFail3, OS1ChFail4, OS1ChFail5, OS1ChFail6, OS1ChFail7, OS1ChFail8, OS2" +
                "ChFail1, OS2ChFail2, OS2ChFail3, OS2ChFail4, OS2ChFail5, OS2ChFail6, OS2ChFail7," +
                " OS2ChFail8, OS2NG, OSChPass1, OSChPass2, OSChPass3, OSChPass4, OSChPass5, OSChP" +
                "ass6, OSChPass7, OSChPass8, OSChRetry1, OSChRetry2, OSChRetry3, OSChRetry4, OSCh" +
                "Retry5, OSChRetry6, OSChRetry7, OSChRetry8, OSNGAdjust, OSProgram, OSTesterNG, O" +
                "utsourceLotNo, PNashiNG, Remark, RunTime, SelfConVersion, StopTime, TGCondition," +
                " TPRecogNG, TPRecogNGadjust, TelekoCheck, TempFTYield, TempOSYield, TestFlow, To" +
                "talGood, TotalNG, TurningOnRank, VacuumCheck, VisualCheckAbnormal, VisualCheckAd" +
                "just, VisualCheckMode, WBInspectionNG, WBNG, WaferLotNo, sumyld FROM FLData";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT TOP (10) ASICheck, ActualMekaNG1, ActualMekaNG2, ActualMekaNG3, ActualMeka" +
                "NG4, ActualMekaNG5, AlarmTime, AlarmTotal, AverageRPM, ContainerBoxNo, CoverTape" +
                "Change, DBNG, EmbossTapeChange, EmbossTapeNo, FLMarkerNG, FTChFail1, FTChFail2, " +
                "FTChFail3, FTChFail4, FTChFail5, FTChFail6, FTChFail7, FTChFail8, FTChPass1, FTC" +
                "hPass2, FTChPass3, FTChPass4, FTChPass5, FTChPass6, FTChPass7, FTChPass8, FTChRe" +
                "try1, FTChRetry2, FTChRetry3, FTChRetry4, FTChRetry5, FTChRetry6, FTChRetry7, FT" +
                "ChRetry8, FTNGAdjust, FTProgram, FTSampleCheck, FTTesterNG, FirstInspTestHead, F" +
                "irstShotCheckMode, FirstShotCheckModeAbnormal, FirstShotCheckModeAdjust, FrontMa" +
                "rkerNG, FrontNG, GLCheck, GoodAdjust, HasuuBefore, HasuuNow, HasuuNowAdjust, Inp" +
                "utQty, InputQtyAdjust, IronStampCleaning, JigCheck, KanaCleanAfter, KanaCleanBef" +
                "ore, KanagataCheck, LaserMark1, LaserMark2, LaserMark3, LotEndTime, LotJudgement" +
                ", LotNo, LotStartTime, MCNo, MCProgramVersion1, MCProgramVersion2, MCProgramVers" +
                "ion3, MCProgramVersion4, MCType, MTBF, MTTR, MarkerNGAdjust, MarkingRecogNG, Max" +
                "imumRPM, MekaNG1, MekaNG2, MekaNG3, MekaNG4, MekaNG5, MekaNGAdjust, MissingIC, M" +
                "issingICGL, MoldRecogNG, MoldRecogNGAdjust, NGAdjust, NGSampleCheck_N, NGSampleC" +
                "heck_Pn, NetVersion, NomarkCheck, OPJudgement, OPNo, OPRate, OS1ChFail1, OS1ChFa" +
                "il2, OS1ChFail3, OS1ChFail4, OS1ChFail5, OS1ChFail6, OS1ChFail7, OS1ChFail8, OS2" +
                "ChFail1, OS2ChFail2, OS2ChFail3, OS2ChFail4, OS2ChFail5, OS2ChFail6, OS2ChFail7," +
                " OS2ChFail8, OS2NG, OSChPass1, OSChPass2, OSChPass3, OSChPass4, OSChPass5, OSChP" +
                "ass6, OSChPass7, OSChPass8, OSChRetry1, OSChRetry2, OSChRetry3, OSChRetry4, OSCh" +
                "Retry5, OSChRetry6, OSChRetry7, OSChRetry8, OSNGAdjust, OSProgram, OSTesterNG, O" +
                "utsourceLotNo, PNashiNG, Remark, RunTime, SelfConVersion, StopTime, TGCondition," +
                " TPRecogNG, TPRecogNGadjust, TelekoCheck, TempFTYield, TempOSYield, TestFlow, To" +
                "talGood, TotalNG, TurningOnRank, VacuumCheck, VisualCheckAbnormal, VisualCheckAd" +
                "just, VisualCheckMode, WBInspectionNG, WBNG, WaferLotNo, sumyld FROM FLData WHER" +
                "E (MCNo = @McNo) ORDER BY LotStartTime DESC";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@McNo", global::System.Data.SqlDbType.VarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "MCNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DBxDataSet.FLDataDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DBxDataSet.FLDataDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DBxDataSet.FLDataDataTable dataTable = new DBxDataSet.FLDataDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(DBxDataSet.FLDataDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy1(DBxDataSet.FLDataDataTable dataTable, string McNo) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((McNo == null)) {
                throw new global::System.ArgumentNullException("McNo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(McNo));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DBxDataSet.FLDataDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DBxDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FLData");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    string Original_MCNo, 
                    string Original_LotNo, 
                    System.DateTime Original_LotStartTime, 
                    string Original_MCType, 
                    string Original_OPNo, 
                    global::System.Nullable<short> Original_InputQty, 
                    global::System.Nullable<short> Original_TotalGood, 
                    global::System.Nullable<short> Original_TotalNG, 
                    global::System.Nullable<float> Original_OPRate, 
                    global::System.Nullable<float> Original_MaximumRPM, 
                    global::System.Nullable<float> Original_AverageRPM, 
                    global::System.Nullable<float> Original_MTBF, 
                    global::System.Nullable<float> Original_MTTR, 
                    global::System.Nullable<short> Original_AlarmTotal, 
                    global::System.Nullable<global::System.DateTime> Original_LotEndTime, 
                    global::System.Nullable<float> Original_RunTime, 
                    global::System.Nullable<float> Original_StopTime, 
                    global::System.Nullable<float> Original_AlarmTime, 
                    string Original_SelfConVersion, 
                    string Original_NetVersion, 
                    string Original_TestFlow, 
                    string Original_LaserMark1, 
                    string Original_LaserMark2, 
                    string Original_LaserMark3, 
                    string Original_OSProgram, 
                    string Original_FTProgram, 
                    string Original_TelekoCheck, 
                    string Original_ASICheck, 
                    global::System.Nullable<short> Original_HasuuBefore, 
                    global::System.Nullable<short> Original_HasuuNow, 
                    global::System.Nullable<short> Original_FrontNG, 
                    global::System.Nullable<short> Original_OS2NG, 
                    global::System.Nullable<short> Original_FrontMarkerNG, 
                    global::System.Nullable<short> Original_FLMarkerNG, 
                    global::System.Nullable<short> Original_OSTesterNG, 
                    global::System.Nullable<short> Original_FTTesterNG, 
                    global::System.Nullable<short> Original_MarkingRecogNG, 
                    global::System.Nullable<short> Original_MoldRecogNG, 
                    global::System.Nullable<short> Original_TPRecogNG, 
                    global::System.Nullable<short> Original_MekaNG1, 
                    global::System.Nullable<short> Original_MekaNG2, 
                    global::System.Nullable<short> Original_MekaNG3, 
                    global::System.Nullable<short> Original_MekaNG4, 
                    global::System.Nullable<short> Original_MekaNG5, 
                    global::System.Nullable<short> Original_ActualMekaNG1, 
                    global::System.Nullable<short> Original_ActualMekaNG2, 
                    global::System.Nullable<short> Original_ActualMekaNG3, 
                    global::System.Nullable<short> Original_ActualMekaNG4, 
                    global::System.Nullable<short> Original_ActualMekaNG5, 
                    global::System.Nullable<short> Original_OSChPass1, 
                    global::System.Nullable<short> Original_OSChPass2, 
                    global::System.Nullable<short> Original_OSChPass3, 
                    global::System.Nullable<short> Original_OSChPass4, 
                    global::System.Nullable<short> Original_OSChPass5, 
                    global::System.Nullable<short> Original_OSChPass6, 
                    global::System.Nullable<short> Original_OSChPass7, 
                    global::System.Nullable<short> Original_OSChPass8, 
                    global::System.Nullable<short> Original_OS1ChFail1, 
                    global::System.Nullable<short> Original_OS1ChFail2, 
                    global::System.Nullable<short> Original_OS1ChFail3, 
                    global::System.Nullable<short> Original_OS1ChFail4, 
                    global::System.Nullable<short> Original_OS1ChFail5, 
                    global::System.Nullable<short> Original_OS1ChFail6, 
                    global::System.Nullable<short> Original_OS1ChFail7, 
                    global::System.Nullable<short> Original_OS1ChFail8, 
                    global::System.Nullable<short> Original_OS2ChFail1, 
                    global::System.Nullable<short> Original_OS2ChFail2, 
                    global::System.Nullable<short> Original_OS2ChFail3, 
                    global::System.Nullable<short> Original_OS2ChFail4, 
                    global::System.Nullable<short> Original_OS2ChFail5, 
                    global::System.Nullable<short> Original_OS2ChFail6, 
                    global::System.Nullable<short> Original_OS2ChFail7, 
                    global::System.Nullable<short> Original_OS2ChFail8, 
                    global::System.Nullable<short> Original_OSChRetry1, 
                    global::System.Nullable<short> Original_OSChRetry2, 
                    global::System.Nullable<short> Original_OSChRetry3, 
                    global::System.Nullable<short> Original_OSChRetry4, 
                    global::System.Nullable<short> Original_OSChRetry5, 
                    global::System.Nullable<short> Original_OSChRetry6, 
                    global::System.Nullable<short> Original_OSChRetry7, 
                    global::System.Nullable<short> Original_OSChRetry8, 
                    global::System.Nullable<short> Original_FTChPass1, 
                    global::System.Nullable<short> Original_FTChPass2, 
                    global::System.Nullable<short> Original_FTChPass3, 
                    global::System.Nullable<short> Original_FTChPass4, 
                    global::System.Nullable<short> Original_FTChPass5, 
                    global::System.Nullable<short> Original_FTChPass6, 
                    global::System.Nullable<short> Original_FTChPass7, 
                    global::System.Nullable<short> Original_FTChPass8, 
                    global::System.Nullable<short> Original_FTChFail1, 
                    global::System.Nullable<short> Original_FTChFail2, 
                    global::System.Nullable<short> Original_FTChFail3, 
                    global::System.Nullable<short> Original_FTChFail4, 
                    global::System.Nullable<short> Original_FTChFail5, 
                    global::System.Nullable<short> Original_FTChFail6, 
                    global::System.Nullable<short> Original_FTChFail7, 
                    global::System.Nullable<short> Original_FTChFail8, 
                    global::System.Nullable<short> Original_FTChRetry1, 
                    global::System.Nullable<short> Original_FTChRetry2, 
                    global::System.Nullable<short> Original_FTChRetry3, 
                    global::System.Nullable<short> Original_FTChRetry4, 
                    global::System.Nullable<short> Original_FTChRetry5, 
                    global::System.Nullable<short> Original_FTChRetry6, 
                    global::System.Nullable<short> Original_FTChRetry7, 
                    global::System.Nullable<short> Original_FTChRetry8, 
                    string Original_WaferLotNo, 
                    global::System.Nullable<float> Original_TempOSYield, 
                    global::System.Nullable<float> Original_TempFTYield, 
                    string Original_NomarkCheck, 
                    string Original_MCProgramVersion1, 
                    string Original_MCProgramVersion2, 
                    string Original_MCProgramVersion3, 
                    string Original_MCProgramVersion4, 
                    string Original_KanagataCheck, 
                    string Original_VacuumCheck, 
                    global::System.Nullable<short> Original_DBNG, 
                    global::System.Nullable<short> Original_PNashiNG, 
                    global::System.Nullable<short> Original_WBNG, 
                    global::System.Nullable<short> Original_WBInspectionNG, 
                    string Original_TurningOnRank, 
                    global::System.Nullable<short> Original_MissingIC, 
                    global::System.Nullable<bool> Original_MissingICGL, 
                    string Original_FTSampleCheck, 
                    string Original_JigCheck, 
                    string Original_KanaCleanBefore, 
                    string Original_KanaCleanAfter, 
                    global::System.Nullable<short> Original_NGSampleCheck_Pn, 
                    global::System.Nullable<short> Original_NGSampleCheck_N, 
                    string Original_VisualCheckMode, 
                    string Original_VisualCheckAbnormal, 
                    string Original_VisualCheckAdjust, 
                    string Original_FirstShotCheckMode, 
                    string Original_FirstShotCheckModeAbnormal, 
                    string Original_FirstShotCheckModeAdjust, 
                    global::System.Nullable<short> Original_EmbossTapeChange, 
                    global::System.Nullable<short> Original_CoverTapeChange, 
                    global::System.Nullable<short> Original_IronStampCleaning, 
                    string Original_GLCheck, 
                    string Original_LotJudgement, 
                    global::System.Nullable<short> Original_GoodAdjust, 
                    global::System.Nullable<short> Original_NGAdjust, 
                    global::System.Nullable<short> Original_FTNGAdjust, 
                    global::System.Nullable<short> Original_OSNGAdjust, 
                    global::System.Nullable<short> Original_MekaNGAdjust, 
                    global::System.Nullable<short> Original_MarkerNGAdjust, 
                    global::System.Nullable<short> Original_TPRecogNGadjust, 
                    string Original_OPJudgement, 
                    string Original_Remark, 
                    global::System.Nullable<short> Original_InputQtyAdjust, 
                    string Original_EmbossTapeNo, 
                    global::System.Nullable<short> Original_MoldRecogNGAdjust, 
                    string Original_TGCondition, 
                    global::System.Nullable<short> Original_HasuuNowAdjust, 
                    string Original_FirstInspTestHead, 
                    string Original_OutsourceLotNo, 
                    string Original_ContainerBoxNo, 
                    global::System.Nullable<float> Original_sumyld) {
            if ((Original_MCNo == null)) {
                throw new global::System.ArgumentNullException("Original_MCNo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_MCNo));
            }
            if ((Original_LotNo == null)) {
                throw new global::System.ArgumentNullException("Original_LotNo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_LotNo));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_LotStartTime));
            if ((Original_MCType == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_MCType));
            }
            if ((Original_OPNo == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_OPNo));
            }
            if ((Original_InputQty.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((short)(Original_InputQty.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_TotalGood.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((short)(Original_TotalGood.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_TotalNG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((short)(Original_TotalNG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_OPRate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((float)(Original_OPRate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_MaximumRPM.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((float)(Original_MaximumRPM.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_AverageRPM.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((float)(Original_AverageRPM.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_MTBF.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((float)(Original_MTBF.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_MTTR.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((float)(Original_MTTR.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_AlarmTotal.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((short)(Original_AlarmTotal.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_LotEndTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((System.DateTime)(Original_LotEndTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_RunTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((float)(Original_RunTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_StopTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((float)(Original_StopTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_AlarmTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((float)(Original_AlarmTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_SelfConVersion == null)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((string)(Original_SelfConVersion));
            }
            if ((Original_NetVersion == null)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((string)(Original_NetVersion));
            }
            if ((Original_TestFlow == null)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((string)(Original_TestFlow));
            }
            if ((Original_LaserMark1 == null)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((string)(Original_LaserMark1));
            }
            if ((Original_LaserMark2 == null)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((string)(Original_LaserMark2));
            }
            if ((Original_LaserMark3 == null)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((string)(Original_LaserMark3));
            }
            if ((Original_OSProgram == null)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((string)(Original_OSProgram));
            }
            if ((Original_FTProgram == null)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((string)(Original_FTProgram));
            }
            if ((Original_TelekoCheck == null)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((string)(Original_TelekoCheck));
            }
            if ((Original_ASICheck == null)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((string)(Original_ASICheck));
            }
            if ((Original_HasuuBefore.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((short)(Original_HasuuBefore.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_HasuuNow.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((short)(Original_HasuuNow.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_FrontNG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[58].Value = ((short)(Original_FrontNG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Original_OS2NG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[60].Value = ((short)(Original_OS2NG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((Original_FrontMarkerNG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[62].Value = ((short)(Original_FrontMarkerNG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_FLMarkerNG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[64].Value = ((short)(Original_FLMarkerNG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((Original_OSTesterNG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[66].Value = ((short)(Original_OSTesterNG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((Original_FTTesterNG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[68].Value = ((short)(Original_FTTesterNG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            if ((Original_MarkingRecogNG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[70].Value = ((short)(Original_MarkingRecogNG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            if ((Original_MoldRecogNG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[72].Value = ((short)(Original_MoldRecogNG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            if ((Original_TPRecogNG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[74].Value = ((short)(Original_TPRecogNG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((Original_MekaNG1.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[76].Value = ((short)(Original_MekaNG1.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((Original_MekaNG2.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[78].Value = ((short)(Original_MekaNG2.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((Original_MekaNG3.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[79].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[80].Value = ((short)(Original_MekaNG3.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[79].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            if ((Original_MekaNG4.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[81].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[82].Value = ((short)(Original_MekaNG4.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[81].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            if ((Original_MekaNG5.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[83].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[84].Value = ((short)(Original_MekaNG5.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[83].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            if ((Original_ActualMekaNG1.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[85].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[86].Value = ((short)(Original_ActualMekaNG1.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[85].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[86].Value = global::System.DBNull.Value;
            }
            if ((Original_ActualMekaNG2.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[87].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[88].Value = ((short)(Original_ActualMekaNG2.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[87].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[88].Value = global::System.DBNull.Value;
            }
            if ((Original_ActualMekaNG3.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[89].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[90].Value = ((short)(Original_ActualMekaNG3.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[89].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[90].Value = global::System.DBNull.Value;
            }
            if ((Original_ActualMekaNG4.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[91].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[92].Value = ((short)(Original_ActualMekaNG4.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[91].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[92].Value = global::System.DBNull.Value;
            }
            if ((Original_ActualMekaNG5.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[93].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[94].Value = ((short)(Original_ActualMekaNG5.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[93].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[94].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChPass1.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[95].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[96].Value = ((short)(Original_OSChPass1.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[95].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[96].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChPass2.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[97].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[98].Value = ((short)(Original_OSChPass2.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[97].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[98].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChPass3.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[99].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[100].Value = ((short)(Original_OSChPass3.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[99].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[100].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChPass4.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[101].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[102].Value = ((short)(Original_OSChPass4.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[101].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[102].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChPass5.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[103].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[104].Value = ((short)(Original_OSChPass5.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[103].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[104].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChPass6.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[105].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[106].Value = ((short)(Original_OSChPass6.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[105].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[106].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChPass7.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[107].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[108].Value = ((short)(Original_OSChPass7.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[107].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[108].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChPass8.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[109].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[110].Value = ((short)(Original_OSChPass8.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[109].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[110].Value = global::System.DBNull.Value;
            }
            if ((Original_OS1ChFail1.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[111].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[112].Value = ((short)(Original_OS1ChFail1.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[111].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[112].Value = global::System.DBNull.Value;
            }
            if ((Original_OS1ChFail2.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[113].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[114].Value = ((short)(Original_OS1ChFail2.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[113].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[114].Value = global::System.DBNull.Value;
            }
            if ((Original_OS1ChFail3.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[115].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[116].Value = ((short)(Original_OS1ChFail3.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[115].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[116].Value = global::System.DBNull.Value;
            }
            if ((Original_OS1ChFail4.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[117].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[118].Value = ((short)(Original_OS1ChFail4.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[117].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[118].Value = global::System.DBNull.Value;
            }
            if ((Original_OS1ChFail5.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[119].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[120].Value = ((short)(Original_OS1ChFail5.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[119].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[120].Value = global::System.DBNull.Value;
            }
            if ((Original_OS1ChFail6.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[121].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[122].Value = ((short)(Original_OS1ChFail6.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[121].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[122].Value = global::System.DBNull.Value;
            }
            if ((Original_OS1ChFail7.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[123].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[124].Value = ((short)(Original_OS1ChFail7.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[123].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[124].Value = global::System.DBNull.Value;
            }
            if ((Original_OS1ChFail8.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[125].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[126].Value = ((short)(Original_OS1ChFail8.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[125].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[126].Value = global::System.DBNull.Value;
            }
            if ((Original_OS2ChFail1.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[127].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[128].Value = ((short)(Original_OS2ChFail1.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[127].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[128].Value = global::System.DBNull.Value;
            }
            if ((Original_OS2ChFail2.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[129].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[130].Value = ((short)(Original_OS2ChFail2.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[129].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[130].Value = global::System.DBNull.Value;
            }
            if ((Original_OS2ChFail3.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[131].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[132].Value = ((short)(Original_OS2ChFail3.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[131].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[132].Value = global::System.DBNull.Value;
            }
            if ((Original_OS2ChFail4.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[133].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[134].Value = ((short)(Original_OS2ChFail4.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[133].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[134].Value = global::System.DBNull.Value;
            }
            if ((Original_OS2ChFail5.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[135].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[136].Value = ((short)(Original_OS2ChFail5.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[135].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[136].Value = global::System.DBNull.Value;
            }
            if ((Original_OS2ChFail6.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[137].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[138].Value = ((short)(Original_OS2ChFail6.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[137].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[138].Value = global::System.DBNull.Value;
            }
            if ((Original_OS2ChFail7.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[139].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[140].Value = ((short)(Original_OS2ChFail7.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[139].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[140].Value = global::System.DBNull.Value;
            }
            if ((Original_OS2ChFail8.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[141].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[142].Value = ((short)(Original_OS2ChFail8.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[141].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[142].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChRetry1.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[143].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[144].Value = ((short)(Original_OSChRetry1.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[143].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[144].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChRetry2.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[145].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[146].Value = ((short)(Original_OSChRetry2.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[145].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[146].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChRetry3.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[147].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[148].Value = ((short)(Original_OSChRetry3.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[147].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[148].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChRetry4.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[149].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[150].Value = ((short)(Original_OSChRetry4.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[149].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[150].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChRetry5.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[151].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[152].Value = ((short)(Original_OSChRetry5.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[151].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[152].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChRetry6.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[153].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[154].Value = ((short)(Original_OSChRetry6.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[153].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[154].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChRetry7.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[155].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[156].Value = ((short)(Original_OSChRetry7.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[155].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[156].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChRetry8.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[157].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[158].Value = ((short)(Original_OSChRetry8.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[157].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[158].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChPass1.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[159].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[160].Value = ((short)(Original_FTChPass1.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[159].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[160].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChPass2.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[161].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[162].Value = ((short)(Original_FTChPass2.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[161].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[162].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChPass3.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[163].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[164].Value = ((short)(Original_FTChPass3.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[163].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[164].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChPass4.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[165].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[166].Value = ((short)(Original_FTChPass4.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[165].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[166].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChPass5.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[167].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[168].Value = ((short)(Original_FTChPass5.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[167].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[168].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChPass6.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[169].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[170].Value = ((short)(Original_FTChPass6.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[169].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[170].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChPass7.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[171].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[172].Value = ((short)(Original_FTChPass7.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[171].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[172].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChPass8.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[173].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[174].Value = ((short)(Original_FTChPass8.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[173].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[174].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChFail1.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[175].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[176].Value = ((short)(Original_FTChFail1.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[175].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[176].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChFail2.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[177].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[178].Value = ((short)(Original_FTChFail2.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[177].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[178].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChFail3.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[179].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[180].Value = ((short)(Original_FTChFail3.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[179].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[180].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChFail4.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[181].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[182].Value = ((short)(Original_FTChFail4.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[181].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[182].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChFail5.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[183].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[184].Value = ((short)(Original_FTChFail5.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[183].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[184].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChFail6.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[185].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[186].Value = ((short)(Original_FTChFail6.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[185].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[186].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChFail7.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[187].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[188].Value = ((short)(Original_FTChFail7.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[187].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[188].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChFail8.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[189].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[190].Value = ((short)(Original_FTChFail8.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[189].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[190].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChRetry1.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[191].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[192].Value = ((short)(Original_FTChRetry1.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[191].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[192].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChRetry2.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[193].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[194].Value = ((short)(Original_FTChRetry2.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[193].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[194].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChRetry3.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[195].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[196].Value = ((short)(Original_FTChRetry3.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[195].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[196].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChRetry4.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[197].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[198].Value = ((short)(Original_FTChRetry4.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[197].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[198].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChRetry5.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[199].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[200].Value = ((short)(Original_FTChRetry5.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[199].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[200].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChRetry6.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[201].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[202].Value = ((short)(Original_FTChRetry6.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[201].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[202].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChRetry7.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[203].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[204].Value = ((short)(Original_FTChRetry7.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[203].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[204].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChRetry8.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[205].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[206].Value = ((short)(Original_FTChRetry8.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[205].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[206].Value = global::System.DBNull.Value;
            }
            if ((Original_WaferLotNo == null)) {
                this.Adapter.DeleteCommand.Parameters[207].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[208].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[207].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[208].Value = ((string)(Original_WaferLotNo));
            }
            if ((Original_TempOSYield.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[209].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[210].Value = ((float)(Original_TempOSYield.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[209].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[210].Value = global::System.DBNull.Value;
            }
            if ((Original_TempFTYield.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[211].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[212].Value = ((float)(Original_TempFTYield.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[211].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[212].Value = global::System.DBNull.Value;
            }
            if ((Original_NomarkCheck == null)) {
                this.Adapter.DeleteCommand.Parameters[213].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[214].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[213].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[214].Value = ((string)(Original_NomarkCheck));
            }
            if ((Original_MCProgramVersion1 == null)) {
                this.Adapter.DeleteCommand.Parameters[215].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[216].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[215].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[216].Value = ((string)(Original_MCProgramVersion1));
            }
            if ((Original_MCProgramVersion2 == null)) {
                this.Adapter.DeleteCommand.Parameters[217].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[218].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[217].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[218].Value = ((string)(Original_MCProgramVersion2));
            }
            if ((Original_MCProgramVersion3 == null)) {
                this.Adapter.DeleteCommand.Parameters[219].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[220].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[219].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[220].Value = ((string)(Original_MCProgramVersion3));
            }
            if ((Original_MCProgramVersion4 == null)) {
                this.Adapter.DeleteCommand.Parameters[221].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[222].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[221].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[222].Value = ((string)(Original_MCProgramVersion4));
            }
            if ((Original_KanagataCheck == null)) {
                this.Adapter.DeleteCommand.Parameters[223].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[224].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[223].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[224].Value = ((string)(Original_KanagataCheck));
            }
            if ((Original_VacuumCheck == null)) {
                this.Adapter.DeleteCommand.Parameters[225].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[226].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[225].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[226].Value = ((string)(Original_VacuumCheck));
            }
            if ((Original_DBNG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[227].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[228].Value = ((short)(Original_DBNG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[227].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[228].Value = global::System.DBNull.Value;
            }
            if ((Original_PNashiNG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[229].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[230].Value = ((short)(Original_PNashiNG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[229].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[230].Value = global::System.DBNull.Value;
            }
            if ((Original_WBNG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[231].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[232].Value = ((short)(Original_WBNG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[231].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[232].Value = global::System.DBNull.Value;
            }
            if ((Original_WBInspectionNG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[233].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[234].Value = ((short)(Original_WBInspectionNG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[233].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[234].Value = global::System.DBNull.Value;
            }
            if ((Original_TurningOnRank == null)) {
                this.Adapter.DeleteCommand.Parameters[235].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[236].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[235].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[236].Value = ((string)(Original_TurningOnRank));
            }
            if ((Original_MissingIC.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[237].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[238].Value = ((short)(Original_MissingIC.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[237].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[238].Value = global::System.DBNull.Value;
            }
            if ((Original_MissingICGL.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[239].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[240].Value = ((bool)(Original_MissingICGL.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[239].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[240].Value = global::System.DBNull.Value;
            }
            if ((Original_FTSampleCheck == null)) {
                this.Adapter.DeleteCommand.Parameters[241].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[242].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[241].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[242].Value = ((string)(Original_FTSampleCheck));
            }
            if ((Original_JigCheck == null)) {
                this.Adapter.DeleteCommand.Parameters[243].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[244].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[243].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[244].Value = ((string)(Original_JigCheck));
            }
            if ((Original_KanaCleanBefore == null)) {
                this.Adapter.DeleteCommand.Parameters[245].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[246].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[245].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[246].Value = ((string)(Original_KanaCleanBefore));
            }
            if ((Original_KanaCleanAfter == null)) {
                this.Adapter.DeleteCommand.Parameters[247].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[248].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[247].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[248].Value = ((string)(Original_KanaCleanAfter));
            }
            if ((Original_NGSampleCheck_Pn.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[249].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[250].Value = ((short)(Original_NGSampleCheck_Pn.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[249].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[250].Value = global::System.DBNull.Value;
            }
            if ((Original_NGSampleCheck_N.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[251].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[252].Value = ((short)(Original_NGSampleCheck_N.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[251].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[252].Value = global::System.DBNull.Value;
            }
            if ((Original_VisualCheckMode == null)) {
                this.Adapter.DeleteCommand.Parameters[253].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[254].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[253].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[254].Value = ((string)(Original_VisualCheckMode));
            }
            if ((Original_VisualCheckAbnormal == null)) {
                this.Adapter.DeleteCommand.Parameters[255].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[256].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[255].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[256].Value = ((string)(Original_VisualCheckAbnormal));
            }
            if ((Original_VisualCheckAdjust == null)) {
                this.Adapter.DeleteCommand.Parameters[257].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[258].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[257].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[258].Value = ((string)(Original_VisualCheckAdjust));
            }
            if ((Original_FirstShotCheckMode == null)) {
                this.Adapter.DeleteCommand.Parameters[259].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[260].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[259].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[260].Value = ((string)(Original_FirstShotCheckMode));
            }
            if ((Original_FirstShotCheckModeAbnormal == null)) {
                this.Adapter.DeleteCommand.Parameters[261].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[262].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[261].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[262].Value = ((string)(Original_FirstShotCheckModeAbnormal));
            }
            if ((Original_FirstShotCheckModeAdjust == null)) {
                this.Adapter.DeleteCommand.Parameters[263].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[264].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[263].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[264].Value = ((string)(Original_FirstShotCheckModeAdjust));
            }
            if ((Original_EmbossTapeChange.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[265].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[266].Value = ((short)(Original_EmbossTapeChange.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[265].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[266].Value = global::System.DBNull.Value;
            }
            if ((Original_CoverTapeChange.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[267].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[268].Value = ((short)(Original_CoverTapeChange.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[267].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[268].Value = global::System.DBNull.Value;
            }
            if ((Original_IronStampCleaning.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[269].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[270].Value = ((short)(Original_IronStampCleaning.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[269].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[270].Value = global::System.DBNull.Value;
            }
            if ((Original_GLCheck == null)) {
                this.Adapter.DeleteCommand.Parameters[271].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[272].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[271].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[272].Value = ((string)(Original_GLCheck));
            }
            if ((Original_LotJudgement == null)) {
                this.Adapter.DeleteCommand.Parameters[273].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[274].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[273].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[274].Value = ((string)(Original_LotJudgement));
            }
            if ((Original_GoodAdjust.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[275].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[276].Value = ((short)(Original_GoodAdjust.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[275].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[276].Value = global::System.DBNull.Value;
            }
            if ((Original_NGAdjust.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[277].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[278].Value = ((short)(Original_NGAdjust.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[277].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[278].Value = global::System.DBNull.Value;
            }
            if ((Original_FTNGAdjust.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[279].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[280].Value = ((short)(Original_FTNGAdjust.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[279].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[280].Value = global::System.DBNull.Value;
            }
            if ((Original_OSNGAdjust.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[281].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[282].Value = ((short)(Original_OSNGAdjust.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[281].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[282].Value = global::System.DBNull.Value;
            }
            if ((Original_MekaNGAdjust.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[283].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[284].Value = ((short)(Original_MekaNGAdjust.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[283].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[284].Value = global::System.DBNull.Value;
            }
            if ((Original_MarkerNGAdjust.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[285].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[286].Value = ((short)(Original_MarkerNGAdjust.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[285].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[286].Value = global::System.DBNull.Value;
            }
            if ((Original_TPRecogNGadjust.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[287].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[288].Value = ((short)(Original_TPRecogNGadjust.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[287].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[288].Value = global::System.DBNull.Value;
            }
            if ((Original_OPJudgement == null)) {
                this.Adapter.DeleteCommand.Parameters[289].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[290].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[289].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[290].Value = ((string)(Original_OPJudgement));
            }
            if ((Original_Remark == null)) {
                this.Adapter.DeleteCommand.Parameters[291].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[292].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[291].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[292].Value = ((string)(Original_Remark));
            }
            if ((Original_InputQtyAdjust.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[293].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[294].Value = ((short)(Original_InputQtyAdjust.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[293].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[294].Value = global::System.DBNull.Value;
            }
            if ((Original_EmbossTapeNo == null)) {
                this.Adapter.DeleteCommand.Parameters[295].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[296].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[295].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[296].Value = ((string)(Original_EmbossTapeNo));
            }
            if ((Original_MoldRecogNGAdjust.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[297].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[298].Value = ((short)(Original_MoldRecogNGAdjust.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[297].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[298].Value = global::System.DBNull.Value;
            }
            if ((Original_TGCondition == null)) {
                this.Adapter.DeleteCommand.Parameters[299].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[300].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[299].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[300].Value = ((string)(Original_TGCondition));
            }
            if ((Original_HasuuNowAdjust.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[301].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[302].Value = ((short)(Original_HasuuNowAdjust.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[301].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[302].Value = global::System.DBNull.Value;
            }
            if ((Original_FirstInspTestHead == null)) {
                this.Adapter.DeleteCommand.Parameters[303].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[304].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[303].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[304].Value = ((string)(Original_FirstInspTestHead));
            }
            if ((Original_OutsourceLotNo == null)) {
                this.Adapter.DeleteCommand.Parameters[305].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[306].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[305].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[306].Value = ((string)(Original_OutsourceLotNo));
            }
            if ((Original_ContainerBoxNo == null)) {
                this.Adapter.DeleteCommand.Parameters[307].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[308].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[307].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[308].Value = ((string)(Original_ContainerBoxNo));
            }
            if ((Original_sumyld.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[309].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[310].Value = ((float)(Original_sumyld.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[309].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[310].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string MCNo, 
                    string LotNo, 
                    System.DateTime LotStartTime, 
                    string MCType, 
                    string OPNo, 
                    global::System.Nullable<short> InputQty, 
                    global::System.Nullable<short> TotalGood, 
                    global::System.Nullable<short> TotalNG, 
                    global::System.Nullable<float> OPRate, 
                    global::System.Nullable<float> MaximumRPM, 
                    global::System.Nullable<float> AverageRPM, 
                    global::System.Nullable<float> MTBF, 
                    global::System.Nullable<float> MTTR, 
                    global::System.Nullable<short> AlarmTotal, 
                    global::System.Nullable<global::System.DateTime> LotEndTime, 
                    global::System.Nullable<float> RunTime, 
                    global::System.Nullable<float> StopTime, 
                    global::System.Nullable<float> AlarmTime, 
                    string SelfConVersion, 
                    string NetVersion, 
                    string TestFlow, 
                    string LaserMark1, 
                    string LaserMark2, 
                    string LaserMark3, 
                    string OSProgram, 
                    string FTProgram, 
                    string TelekoCheck, 
                    string ASICheck, 
                    global::System.Nullable<short> HasuuBefore, 
                    global::System.Nullable<short> HasuuNow, 
                    global::System.Nullable<short> FrontNG, 
                    global::System.Nullable<short> OS2NG, 
                    global::System.Nullable<short> FrontMarkerNG, 
                    global::System.Nullable<short> FLMarkerNG, 
                    global::System.Nullable<short> OSTesterNG, 
                    global::System.Nullable<short> FTTesterNG, 
                    global::System.Nullable<short> MarkingRecogNG, 
                    global::System.Nullable<short> MoldRecogNG, 
                    global::System.Nullable<short> TPRecogNG, 
                    global::System.Nullable<short> MekaNG1, 
                    global::System.Nullable<short> MekaNG2, 
                    global::System.Nullable<short> MekaNG3, 
                    global::System.Nullable<short> MekaNG4, 
                    global::System.Nullable<short> MekaNG5, 
                    global::System.Nullable<short> ActualMekaNG1, 
                    global::System.Nullable<short> ActualMekaNG2, 
                    global::System.Nullable<short> ActualMekaNG3, 
                    global::System.Nullable<short> ActualMekaNG4, 
                    global::System.Nullable<short> ActualMekaNG5, 
                    global::System.Nullable<short> OSChPass1, 
                    global::System.Nullable<short> OSChPass2, 
                    global::System.Nullable<short> OSChPass3, 
                    global::System.Nullable<short> OSChPass4, 
                    global::System.Nullable<short> OSChPass5, 
                    global::System.Nullable<short> OSChPass6, 
                    global::System.Nullable<short> OSChPass7, 
                    global::System.Nullable<short> OSChPass8, 
                    global::System.Nullable<short> OS1ChFail1, 
                    global::System.Nullable<short> OS1ChFail2, 
                    global::System.Nullable<short> OS1ChFail3, 
                    global::System.Nullable<short> OS1ChFail4, 
                    global::System.Nullable<short> OS1ChFail5, 
                    global::System.Nullable<short> OS1ChFail6, 
                    global::System.Nullable<short> OS1ChFail7, 
                    global::System.Nullable<short> OS1ChFail8, 
                    global::System.Nullable<short> OS2ChFail1, 
                    global::System.Nullable<short> OS2ChFail2, 
                    global::System.Nullable<short> OS2ChFail3, 
                    global::System.Nullable<short> OS2ChFail4, 
                    global::System.Nullable<short> OS2ChFail5, 
                    global::System.Nullable<short> OS2ChFail6, 
                    global::System.Nullable<short> OS2ChFail7, 
                    global::System.Nullable<short> OS2ChFail8, 
                    global::System.Nullable<short> OSChRetry1, 
                    global::System.Nullable<short> OSChRetry2, 
                    global::System.Nullable<short> OSChRetry3, 
                    global::System.Nullable<short> OSChRetry4, 
                    global::System.Nullable<short> OSChRetry5, 
                    global::System.Nullable<short> OSChRetry6, 
                    global::System.Nullable<short> OSChRetry7, 
                    global::System.Nullable<short> OSChRetry8, 
                    global::System.Nullable<short> FTChPass1, 
                    global::System.Nullable<short> FTChPass2, 
                    global::System.Nullable<short> FTChPass3, 
                    global::System.Nullable<short> FTChPass4, 
                    global::System.Nullable<short> FTChPass5, 
                    global::System.Nullable<short> FTChPass6, 
                    global::System.Nullable<short> FTChPass7, 
                    global::System.Nullable<short> FTChPass8, 
                    global::System.Nullable<short> FTChFail1, 
                    global::System.Nullable<short> FTChFail2, 
                    global::System.Nullable<short> FTChFail3, 
                    global::System.Nullable<short> FTChFail4, 
                    global::System.Nullable<short> FTChFail5, 
                    global::System.Nullable<short> FTChFail6, 
                    global::System.Nullable<short> FTChFail7, 
                    global::System.Nullable<short> FTChFail8, 
                    global::System.Nullable<short> FTChRetry1, 
                    global::System.Nullable<short> FTChRetry2, 
                    global::System.Nullable<short> FTChRetry3, 
                    global::System.Nullable<short> FTChRetry4, 
                    global::System.Nullable<short> FTChRetry5, 
                    global::System.Nullable<short> FTChRetry6, 
                    global::System.Nullable<short> FTChRetry7, 
                    global::System.Nullable<short> FTChRetry8, 
                    string WaferLotNo, 
                    global::System.Nullable<float> TempOSYield, 
                    global::System.Nullable<float> TempFTYield, 
                    string NomarkCheck, 
                    string MCProgramVersion1, 
                    string MCProgramVersion2, 
                    string MCProgramVersion3, 
                    string MCProgramVersion4, 
                    string KanagataCheck, 
                    string VacuumCheck, 
                    global::System.Nullable<short> DBNG, 
                    global::System.Nullable<short> PNashiNG, 
                    global::System.Nullable<short> WBNG, 
                    global::System.Nullable<short> WBInspectionNG, 
                    string TurningOnRank, 
                    global::System.Nullable<short> MissingIC, 
                    global::System.Nullable<bool> MissingICGL, 
                    string FTSampleCheck, 
                    string JigCheck, 
                    string KanaCleanBefore, 
                    string KanaCleanAfter, 
                    global::System.Nullable<short> NGSampleCheck_Pn, 
                    global::System.Nullable<short> NGSampleCheck_N, 
                    string VisualCheckMode, 
                    string VisualCheckAbnormal, 
                    string VisualCheckAdjust, 
                    string FirstShotCheckMode, 
                    string FirstShotCheckModeAbnormal, 
                    string FirstShotCheckModeAdjust, 
                    global::System.Nullable<short> EmbossTapeChange, 
                    global::System.Nullable<short> CoverTapeChange, 
                    global::System.Nullable<short> IronStampCleaning, 
                    string GLCheck, 
                    string LotJudgement, 
                    global::System.Nullable<short> GoodAdjust, 
                    global::System.Nullable<short> NGAdjust, 
                    global::System.Nullable<short> FTNGAdjust, 
                    global::System.Nullable<short> OSNGAdjust, 
                    global::System.Nullable<short> MekaNGAdjust, 
                    global::System.Nullable<short> MarkerNGAdjust, 
                    global::System.Nullable<short> TPRecogNGadjust, 
                    string OPJudgement, 
                    string Remark, 
                    global::System.Nullable<short> InputQtyAdjust, 
                    string EmbossTapeNo, 
                    global::System.Nullable<short> MoldRecogNGAdjust, 
                    string TGCondition, 
                    global::System.Nullable<short> HasuuNowAdjust, 
                    string FirstInspTestHead, 
                    string OutsourceLotNo, 
                    string ContainerBoxNo, 
                    global::System.Nullable<float> sumyld) {
            if ((MCNo == null)) {
                throw new global::System.ArgumentNullException("MCNo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(MCNo));
            }
            if ((LotNo == null)) {
                throw new global::System.ArgumentNullException("LotNo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(LotNo));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(LotStartTime));
            if ((MCType == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(MCType));
            }
            if ((OPNo == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(OPNo));
            }
            if ((InputQty.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((short)(InputQty.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((TotalGood.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((short)(TotalGood.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((TotalNG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((short)(TotalNG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((OPRate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((float)(OPRate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((MaximumRPM.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((float)(MaximumRPM.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((AverageRPM.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((float)(AverageRPM.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((MTBF.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((float)(MTBF.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((MTTR.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((float)(MTTR.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((AlarmTotal.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((short)(AlarmTotal.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((LotEndTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((System.DateTime)(LotEndTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((RunTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((float)(RunTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((StopTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((float)(StopTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((AlarmTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((float)(AlarmTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((SelfConVersion == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(SelfConVersion));
            }
            if ((NetVersion == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(NetVersion));
            }
            if ((TestFlow == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(TestFlow));
            }
            if ((LaserMark1 == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(LaserMark1));
            }
            if ((LaserMark2 == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(LaserMark2));
            }
            if ((LaserMark3 == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(LaserMark3));
            }
            if ((OSProgram == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(OSProgram));
            }
            if ((FTProgram == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(FTProgram));
            }
            if ((TelekoCheck == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(TelekoCheck));
            }
            if ((ASICheck == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(ASICheck));
            }
            if ((HasuuBefore.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[28].Value = ((short)(HasuuBefore.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((HasuuNow.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((short)(HasuuNow.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((FrontNG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((short)(FrontNG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((OS2NG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((short)(OS2NG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((FrontMarkerNG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((short)(FrontMarkerNG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((FLMarkerNG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((short)(FLMarkerNG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((OSTesterNG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[34].Value = ((short)(OSTesterNG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((FTTesterNG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[35].Value = ((short)(FTTesterNG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((MarkingRecogNG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[36].Value = ((short)(MarkingRecogNG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((MoldRecogNG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[37].Value = ((short)(MoldRecogNG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((TPRecogNG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[38].Value = ((short)(TPRecogNG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((MekaNG1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[39].Value = ((short)(MekaNG1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((MekaNG2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[40].Value = ((short)(MekaNG2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((MekaNG3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[41].Value = ((short)(MekaNG3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((MekaNG4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[42].Value = ((short)(MekaNG4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((MekaNG5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[43].Value = ((short)(MekaNG5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((ActualMekaNG1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[44].Value = ((short)(ActualMekaNG1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((ActualMekaNG2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[45].Value = ((short)(ActualMekaNG2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((ActualMekaNG3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[46].Value = ((short)(ActualMekaNG3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((ActualMekaNG4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[47].Value = ((short)(ActualMekaNG4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((ActualMekaNG5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[48].Value = ((short)(ActualMekaNG5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((OSChPass1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[49].Value = ((short)(OSChPass1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((OSChPass2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[50].Value = ((short)(OSChPass2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((OSChPass3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[51].Value = ((short)(OSChPass3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((OSChPass4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[52].Value = ((short)(OSChPass4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((OSChPass5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[53].Value = ((short)(OSChPass5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((OSChPass6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[54].Value = ((short)(OSChPass6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((OSChPass7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[55].Value = ((short)(OSChPass7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((OSChPass8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[56].Value = ((short)(OSChPass8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((OS1ChFail1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[57].Value = ((short)(OS1ChFail1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((OS1ChFail2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[58].Value = ((short)(OS1ChFail2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((OS1ChFail3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[59].Value = ((short)(OS1ChFail3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            if ((OS1ChFail4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[60].Value = ((short)(OS1ChFail4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((OS1ChFail5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[61].Value = ((short)(OS1ChFail5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            if ((OS1ChFail6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[62].Value = ((short)(OS1ChFail6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((OS1ChFail7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[63].Value = ((short)(OS1ChFail7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            if ((OS1ChFail8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[64].Value = ((short)(OS1ChFail8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((OS2ChFail1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[65].Value = ((short)(OS2ChFail1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            if ((OS2ChFail2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[66].Value = ((short)(OS2ChFail2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((OS2ChFail3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[67].Value = ((short)(OS2ChFail3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            if ((OS2ChFail4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[68].Value = ((short)(OS2ChFail4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            if ((OS2ChFail5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[69].Value = ((short)(OS2ChFail5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            if ((OS2ChFail6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[70].Value = ((short)(OS2ChFail6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            if ((OS2ChFail7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[71].Value = ((short)(OS2ChFail7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            if ((OS2ChFail8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[72].Value = ((short)(OS2ChFail8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            if ((OSChRetry1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[73].Value = ((short)(OSChRetry1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            if ((OSChRetry2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[74].Value = ((short)(OSChRetry2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((OSChRetry3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[75].Value = ((short)(OSChRetry3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            if ((OSChRetry4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[76].Value = ((short)(OSChRetry4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((OSChRetry5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[77].Value = ((short)(OSChRetry5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            if ((OSChRetry6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[78].Value = ((short)(OSChRetry6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((OSChRetry7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[79].Value = ((short)(OSChRetry7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            if ((OSChRetry8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[80].Value = ((short)(OSChRetry8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            if ((FTChPass1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[81].Value = ((short)(FTChPass1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            if ((FTChPass2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[82].Value = ((short)(FTChPass2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            if ((FTChPass3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[83].Value = ((short)(FTChPass3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[83].Value = global::System.DBNull.Value;
            }
            if ((FTChPass4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[84].Value = ((short)(FTChPass4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            if ((FTChPass5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[85].Value = ((short)(FTChPass5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[85].Value = global::System.DBNull.Value;
            }
            if ((FTChPass6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[86].Value = ((short)(FTChPass6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[86].Value = global::System.DBNull.Value;
            }
            if ((FTChPass7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[87].Value = ((short)(FTChPass7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[87].Value = global::System.DBNull.Value;
            }
            if ((FTChPass8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[88].Value = ((short)(FTChPass8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[88].Value = global::System.DBNull.Value;
            }
            if ((FTChFail1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[89].Value = ((short)(FTChFail1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[89].Value = global::System.DBNull.Value;
            }
            if ((FTChFail2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[90].Value = ((short)(FTChFail2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[90].Value = global::System.DBNull.Value;
            }
            if ((FTChFail3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[91].Value = ((short)(FTChFail3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[91].Value = global::System.DBNull.Value;
            }
            if ((FTChFail4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[92].Value = ((short)(FTChFail4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[92].Value = global::System.DBNull.Value;
            }
            if ((FTChFail5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[93].Value = ((short)(FTChFail5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[93].Value = global::System.DBNull.Value;
            }
            if ((FTChFail6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[94].Value = ((short)(FTChFail6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[94].Value = global::System.DBNull.Value;
            }
            if ((FTChFail7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[95].Value = ((short)(FTChFail7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[95].Value = global::System.DBNull.Value;
            }
            if ((FTChFail8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[96].Value = ((short)(FTChFail8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[96].Value = global::System.DBNull.Value;
            }
            if ((FTChRetry1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[97].Value = ((short)(FTChRetry1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[97].Value = global::System.DBNull.Value;
            }
            if ((FTChRetry2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[98].Value = ((short)(FTChRetry2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[98].Value = global::System.DBNull.Value;
            }
            if ((FTChRetry3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[99].Value = ((short)(FTChRetry3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[99].Value = global::System.DBNull.Value;
            }
            if ((FTChRetry4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[100].Value = ((short)(FTChRetry4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[100].Value = global::System.DBNull.Value;
            }
            if ((FTChRetry5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[101].Value = ((short)(FTChRetry5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[101].Value = global::System.DBNull.Value;
            }
            if ((FTChRetry6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[102].Value = ((short)(FTChRetry6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[102].Value = global::System.DBNull.Value;
            }
            if ((FTChRetry7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[103].Value = ((short)(FTChRetry7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[103].Value = global::System.DBNull.Value;
            }
            if ((FTChRetry8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[104].Value = ((short)(FTChRetry8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[104].Value = global::System.DBNull.Value;
            }
            if ((WaferLotNo == null)) {
                this.Adapter.InsertCommand.Parameters[105].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[105].Value = ((string)(WaferLotNo));
            }
            if ((TempOSYield.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[106].Value = ((float)(TempOSYield.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[106].Value = global::System.DBNull.Value;
            }
            if ((TempFTYield.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[107].Value = ((float)(TempFTYield.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[107].Value = global::System.DBNull.Value;
            }
            if ((NomarkCheck == null)) {
                this.Adapter.InsertCommand.Parameters[108].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[108].Value = ((string)(NomarkCheck));
            }
            if ((MCProgramVersion1 == null)) {
                this.Adapter.InsertCommand.Parameters[109].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[109].Value = ((string)(MCProgramVersion1));
            }
            if ((MCProgramVersion2 == null)) {
                this.Adapter.InsertCommand.Parameters[110].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[110].Value = ((string)(MCProgramVersion2));
            }
            if ((MCProgramVersion3 == null)) {
                this.Adapter.InsertCommand.Parameters[111].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[111].Value = ((string)(MCProgramVersion3));
            }
            if ((MCProgramVersion4 == null)) {
                this.Adapter.InsertCommand.Parameters[112].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[112].Value = ((string)(MCProgramVersion4));
            }
            if ((KanagataCheck == null)) {
                this.Adapter.InsertCommand.Parameters[113].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[113].Value = ((string)(KanagataCheck));
            }
            if ((VacuumCheck == null)) {
                this.Adapter.InsertCommand.Parameters[114].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[114].Value = ((string)(VacuumCheck));
            }
            if ((DBNG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[115].Value = ((short)(DBNG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[115].Value = global::System.DBNull.Value;
            }
            if ((PNashiNG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[116].Value = ((short)(PNashiNG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[116].Value = global::System.DBNull.Value;
            }
            if ((WBNG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[117].Value = ((short)(WBNG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[117].Value = global::System.DBNull.Value;
            }
            if ((WBInspectionNG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[118].Value = ((short)(WBInspectionNG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[118].Value = global::System.DBNull.Value;
            }
            if ((TurningOnRank == null)) {
                this.Adapter.InsertCommand.Parameters[119].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[119].Value = ((string)(TurningOnRank));
            }
            if ((MissingIC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[120].Value = ((short)(MissingIC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[120].Value = global::System.DBNull.Value;
            }
            if ((MissingICGL.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[121].Value = ((bool)(MissingICGL.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[121].Value = global::System.DBNull.Value;
            }
            if ((FTSampleCheck == null)) {
                this.Adapter.InsertCommand.Parameters[122].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[122].Value = ((string)(FTSampleCheck));
            }
            if ((JigCheck == null)) {
                this.Adapter.InsertCommand.Parameters[123].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[123].Value = ((string)(JigCheck));
            }
            if ((KanaCleanBefore == null)) {
                this.Adapter.InsertCommand.Parameters[124].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[124].Value = ((string)(KanaCleanBefore));
            }
            if ((KanaCleanAfter == null)) {
                this.Adapter.InsertCommand.Parameters[125].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[125].Value = ((string)(KanaCleanAfter));
            }
            if ((NGSampleCheck_Pn.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[126].Value = ((short)(NGSampleCheck_Pn.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[126].Value = global::System.DBNull.Value;
            }
            if ((NGSampleCheck_N.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[127].Value = ((short)(NGSampleCheck_N.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[127].Value = global::System.DBNull.Value;
            }
            if ((VisualCheckMode == null)) {
                this.Adapter.InsertCommand.Parameters[128].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[128].Value = ((string)(VisualCheckMode));
            }
            if ((VisualCheckAbnormal == null)) {
                this.Adapter.InsertCommand.Parameters[129].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[129].Value = ((string)(VisualCheckAbnormal));
            }
            if ((VisualCheckAdjust == null)) {
                this.Adapter.InsertCommand.Parameters[130].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[130].Value = ((string)(VisualCheckAdjust));
            }
            if ((FirstShotCheckMode == null)) {
                this.Adapter.InsertCommand.Parameters[131].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[131].Value = ((string)(FirstShotCheckMode));
            }
            if ((FirstShotCheckModeAbnormal == null)) {
                this.Adapter.InsertCommand.Parameters[132].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[132].Value = ((string)(FirstShotCheckModeAbnormal));
            }
            if ((FirstShotCheckModeAdjust == null)) {
                this.Adapter.InsertCommand.Parameters[133].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[133].Value = ((string)(FirstShotCheckModeAdjust));
            }
            if ((EmbossTapeChange.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[134].Value = ((short)(EmbossTapeChange.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[134].Value = global::System.DBNull.Value;
            }
            if ((CoverTapeChange.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[135].Value = ((short)(CoverTapeChange.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[135].Value = global::System.DBNull.Value;
            }
            if ((IronStampCleaning.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[136].Value = ((short)(IronStampCleaning.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[136].Value = global::System.DBNull.Value;
            }
            if ((GLCheck == null)) {
                this.Adapter.InsertCommand.Parameters[137].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[137].Value = ((string)(GLCheck));
            }
            if ((LotJudgement == null)) {
                this.Adapter.InsertCommand.Parameters[138].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[138].Value = ((string)(LotJudgement));
            }
            if ((GoodAdjust.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[139].Value = ((short)(GoodAdjust.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[139].Value = global::System.DBNull.Value;
            }
            if ((NGAdjust.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[140].Value = ((short)(NGAdjust.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[140].Value = global::System.DBNull.Value;
            }
            if ((FTNGAdjust.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[141].Value = ((short)(FTNGAdjust.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[141].Value = global::System.DBNull.Value;
            }
            if ((OSNGAdjust.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[142].Value = ((short)(OSNGAdjust.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[142].Value = global::System.DBNull.Value;
            }
            if ((MekaNGAdjust.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[143].Value = ((short)(MekaNGAdjust.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[143].Value = global::System.DBNull.Value;
            }
            if ((MarkerNGAdjust.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[144].Value = ((short)(MarkerNGAdjust.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[144].Value = global::System.DBNull.Value;
            }
            if ((TPRecogNGadjust.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[145].Value = ((short)(TPRecogNGadjust.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[145].Value = global::System.DBNull.Value;
            }
            if ((OPJudgement == null)) {
                this.Adapter.InsertCommand.Parameters[146].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[146].Value = ((string)(OPJudgement));
            }
            if ((Remark == null)) {
                this.Adapter.InsertCommand.Parameters[147].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[147].Value = ((string)(Remark));
            }
            if ((InputQtyAdjust.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[148].Value = ((short)(InputQtyAdjust.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[148].Value = global::System.DBNull.Value;
            }
            if ((EmbossTapeNo == null)) {
                this.Adapter.InsertCommand.Parameters[149].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[149].Value = ((string)(EmbossTapeNo));
            }
            if ((MoldRecogNGAdjust.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[150].Value = ((short)(MoldRecogNGAdjust.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[150].Value = global::System.DBNull.Value;
            }
            if ((TGCondition == null)) {
                this.Adapter.InsertCommand.Parameters[151].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[151].Value = ((string)(TGCondition));
            }
            if ((HasuuNowAdjust.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[152].Value = ((short)(HasuuNowAdjust.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[152].Value = global::System.DBNull.Value;
            }
            if ((FirstInspTestHead == null)) {
                this.Adapter.InsertCommand.Parameters[153].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[153].Value = ((string)(FirstInspTestHead));
            }
            if ((OutsourceLotNo == null)) {
                this.Adapter.InsertCommand.Parameters[154].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[154].Value = ((string)(OutsourceLotNo));
            }
            if ((ContainerBoxNo == null)) {
                this.Adapter.InsertCommand.Parameters[155].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[155].Value = ((string)(ContainerBoxNo));
            }
            if ((sumyld.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[156].Value = ((float)(sumyld.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[156].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string MCNo, 
                    string LotNo, 
                    System.DateTime LotStartTime, 
                    string MCType, 
                    string OPNo, 
                    global::System.Nullable<short> InputQty, 
                    global::System.Nullable<short> TotalGood, 
                    global::System.Nullable<short> TotalNG, 
                    global::System.Nullable<float> OPRate, 
                    global::System.Nullable<float> MaximumRPM, 
                    global::System.Nullable<float> AverageRPM, 
                    global::System.Nullable<float> MTBF, 
                    global::System.Nullable<float> MTTR, 
                    global::System.Nullable<short> AlarmTotal, 
                    global::System.Nullable<global::System.DateTime> LotEndTime, 
                    global::System.Nullable<float> RunTime, 
                    global::System.Nullable<float> StopTime, 
                    global::System.Nullable<float> AlarmTime, 
                    string SelfConVersion, 
                    string NetVersion, 
                    string TestFlow, 
                    string LaserMark1, 
                    string LaserMark2, 
                    string LaserMark3, 
                    string OSProgram, 
                    string FTProgram, 
                    string TelekoCheck, 
                    string ASICheck, 
                    global::System.Nullable<short> HasuuBefore, 
                    global::System.Nullable<short> HasuuNow, 
                    global::System.Nullable<short> FrontNG, 
                    global::System.Nullable<short> OS2NG, 
                    global::System.Nullable<short> FrontMarkerNG, 
                    global::System.Nullable<short> FLMarkerNG, 
                    global::System.Nullable<short> OSTesterNG, 
                    global::System.Nullable<short> FTTesterNG, 
                    global::System.Nullable<short> MarkingRecogNG, 
                    global::System.Nullable<short> MoldRecogNG, 
                    global::System.Nullable<short> TPRecogNG, 
                    global::System.Nullable<short> MekaNG1, 
                    global::System.Nullable<short> MekaNG2, 
                    global::System.Nullable<short> MekaNG3, 
                    global::System.Nullable<short> MekaNG4, 
                    global::System.Nullable<short> MekaNG5, 
                    global::System.Nullable<short> ActualMekaNG1, 
                    global::System.Nullable<short> ActualMekaNG2, 
                    global::System.Nullable<short> ActualMekaNG3, 
                    global::System.Nullable<short> ActualMekaNG4, 
                    global::System.Nullable<short> ActualMekaNG5, 
                    global::System.Nullable<short> OSChPass1, 
                    global::System.Nullable<short> OSChPass2, 
                    global::System.Nullable<short> OSChPass3, 
                    global::System.Nullable<short> OSChPass4, 
                    global::System.Nullable<short> OSChPass5, 
                    global::System.Nullable<short> OSChPass6, 
                    global::System.Nullable<short> OSChPass7, 
                    global::System.Nullable<short> OSChPass8, 
                    global::System.Nullable<short> OS1ChFail1, 
                    global::System.Nullable<short> OS1ChFail2, 
                    global::System.Nullable<short> OS1ChFail3, 
                    global::System.Nullable<short> OS1ChFail4, 
                    global::System.Nullable<short> OS1ChFail5, 
                    global::System.Nullable<short> OS1ChFail6, 
                    global::System.Nullable<short> OS1ChFail7, 
                    global::System.Nullable<short> OS1ChFail8, 
                    global::System.Nullable<short> OS2ChFail1, 
                    global::System.Nullable<short> OS2ChFail2, 
                    global::System.Nullable<short> OS2ChFail3, 
                    global::System.Nullable<short> OS2ChFail4, 
                    global::System.Nullable<short> OS2ChFail5, 
                    global::System.Nullable<short> OS2ChFail6, 
                    global::System.Nullable<short> OS2ChFail7, 
                    global::System.Nullable<short> OS2ChFail8, 
                    global::System.Nullable<short> OSChRetry1, 
                    global::System.Nullable<short> OSChRetry2, 
                    global::System.Nullable<short> OSChRetry3, 
                    global::System.Nullable<short> OSChRetry4, 
                    global::System.Nullable<short> OSChRetry5, 
                    global::System.Nullable<short> OSChRetry6, 
                    global::System.Nullable<short> OSChRetry7, 
                    global::System.Nullable<short> OSChRetry8, 
                    global::System.Nullable<short> FTChPass1, 
                    global::System.Nullable<short> FTChPass2, 
                    global::System.Nullable<short> FTChPass3, 
                    global::System.Nullable<short> FTChPass4, 
                    global::System.Nullable<short> FTChPass5, 
                    global::System.Nullable<short> FTChPass6, 
                    global::System.Nullable<short> FTChPass7, 
                    global::System.Nullable<short> FTChPass8, 
                    global::System.Nullable<short> FTChFail1, 
                    global::System.Nullable<short> FTChFail2, 
                    global::System.Nullable<short> FTChFail3, 
                    global::System.Nullable<short> FTChFail4, 
                    global::System.Nullable<short> FTChFail5, 
                    global::System.Nullable<short> FTChFail6, 
                    global::System.Nullable<short> FTChFail7, 
                    global::System.Nullable<short> FTChFail8, 
                    global::System.Nullable<short> FTChRetry1, 
                    global::System.Nullable<short> FTChRetry2, 
                    global::System.Nullable<short> FTChRetry3, 
                    global::System.Nullable<short> FTChRetry4, 
                    global::System.Nullable<short> FTChRetry5, 
                    global::System.Nullable<short> FTChRetry6, 
                    global::System.Nullable<short> FTChRetry7, 
                    global::System.Nullable<short> FTChRetry8, 
                    string WaferLotNo, 
                    global::System.Nullable<float> TempOSYield, 
                    global::System.Nullable<float> TempFTYield, 
                    string NomarkCheck, 
                    string MCProgramVersion1, 
                    string MCProgramVersion2, 
                    string MCProgramVersion3, 
                    string MCProgramVersion4, 
                    string KanagataCheck, 
                    string VacuumCheck, 
                    global::System.Nullable<short> DBNG, 
                    global::System.Nullable<short> PNashiNG, 
                    global::System.Nullable<short> WBNG, 
                    global::System.Nullable<short> WBInspectionNG, 
                    string TurningOnRank, 
                    global::System.Nullable<short> MissingIC, 
                    global::System.Nullable<bool> MissingICGL, 
                    string FTSampleCheck, 
                    string JigCheck, 
                    string KanaCleanBefore, 
                    string KanaCleanAfter, 
                    global::System.Nullable<short> NGSampleCheck_Pn, 
                    global::System.Nullable<short> NGSampleCheck_N, 
                    string VisualCheckMode, 
                    string VisualCheckAbnormal, 
                    string VisualCheckAdjust, 
                    string FirstShotCheckMode, 
                    string FirstShotCheckModeAbnormal, 
                    string FirstShotCheckModeAdjust, 
                    global::System.Nullable<short> EmbossTapeChange, 
                    global::System.Nullable<short> CoverTapeChange, 
                    global::System.Nullable<short> IronStampCleaning, 
                    string GLCheck, 
                    string LotJudgement, 
                    global::System.Nullable<short> GoodAdjust, 
                    global::System.Nullable<short> NGAdjust, 
                    global::System.Nullable<short> FTNGAdjust, 
                    global::System.Nullable<short> OSNGAdjust, 
                    global::System.Nullable<short> MekaNGAdjust, 
                    global::System.Nullable<short> MarkerNGAdjust, 
                    global::System.Nullable<short> TPRecogNGadjust, 
                    string OPJudgement, 
                    string Remark, 
                    global::System.Nullable<short> InputQtyAdjust, 
                    string EmbossTapeNo, 
                    global::System.Nullable<short> MoldRecogNGAdjust, 
                    string TGCondition, 
                    global::System.Nullable<short> HasuuNowAdjust, 
                    string FirstInspTestHead, 
                    string OutsourceLotNo, 
                    string ContainerBoxNo, 
                    global::System.Nullable<float> sumyld, 
                    string Original_MCNo, 
                    string Original_LotNo, 
                    System.DateTime Original_LotStartTime, 
                    string Original_MCType, 
                    string Original_OPNo, 
                    global::System.Nullable<short> Original_InputQty, 
                    global::System.Nullable<short> Original_TotalGood, 
                    global::System.Nullable<short> Original_TotalNG, 
                    global::System.Nullable<float> Original_OPRate, 
                    global::System.Nullable<float> Original_MaximumRPM, 
                    global::System.Nullable<float> Original_AverageRPM, 
                    global::System.Nullable<float> Original_MTBF, 
                    global::System.Nullable<float> Original_MTTR, 
                    global::System.Nullable<short> Original_AlarmTotal, 
                    global::System.Nullable<global::System.DateTime> Original_LotEndTime, 
                    global::System.Nullable<float> Original_RunTime, 
                    global::System.Nullable<float> Original_StopTime, 
                    global::System.Nullable<float> Original_AlarmTime, 
                    string Original_SelfConVersion, 
                    string Original_NetVersion, 
                    string Original_TestFlow, 
                    string Original_LaserMark1, 
                    string Original_LaserMark2, 
                    string Original_LaserMark3, 
                    string Original_OSProgram, 
                    string Original_FTProgram, 
                    string Original_TelekoCheck, 
                    string Original_ASICheck, 
                    global::System.Nullable<short> Original_HasuuBefore, 
                    global::System.Nullable<short> Original_HasuuNow, 
                    global::System.Nullable<short> Original_FrontNG, 
                    global::System.Nullable<short> Original_OS2NG, 
                    global::System.Nullable<short> Original_FrontMarkerNG, 
                    global::System.Nullable<short> Original_FLMarkerNG, 
                    global::System.Nullable<short> Original_OSTesterNG, 
                    global::System.Nullable<short> Original_FTTesterNG, 
                    global::System.Nullable<short> Original_MarkingRecogNG, 
                    global::System.Nullable<short> Original_MoldRecogNG, 
                    global::System.Nullable<short> Original_TPRecogNG, 
                    global::System.Nullable<short> Original_MekaNG1, 
                    global::System.Nullable<short> Original_MekaNG2, 
                    global::System.Nullable<short> Original_MekaNG3, 
                    global::System.Nullable<short> Original_MekaNG4, 
                    global::System.Nullable<short> Original_MekaNG5, 
                    global::System.Nullable<short> Original_ActualMekaNG1, 
                    global::System.Nullable<short> Original_ActualMekaNG2, 
                    global::System.Nullable<short> Original_ActualMekaNG3, 
                    global::System.Nullable<short> Original_ActualMekaNG4, 
                    global::System.Nullable<short> Original_ActualMekaNG5, 
                    global::System.Nullable<short> Original_OSChPass1, 
                    global::System.Nullable<short> Original_OSChPass2, 
                    global::System.Nullable<short> Original_OSChPass3, 
                    global::System.Nullable<short> Original_OSChPass4, 
                    global::System.Nullable<short> Original_OSChPass5, 
                    global::System.Nullable<short> Original_OSChPass6, 
                    global::System.Nullable<short> Original_OSChPass7, 
                    global::System.Nullable<short> Original_OSChPass8, 
                    global::System.Nullable<short> Original_OS1ChFail1, 
                    global::System.Nullable<short> Original_OS1ChFail2, 
                    global::System.Nullable<short> Original_OS1ChFail3, 
                    global::System.Nullable<short> Original_OS1ChFail4, 
                    global::System.Nullable<short> Original_OS1ChFail5, 
                    global::System.Nullable<short> Original_OS1ChFail6, 
                    global::System.Nullable<short> Original_OS1ChFail7, 
                    global::System.Nullable<short> Original_OS1ChFail8, 
                    global::System.Nullable<short> Original_OS2ChFail1, 
                    global::System.Nullable<short> Original_OS2ChFail2, 
                    global::System.Nullable<short> Original_OS2ChFail3, 
                    global::System.Nullable<short> Original_OS2ChFail4, 
                    global::System.Nullable<short> Original_OS2ChFail5, 
                    global::System.Nullable<short> Original_OS2ChFail6, 
                    global::System.Nullable<short> Original_OS2ChFail7, 
                    global::System.Nullable<short> Original_OS2ChFail8, 
                    global::System.Nullable<short> Original_OSChRetry1, 
                    global::System.Nullable<short> Original_OSChRetry2, 
                    global::System.Nullable<short> Original_OSChRetry3, 
                    global::System.Nullable<short> Original_OSChRetry4, 
                    global::System.Nullable<short> Original_OSChRetry5, 
                    global::System.Nullable<short> Original_OSChRetry6, 
                    global::System.Nullable<short> Original_OSChRetry7, 
                    global::System.Nullable<short> Original_OSChRetry8, 
                    global::System.Nullable<short> Original_FTChPass1, 
                    global::System.Nullable<short> Original_FTChPass2, 
                    global::System.Nullable<short> Original_FTChPass3, 
                    global::System.Nullable<short> Original_FTChPass4, 
                    global::System.Nullable<short> Original_FTChPass5, 
                    global::System.Nullable<short> Original_FTChPass6, 
                    global::System.Nullable<short> Original_FTChPass7, 
                    global::System.Nullable<short> Original_FTChPass8, 
                    global::System.Nullable<short> Original_FTChFail1, 
                    global::System.Nullable<short> Original_FTChFail2, 
                    global::System.Nullable<short> Original_FTChFail3, 
                    global::System.Nullable<short> Original_FTChFail4, 
                    global::System.Nullable<short> Original_FTChFail5, 
                    global::System.Nullable<short> Original_FTChFail6, 
                    global::System.Nullable<short> Original_FTChFail7, 
                    global::System.Nullable<short> Original_FTChFail8, 
                    global::System.Nullable<short> Original_FTChRetry1, 
                    global::System.Nullable<short> Original_FTChRetry2, 
                    global::System.Nullable<short> Original_FTChRetry3, 
                    global::System.Nullable<short> Original_FTChRetry4, 
                    global::System.Nullable<short> Original_FTChRetry5, 
                    global::System.Nullable<short> Original_FTChRetry6, 
                    global::System.Nullable<short> Original_FTChRetry7, 
                    global::System.Nullable<short> Original_FTChRetry8, 
                    string Original_WaferLotNo, 
                    global::System.Nullable<float> Original_TempOSYield, 
                    global::System.Nullable<float> Original_TempFTYield, 
                    string Original_NomarkCheck, 
                    string Original_MCProgramVersion1, 
                    string Original_MCProgramVersion2, 
                    string Original_MCProgramVersion3, 
                    string Original_MCProgramVersion4, 
                    string Original_KanagataCheck, 
                    string Original_VacuumCheck, 
                    global::System.Nullable<short> Original_DBNG, 
                    global::System.Nullable<short> Original_PNashiNG, 
                    global::System.Nullable<short> Original_WBNG, 
                    global::System.Nullable<short> Original_WBInspectionNG, 
                    string Original_TurningOnRank, 
                    global::System.Nullable<short> Original_MissingIC, 
                    global::System.Nullable<bool> Original_MissingICGL, 
                    string Original_FTSampleCheck, 
                    string Original_JigCheck, 
                    string Original_KanaCleanBefore, 
                    string Original_KanaCleanAfter, 
                    global::System.Nullable<short> Original_NGSampleCheck_Pn, 
                    global::System.Nullable<short> Original_NGSampleCheck_N, 
                    string Original_VisualCheckMode, 
                    string Original_VisualCheckAbnormal, 
                    string Original_VisualCheckAdjust, 
                    string Original_FirstShotCheckMode, 
                    string Original_FirstShotCheckModeAbnormal, 
                    string Original_FirstShotCheckModeAdjust, 
                    global::System.Nullable<short> Original_EmbossTapeChange, 
                    global::System.Nullable<short> Original_CoverTapeChange, 
                    global::System.Nullable<short> Original_IronStampCleaning, 
                    string Original_GLCheck, 
                    string Original_LotJudgement, 
                    global::System.Nullable<short> Original_GoodAdjust, 
                    global::System.Nullable<short> Original_NGAdjust, 
                    global::System.Nullable<short> Original_FTNGAdjust, 
                    global::System.Nullable<short> Original_OSNGAdjust, 
                    global::System.Nullable<short> Original_MekaNGAdjust, 
                    global::System.Nullable<short> Original_MarkerNGAdjust, 
                    global::System.Nullable<short> Original_TPRecogNGadjust, 
                    string Original_OPJudgement, 
                    string Original_Remark, 
                    global::System.Nullable<short> Original_InputQtyAdjust, 
                    string Original_EmbossTapeNo, 
                    global::System.Nullable<short> Original_MoldRecogNGAdjust, 
                    string Original_TGCondition, 
                    global::System.Nullable<short> Original_HasuuNowAdjust, 
                    string Original_FirstInspTestHead, 
                    string Original_OutsourceLotNo, 
                    string Original_ContainerBoxNo, 
                    global::System.Nullable<float> Original_sumyld) {
            if ((MCNo == null)) {
                throw new global::System.ArgumentNullException("MCNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(MCNo));
            }
            if ((LotNo == null)) {
                throw new global::System.ArgumentNullException("LotNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(LotNo));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(LotStartTime));
            if ((MCType == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(MCType));
            }
            if ((OPNo == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(OPNo));
            }
            if ((InputQty.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((short)(InputQty.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((TotalGood.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((short)(TotalGood.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((TotalNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((short)(TotalNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((OPRate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((float)(OPRate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((MaximumRPM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((float)(MaximumRPM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((AverageRPM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((float)(AverageRPM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((MTBF.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((float)(MTBF.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((MTTR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((float)(MTTR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((AlarmTotal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((short)(AlarmTotal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((LotEndTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(LotEndTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((RunTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((float)(RunTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((StopTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((float)(StopTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((AlarmTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((float)(AlarmTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((SelfConVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(SelfConVersion));
            }
            if ((NetVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(NetVersion));
            }
            if ((TestFlow == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(TestFlow));
            }
            if ((LaserMark1 == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(LaserMark1));
            }
            if ((LaserMark2 == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(LaserMark2));
            }
            if ((LaserMark3 == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(LaserMark3));
            }
            if ((OSProgram == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(OSProgram));
            }
            if ((FTProgram == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(FTProgram));
            }
            if ((TelekoCheck == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(TelekoCheck));
            }
            if ((ASICheck == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(ASICheck));
            }
            if ((HasuuBefore.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((short)(HasuuBefore.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((HasuuNow.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((short)(HasuuNow.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((FrontNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((short)(FrontNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((OS2NG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((short)(OS2NG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((FrontMarkerNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((short)(FrontMarkerNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((FLMarkerNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((short)(FLMarkerNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((OSTesterNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((short)(OSTesterNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((FTTesterNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((short)(FTTesterNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((MarkingRecogNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((short)(MarkingRecogNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((MoldRecogNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((short)(MoldRecogNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((TPRecogNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((short)(TPRecogNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((MekaNG1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((short)(MekaNG1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((MekaNG2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((short)(MekaNG2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((MekaNG3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((short)(MekaNG3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((MekaNG4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((short)(MekaNG4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((MekaNG5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((short)(MekaNG5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((ActualMekaNG1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((short)(ActualMekaNG1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((ActualMekaNG2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((short)(ActualMekaNG2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((ActualMekaNG3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((short)(ActualMekaNG3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((ActualMekaNG4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((short)(ActualMekaNG4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((ActualMekaNG5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((short)(ActualMekaNG5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((OSChPass1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((short)(OSChPass1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((OSChPass2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((short)(OSChPass2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((OSChPass3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((short)(OSChPass3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((OSChPass4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((short)(OSChPass4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((OSChPass5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((short)(OSChPass5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((OSChPass6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((short)(OSChPass6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((OSChPass7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((short)(OSChPass7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((OSChPass8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((short)(OSChPass8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((OS1ChFail1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((short)(OS1ChFail1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((OS1ChFail2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((short)(OS1ChFail2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((OS1ChFail3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((short)(OS1ChFail3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            if ((OS1ChFail4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((short)(OS1ChFail4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((OS1ChFail5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((short)(OS1ChFail5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            if ((OS1ChFail6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((short)(OS1ChFail6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((OS1ChFail7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((short)(OS1ChFail7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            if ((OS1ChFail8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((short)(OS1ChFail8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((OS2ChFail1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((short)(OS2ChFail1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            if ((OS2ChFail2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((short)(OS2ChFail2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((OS2ChFail3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((short)(OS2ChFail3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            if ((OS2ChFail4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((short)(OS2ChFail4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            if ((OS2ChFail5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((short)(OS2ChFail5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            if ((OS2ChFail6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((short)(OS2ChFail6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            if ((OS2ChFail7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((short)(OS2ChFail7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            if ((OS2ChFail8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((short)(OS2ChFail8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            if ((OSChRetry1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((short)(OSChRetry1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            if ((OSChRetry2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((short)(OSChRetry2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((OSChRetry3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((short)(OSChRetry3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            if ((OSChRetry4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((short)(OSChRetry4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((OSChRetry5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((short)(OSChRetry5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            if ((OSChRetry6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((short)(OSChRetry6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((OSChRetry7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((short)(OSChRetry7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            if ((OSChRetry8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((short)(OSChRetry8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            if ((FTChPass1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((short)(FTChPass1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            if ((FTChPass2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((short)(FTChPass2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            if ((FTChPass3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((short)(FTChPass3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[83].Value = global::System.DBNull.Value;
            }
            if ((FTChPass4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((short)(FTChPass4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            if ((FTChPass5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[85].Value = ((short)(FTChPass5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[85].Value = global::System.DBNull.Value;
            }
            if ((FTChPass6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((short)(FTChPass6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[86].Value = global::System.DBNull.Value;
            }
            if ((FTChPass7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((short)(FTChPass7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[87].Value = global::System.DBNull.Value;
            }
            if ((FTChPass8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((short)(FTChPass8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[88].Value = global::System.DBNull.Value;
            }
            if ((FTChFail1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((short)(FTChFail1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[89].Value = global::System.DBNull.Value;
            }
            if ((FTChFail2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((short)(FTChFail2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[90].Value = global::System.DBNull.Value;
            }
            if ((FTChFail3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[91].Value = ((short)(FTChFail3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[91].Value = global::System.DBNull.Value;
            }
            if ((FTChFail4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((short)(FTChFail4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[92].Value = global::System.DBNull.Value;
            }
            if ((FTChFail5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((short)(FTChFail5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[93].Value = global::System.DBNull.Value;
            }
            if ((FTChFail6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((short)(FTChFail6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[94].Value = global::System.DBNull.Value;
            }
            if ((FTChFail7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((short)(FTChFail7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[95].Value = global::System.DBNull.Value;
            }
            if ((FTChFail8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((short)(FTChFail8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[96].Value = global::System.DBNull.Value;
            }
            if ((FTChRetry1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[97].Value = ((short)(FTChRetry1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[97].Value = global::System.DBNull.Value;
            }
            if ((FTChRetry2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[98].Value = ((short)(FTChRetry2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[98].Value = global::System.DBNull.Value;
            }
            if ((FTChRetry3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[99].Value = ((short)(FTChRetry3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[99].Value = global::System.DBNull.Value;
            }
            if ((FTChRetry4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[100].Value = ((short)(FTChRetry4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[100].Value = global::System.DBNull.Value;
            }
            if ((FTChRetry5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[101].Value = ((short)(FTChRetry5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[101].Value = global::System.DBNull.Value;
            }
            if ((FTChRetry6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[102].Value = ((short)(FTChRetry6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[102].Value = global::System.DBNull.Value;
            }
            if ((FTChRetry7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[103].Value = ((short)(FTChRetry7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[103].Value = global::System.DBNull.Value;
            }
            if ((FTChRetry8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[104].Value = ((short)(FTChRetry8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[104].Value = global::System.DBNull.Value;
            }
            if ((WaferLotNo == null)) {
                this.Adapter.UpdateCommand.Parameters[105].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[105].Value = ((string)(WaferLotNo));
            }
            if ((TempOSYield.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[106].Value = ((float)(TempOSYield.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[106].Value = global::System.DBNull.Value;
            }
            if ((TempFTYield.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[107].Value = ((float)(TempFTYield.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[107].Value = global::System.DBNull.Value;
            }
            if ((NomarkCheck == null)) {
                this.Adapter.UpdateCommand.Parameters[108].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[108].Value = ((string)(NomarkCheck));
            }
            if ((MCProgramVersion1 == null)) {
                this.Adapter.UpdateCommand.Parameters[109].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[109].Value = ((string)(MCProgramVersion1));
            }
            if ((MCProgramVersion2 == null)) {
                this.Adapter.UpdateCommand.Parameters[110].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[110].Value = ((string)(MCProgramVersion2));
            }
            if ((MCProgramVersion3 == null)) {
                this.Adapter.UpdateCommand.Parameters[111].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[111].Value = ((string)(MCProgramVersion3));
            }
            if ((MCProgramVersion4 == null)) {
                this.Adapter.UpdateCommand.Parameters[112].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[112].Value = ((string)(MCProgramVersion4));
            }
            if ((KanagataCheck == null)) {
                this.Adapter.UpdateCommand.Parameters[113].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[113].Value = ((string)(KanagataCheck));
            }
            if ((VacuumCheck == null)) {
                this.Adapter.UpdateCommand.Parameters[114].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[114].Value = ((string)(VacuumCheck));
            }
            if ((DBNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[115].Value = ((short)(DBNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[115].Value = global::System.DBNull.Value;
            }
            if ((PNashiNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[116].Value = ((short)(PNashiNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[116].Value = global::System.DBNull.Value;
            }
            if ((WBNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[117].Value = ((short)(WBNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[117].Value = global::System.DBNull.Value;
            }
            if ((WBInspectionNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[118].Value = ((short)(WBInspectionNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[118].Value = global::System.DBNull.Value;
            }
            if ((TurningOnRank == null)) {
                this.Adapter.UpdateCommand.Parameters[119].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[119].Value = ((string)(TurningOnRank));
            }
            if ((MissingIC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[120].Value = ((short)(MissingIC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[120].Value = global::System.DBNull.Value;
            }
            if ((MissingICGL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[121].Value = ((bool)(MissingICGL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[121].Value = global::System.DBNull.Value;
            }
            if ((FTSampleCheck == null)) {
                this.Adapter.UpdateCommand.Parameters[122].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[122].Value = ((string)(FTSampleCheck));
            }
            if ((JigCheck == null)) {
                this.Adapter.UpdateCommand.Parameters[123].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[123].Value = ((string)(JigCheck));
            }
            if ((KanaCleanBefore == null)) {
                this.Adapter.UpdateCommand.Parameters[124].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[124].Value = ((string)(KanaCleanBefore));
            }
            if ((KanaCleanAfter == null)) {
                this.Adapter.UpdateCommand.Parameters[125].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[125].Value = ((string)(KanaCleanAfter));
            }
            if ((NGSampleCheck_Pn.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[126].Value = ((short)(NGSampleCheck_Pn.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[126].Value = global::System.DBNull.Value;
            }
            if ((NGSampleCheck_N.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[127].Value = ((short)(NGSampleCheck_N.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[127].Value = global::System.DBNull.Value;
            }
            if ((VisualCheckMode == null)) {
                this.Adapter.UpdateCommand.Parameters[128].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[128].Value = ((string)(VisualCheckMode));
            }
            if ((VisualCheckAbnormal == null)) {
                this.Adapter.UpdateCommand.Parameters[129].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[129].Value = ((string)(VisualCheckAbnormal));
            }
            if ((VisualCheckAdjust == null)) {
                this.Adapter.UpdateCommand.Parameters[130].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[130].Value = ((string)(VisualCheckAdjust));
            }
            if ((FirstShotCheckMode == null)) {
                this.Adapter.UpdateCommand.Parameters[131].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[131].Value = ((string)(FirstShotCheckMode));
            }
            if ((FirstShotCheckModeAbnormal == null)) {
                this.Adapter.UpdateCommand.Parameters[132].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[132].Value = ((string)(FirstShotCheckModeAbnormal));
            }
            if ((FirstShotCheckModeAdjust == null)) {
                this.Adapter.UpdateCommand.Parameters[133].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[133].Value = ((string)(FirstShotCheckModeAdjust));
            }
            if ((EmbossTapeChange.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[134].Value = ((short)(EmbossTapeChange.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[134].Value = global::System.DBNull.Value;
            }
            if ((CoverTapeChange.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[135].Value = ((short)(CoverTapeChange.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[135].Value = global::System.DBNull.Value;
            }
            if ((IronStampCleaning.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[136].Value = ((short)(IronStampCleaning.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[136].Value = global::System.DBNull.Value;
            }
            if ((GLCheck == null)) {
                this.Adapter.UpdateCommand.Parameters[137].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[137].Value = ((string)(GLCheck));
            }
            if ((LotJudgement == null)) {
                this.Adapter.UpdateCommand.Parameters[138].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[138].Value = ((string)(LotJudgement));
            }
            if ((GoodAdjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[139].Value = ((short)(GoodAdjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[139].Value = global::System.DBNull.Value;
            }
            if ((NGAdjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[140].Value = ((short)(NGAdjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[140].Value = global::System.DBNull.Value;
            }
            if ((FTNGAdjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[141].Value = ((short)(FTNGAdjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[141].Value = global::System.DBNull.Value;
            }
            if ((OSNGAdjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[142].Value = ((short)(OSNGAdjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[142].Value = global::System.DBNull.Value;
            }
            if ((MekaNGAdjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[143].Value = ((short)(MekaNGAdjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[143].Value = global::System.DBNull.Value;
            }
            if ((MarkerNGAdjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[144].Value = ((short)(MarkerNGAdjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[144].Value = global::System.DBNull.Value;
            }
            if ((TPRecogNGadjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[145].Value = ((short)(TPRecogNGadjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[145].Value = global::System.DBNull.Value;
            }
            if ((OPJudgement == null)) {
                this.Adapter.UpdateCommand.Parameters[146].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[146].Value = ((string)(OPJudgement));
            }
            if ((Remark == null)) {
                this.Adapter.UpdateCommand.Parameters[147].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[147].Value = ((string)(Remark));
            }
            if ((InputQtyAdjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[148].Value = ((short)(InputQtyAdjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[148].Value = global::System.DBNull.Value;
            }
            if ((EmbossTapeNo == null)) {
                this.Adapter.UpdateCommand.Parameters[149].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[149].Value = ((string)(EmbossTapeNo));
            }
            if ((MoldRecogNGAdjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[150].Value = ((short)(MoldRecogNGAdjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[150].Value = global::System.DBNull.Value;
            }
            if ((TGCondition == null)) {
                this.Adapter.UpdateCommand.Parameters[151].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[151].Value = ((string)(TGCondition));
            }
            if ((HasuuNowAdjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[152].Value = ((short)(HasuuNowAdjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[152].Value = global::System.DBNull.Value;
            }
            if ((FirstInspTestHead == null)) {
                this.Adapter.UpdateCommand.Parameters[153].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[153].Value = ((string)(FirstInspTestHead));
            }
            if ((OutsourceLotNo == null)) {
                this.Adapter.UpdateCommand.Parameters[154].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[154].Value = ((string)(OutsourceLotNo));
            }
            if ((ContainerBoxNo == null)) {
                this.Adapter.UpdateCommand.Parameters[155].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[155].Value = ((string)(ContainerBoxNo));
            }
            if ((sumyld.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[156].Value = ((float)(sumyld.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[156].Value = global::System.DBNull.Value;
            }
            if ((Original_MCNo == null)) {
                throw new global::System.ArgumentNullException("Original_MCNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[157].Value = ((string)(Original_MCNo));
            }
            if ((Original_LotNo == null)) {
                throw new global::System.ArgumentNullException("Original_LotNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[158].Value = ((string)(Original_LotNo));
            }
            this.Adapter.UpdateCommand.Parameters[159].Value = ((System.DateTime)(Original_LotStartTime));
            if ((Original_MCType == null)) {
                this.Adapter.UpdateCommand.Parameters[160].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[161].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[160].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[161].Value = ((string)(Original_MCType));
            }
            if ((Original_OPNo == null)) {
                this.Adapter.UpdateCommand.Parameters[162].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[163].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[162].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[163].Value = ((string)(Original_OPNo));
            }
            if ((Original_InputQty.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[164].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[165].Value = ((short)(Original_InputQty.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[164].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[165].Value = global::System.DBNull.Value;
            }
            if ((Original_TotalGood.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[166].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[167].Value = ((short)(Original_TotalGood.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[166].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[167].Value = global::System.DBNull.Value;
            }
            if ((Original_TotalNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[168].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[169].Value = ((short)(Original_TotalNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[168].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[169].Value = global::System.DBNull.Value;
            }
            if ((Original_OPRate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[170].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[171].Value = ((float)(Original_OPRate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[170].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[171].Value = global::System.DBNull.Value;
            }
            if ((Original_MaximumRPM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[172].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[173].Value = ((float)(Original_MaximumRPM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[172].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[173].Value = global::System.DBNull.Value;
            }
            if ((Original_AverageRPM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[174].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[175].Value = ((float)(Original_AverageRPM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[174].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[175].Value = global::System.DBNull.Value;
            }
            if ((Original_MTBF.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[176].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[177].Value = ((float)(Original_MTBF.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[176].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[177].Value = global::System.DBNull.Value;
            }
            if ((Original_MTTR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[178].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[179].Value = ((float)(Original_MTTR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[178].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[179].Value = global::System.DBNull.Value;
            }
            if ((Original_AlarmTotal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[180].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[181].Value = ((short)(Original_AlarmTotal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[180].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[181].Value = global::System.DBNull.Value;
            }
            if ((Original_LotEndTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[182].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[183].Value = ((System.DateTime)(Original_LotEndTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[182].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[183].Value = global::System.DBNull.Value;
            }
            if ((Original_RunTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[184].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[185].Value = ((float)(Original_RunTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[184].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[185].Value = global::System.DBNull.Value;
            }
            if ((Original_StopTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[186].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[187].Value = ((float)(Original_StopTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[186].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[187].Value = global::System.DBNull.Value;
            }
            if ((Original_AlarmTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[188].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[189].Value = ((float)(Original_AlarmTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[188].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[189].Value = global::System.DBNull.Value;
            }
            if ((Original_SelfConVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[190].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[191].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[190].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[191].Value = ((string)(Original_SelfConVersion));
            }
            if ((Original_NetVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[192].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[193].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[192].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[193].Value = ((string)(Original_NetVersion));
            }
            if ((Original_TestFlow == null)) {
                this.Adapter.UpdateCommand.Parameters[194].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[195].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[194].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[195].Value = ((string)(Original_TestFlow));
            }
            if ((Original_LaserMark1 == null)) {
                this.Adapter.UpdateCommand.Parameters[196].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[197].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[196].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[197].Value = ((string)(Original_LaserMark1));
            }
            if ((Original_LaserMark2 == null)) {
                this.Adapter.UpdateCommand.Parameters[198].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[199].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[198].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[199].Value = ((string)(Original_LaserMark2));
            }
            if ((Original_LaserMark3 == null)) {
                this.Adapter.UpdateCommand.Parameters[200].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[201].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[200].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[201].Value = ((string)(Original_LaserMark3));
            }
            if ((Original_OSProgram == null)) {
                this.Adapter.UpdateCommand.Parameters[202].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[203].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[202].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[203].Value = ((string)(Original_OSProgram));
            }
            if ((Original_FTProgram == null)) {
                this.Adapter.UpdateCommand.Parameters[204].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[205].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[204].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[205].Value = ((string)(Original_FTProgram));
            }
            if ((Original_TelekoCheck == null)) {
                this.Adapter.UpdateCommand.Parameters[206].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[207].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[206].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[207].Value = ((string)(Original_TelekoCheck));
            }
            if ((Original_ASICheck == null)) {
                this.Adapter.UpdateCommand.Parameters[208].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[209].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[208].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[209].Value = ((string)(Original_ASICheck));
            }
            if ((Original_HasuuBefore.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[210].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[211].Value = ((short)(Original_HasuuBefore.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[210].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[211].Value = global::System.DBNull.Value;
            }
            if ((Original_HasuuNow.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[212].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[213].Value = ((short)(Original_HasuuNow.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[212].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[213].Value = global::System.DBNull.Value;
            }
            if ((Original_FrontNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[214].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[215].Value = ((short)(Original_FrontNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[214].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[215].Value = global::System.DBNull.Value;
            }
            if ((Original_OS2NG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[216].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[217].Value = ((short)(Original_OS2NG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[216].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[217].Value = global::System.DBNull.Value;
            }
            if ((Original_FrontMarkerNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[218].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[219].Value = ((short)(Original_FrontMarkerNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[218].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[219].Value = global::System.DBNull.Value;
            }
            if ((Original_FLMarkerNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[220].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[221].Value = ((short)(Original_FLMarkerNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[220].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[221].Value = global::System.DBNull.Value;
            }
            if ((Original_OSTesterNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[222].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[223].Value = ((short)(Original_OSTesterNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[222].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[223].Value = global::System.DBNull.Value;
            }
            if ((Original_FTTesterNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[224].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[225].Value = ((short)(Original_FTTesterNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[224].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[225].Value = global::System.DBNull.Value;
            }
            if ((Original_MarkingRecogNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[226].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[227].Value = ((short)(Original_MarkingRecogNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[226].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[227].Value = global::System.DBNull.Value;
            }
            if ((Original_MoldRecogNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[228].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[229].Value = ((short)(Original_MoldRecogNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[228].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[229].Value = global::System.DBNull.Value;
            }
            if ((Original_TPRecogNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[230].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[231].Value = ((short)(Original_TPRecogNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[230].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[231].Value = global::System.DBNull.Value;
            }
            if ((Original_MekaNG1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[232].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[233].Value = ((short)(Original_MekaNG1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[232].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[233].Value = global::System.DBNull.Value;
            }
            if ((Original_MekaNG2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[234].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[235].Value = ((short)(Original_MekaNG2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[234].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[235].Value = global::System.DBNull.Value;
            }
            if ((Original_MekaNG3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[236].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[237].Value = ((short)(Original_MekaNG3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[236].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[237].Value = global::System.DBNull.Value;
            }
            if ((Original_MekaNG4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[238].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[239].Value = ((short)(Original_MekaNG4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[238].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[239].Value = global::System.DBNull.Value;
            }
            if ((Original_MekaNG5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[240].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[241].Value = ((short)(Original_MekaNG5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[240].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[241].Value = global::System.DBNull.Value;
            }
            if ((Original_ActualMekaNG1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[242].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[243].Value = ((short)(Original_ActualMekaNG1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[242].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[243].Value = global::System.DBNull.Value;
            }
            if ((Original_ActualMekaNG2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[244].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[245].Value = ((short)(Original_ActualMekaNG2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[244].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[245].Value = global::System.DBNull.Value;
            }
            if ((Original_ActualMekaNG3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[246].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[247].Value = ((short)(Original_ActualMekaNG3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[246].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[247].Value = global::System.DBNull.Value;
            }
            if ((Original_ActualMekaNG4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[248].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[249].Value = ((short)(Original_ActualMekaNG4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[248].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[249].Value = global::System.DBNull.Value;
            }
            if ((Original_ActualMekaNG5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[250].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[251].Value = ((short)(Original_ActualMekaNG5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[250].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[251].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChPass1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[252].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[253].Value = ((short)(Original_OSChPass1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[252].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[253].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChPass2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[254].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[255].Value = ((short)(Original_OSChPass2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[254].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[255].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChPass3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[256].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[257].Value = ((short)(Original_OSChPass3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[256].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[257].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChPass4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[258].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[259].Value = ((short)(Original_OSChPass4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[258].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[259].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChPass5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[260].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[261].Value = ((short)(Original_OSChPass5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[260].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[261].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChPass6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[262].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[263].Value = ((short)(Original_OSChPass6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[262].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[263].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChPass7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[264].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[265].Value = ((short)(Original_OSChPass7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[264].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[265].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChPass8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[266].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[267].Value = ((short)(Original_OSChPass8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[266].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[267].Value = global::System.DBNull.Value;
            }
            if ((Original_OS1ChFail1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[268].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[269].Value = ((short)(Original_OS1ChFail1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[268].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[269].Value = global::System.DBNull.Value;
            }
            if ((Original_OS1ChFail2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[270].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[271].Value = ((short)(Original_OS1ChFail2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[270].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[271].Value = global::System.DBNull.Value;
            }
            if ((Original_OS1ChFail3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[272].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[273].Value = ((short)(Original_OS1ChFail3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[272].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[273].Value = global::System.DBNull.Value;
            }
            if ((Original_OS1ChFail4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[274].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[275].Value = ((short)(Original_OS1ChFail4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[274].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[275].Value = global::System.DBNull.Value;
            }
            if ((Original_OS1ChFail5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[276].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[277].Value = ((short)(Original_OS1ChFail5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[276].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[277].Value = global::System.DBNull.Value;
            }
            if ((Original_OS1ChFail6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[278].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[279].Value = ((short)(Original_OS1ChFail6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[278].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[279].Value = global::System.DBNull.Value;
            }
            if ((Original_OS1ChFail7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[280].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[281].Value = ((short)(Original_OS1ChFail7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[280].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[281].Value = global::System.DBNull.Value;
            }
            if ((Original_OS1ChFail8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[282].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[283].Value = ((short)(Original_OS1ChFail8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[282].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[283].Value = global::System.DBNull.Value;
            }
            if ((Original_OS2ChFail1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[284].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[285].Value = ((short)(Original_OS2ChFail1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[284].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[285].Value = global::System.DBNull.Value;
            }
            if ((Original_OS2ChFail2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[286].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[287].Value = ((short)(Original_OS2ChFail2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[286].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[287].Value = global::System.DBNull.Value;
            }
            if ((Original_OS2ChFail3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[288].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[289].Value = ((short)(Original_OS2ChFail3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[288].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[289].Value = global::System.DBNull.Value;
            }
            if ((Original_OS2ChFail4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[290].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[291].Value = ((short)(Original_OS2ChFail4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[290].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[291].Value = global::System.DBNull.Value;
            }
            if ((Original_OS2ChFail5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[292].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[293].Value = ((short)(Original_OS2ChFail5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[292].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[293].Value = global::System.DBNull.Value;
            }
            if ((Original_OS2ChFail6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[294].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[295].Value = ((short)(Original_OS2ChFail6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[294].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[295].Value = global::System.DBNull.Value;
            }
            if ((Original_OS2ChFail7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[296].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[297].Value = ((short)(Original_OS2ChFail7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[296].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[297].Value = global::System.DBNull.Value;
            }
            if ((Original_OS2ChFail8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[298].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[299].Value = ((short)(Original_OS2ChFail8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[298].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[299].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChRetry1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[300].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[301].Value = ((short)(Original_OSChRetry1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[300].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[301].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChRetry2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[302].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[303].Value = ((short)(Original_OSChRetry2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[302].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[303].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChRetry3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[304].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[305].Value = ((short)(Original_OSChRetry3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[304].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[305].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChRetry4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[306].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[307].Value = ((short)(Original_OSChRetry4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[306].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[307].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChRetry5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[308].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[309].Value = ((short)(Original_OSChRetry5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[308].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[309].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChRetry6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[310].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[311].Value = ((short)(Original_OSChRetry6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[310].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[311].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChRetry7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[312].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[313].Value = ((short)(Original_OSChRetry7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[312].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[313].Value = global::System.DBNull.Value;
            }
            if ((Original_OSChRetry8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[314].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[315].Value = ((short)(Original_OSChRetry8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[314].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[315].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChPass1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[316].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[317].Value = ((short)(Original_FTChPass1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[316].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[317].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChPass2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[318].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[319].Value = ((short)(Original_FTChPass2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[318].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[319].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChPass3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[320].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[321].Value = ((short)(Original_FTChPass3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[320].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[321].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChPass4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[322].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[323].Value = ((short)(Original_FTChPass4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[322].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[323].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChPass5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[324].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[325].Value = ((short)(Original_FTChPass5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[324].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[325].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChPass6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[326].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[327].Value = ((short)(Original_FTChPass6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[326].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[327].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChPass7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[328].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[329].Value = ((short)(Original_FTChPass7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[328].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[329].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChPass8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[330].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[331].Value = ((short)(Original_FTChPass8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[330].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[331].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChFail1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[332].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[333].Value = ((short)(Original_FTChFail1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[332].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[333].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChFail2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[334].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[335].Value = ((short)(Original_FTChFail2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[334].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[335].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChFail3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[336].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[337].Value = ((short)(Original_FTChFail3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[336].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[337].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChFail4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[338].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[339].Value = ((short)(Original_FTChFail4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[338].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[339].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChFail5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[340].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[341].Value = ((short)(Original_FTChFail5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[340].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[341].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChFail6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[342].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[343].Value = ((short)(Original_FTChFail6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[342].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[343].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChFail7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[344].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[345].Value = ((short)(Original_FTChFail7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[344].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[345].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChFail8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[346].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[347].Value = ((short)(Original_FTChFail8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[346].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[347].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChRetry1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[348].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[349].Value = ((short)(Original_FTChRetry1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[348].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[349].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChRetry2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[350].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[351].Value = ((short)(Original_FTChRetry2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[350].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[351].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChRetry3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[352].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[353].Value = ((short)(Original_FTChRetry3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[352].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[353].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChRetry4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[354].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[355].Value = ((short)(Original_FTChRetry4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[354].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[355].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChRetry5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[356].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[357].Value = ((short)(Original_FTChRetry5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[356].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[357].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChRetry6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[358].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[359].Value = ((short)(Original_FTChRetry6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[358].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[359].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChRetry7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[360].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[361].Value = ((short)(Original_FTChRetry7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[360].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[361].Value = global::System.DBNull.Value;
            }
            if ((Original_FTChRetry8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[362].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[363].Value = ((short)(Original_FTChRetry8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[362].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[363].Value = global::System.DBNull.Value;
            }
            if ((Original_WaferLotNo == null)) {
                this.Adapter.UpdateCommand.Parameters[364].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[365].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[364].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[365].Value = ((string)(Original_WaferLotNo));
            }
            if ((Original_TempOSYield.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[366].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[367].Value = ((float)(Original_TempOSYield.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[366].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[367].Value = global::System.DBNull.Value;
            }
            if ((Original_TempFTYield.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[368].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[369].Value = ((float)(Original_TempFTYield.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[368].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[369].Value = global::System.DBNull.Value;
            }
            if ((Original_NomarkCheck == null)) {
                this.Adapter.UpdateCommand.Parameters[370].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[371].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[370].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[371].Value = ((string)(Original_NomarkCheck));
            }
            if ((Original_MCProgramVersion1 == null)) {
                this.Adapter.UpdateCommand.Parameters[372].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[373].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[372].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[373].Value = ((string)(Original_MCProgramVersion1));
            }
            if ((Original_MCProgramVersion2 == null)) {
                this.Adapter.UpdateCommand.Parameters[374].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[375].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[374].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[375].Value = ((string)(Original_MCProgramVersion2));
            }
            if ((Original_MCProgramVersion3 == null)) {
                this.Adapter.UpdateCommand.Parameters[376].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[377].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[376].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[377].Value = ((string)(Original_MCProgramVersion3));
            }
            if ((Original_MCProgramVersion4 == null)) {
                this.Adapter.UpdateCommand.Parameters[378].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[379].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[378].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[379].Value = ((string)(Original_MCProgramVersion4));
            }
            if ((Original_KanagataCheck == null)) {
                this.Adapter.UpdateCommand.Parameters[380].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[381].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[380].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[381].Value = ((string)(Original_KanagataCheck));
            }
            if ((Original_VacuumCheck == null)) {
                this.Adapter.UpdateCommand.Parameters[382].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[383].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[382].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[383].Value = ((string)(Original_VacuumCheck));
            }
            if ((Original_DBNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[384].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[385].Value = ((short)(Original_DBNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[384].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[385].Value = global::System.DBNull.Value;
            }
            if ((Original_PNashiNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[386].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[387].Value = ((short)(Original_PNashiNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[386].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[387].Value = global::System.DBNull.Value;
            }
            if ((Original_WBNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[388].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[389].Value = ((short)(Original_WBNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[388].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[389].Value = global::System.DBNull.Value;
            }
            if ((Original_WBInspectionNG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[390].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[391].Value = ((short)(Original_WBInspectionNG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[390].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[391].Value = global::System.DBNull.Value;
            }
            if ((Original_TurningOnRank == null)) {
                this.Adapter.UpdateCommand.Parameters[392].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[393].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[392].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[393].Value = ((string)(Original_TurningOnRank));
            }
            if ((Original_MissingIC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[394].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[395].Value = ((short)(Original_MissingIC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[394].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[395].Value = global::System.DBNull.Value;
            }
            if ((Original_MissingICGL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[396].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[397].Value = ((bool)(Original_MissingICGL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[396].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[397].Value = global::System.DBNull.Value;
            }
            if ((Original_FTSampleCheck == null)) {
                this.Adapter.UpdateCommand.Parameters[398].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[399].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[398].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[399].Value = ((string)(Original_FTSampleCheck));
            }
            if ((Original_JigCheck == null)) {
                this.Adapter.UpdateCommand.Parameters[400].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[401].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[400].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[401].Value = ((string)(Original_JigCheck));
            }
            if ((Original_KanaCleanBefore == null)) {
                this.Adapter.UpdateCommand.Parameters[402].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[403].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[402].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[403].Value = ((string)(Original_KanaCleanBefore));
            }
            if ((Original_KanaCleanAfter == null)) {
                this.Adapter.UpdateCommand.Parameters[404].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[405].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[404].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[405].Value = ((string)(Original_KanaCleanAfter));
            }
            if ((Original_NGSampleCheck_Pn.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[406].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[407].Value = ((short)(Original_NGSampleCheck_Pn.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[406].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[407].Value = global::System.DBNull.Value;
            }
            if ((Original_NGSampleCheck_N.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[408].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[409].Value = ((short)(Original_NGSampleCheck_N.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[408].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[409].Value = global::System.DBNull.Value;
            }
            if ((Original_VisualCheckMode == null)) {
                this.Adapter.UpdateCommand.Parameters[410].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[411].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[410].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[411].Value = ((string)(Original_VisualCheckMode));
            }
            if ((Original_VisualCheckAbnormal == null)) {
                this.Adapter.UpdateCommand.Parameters[412].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[413].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[412].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[413].Value = ((string)(Original_VisualCheckAbnormal));
            }
            if ((Original_VisualCheckAdjust == null)) {
                this.Adapter.UpdateCommand.Parameters[414].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[415].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[414].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[415].Value = ((string)(Original_VisualCheckAdjust));
            }
            if ((Original_FirstShotCheckMode == null)) {
                this.Adapter.UpdateCommand.Parameters[416].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[417].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[416].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[417].Value = ((string)(Original_FirstShotCheckMode));
            }
            if ((Original_FirstShotCheckModeAbnormal == null)) {
                this.Adapter.UpdateCommand.Parameters[418].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[419].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[418].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[419].Value = ((string)(Original_FirstShotCheckModeAbnormal));
            }
            if ((Original_FirstShotCheckModeAdjust == null)) {
                this.Adapter.UpdateCommand.Parameters[420].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[421].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[420].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[421].Value = ((string)(Original_FirstShotCheckModeAdjust));
            }
            if ((Original_EmbossTapeChange.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[422].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[423].Value = ((short)(Original_EmbossTapeChange.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[422].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[423].Value = global::System.DBNull.Value;
            }
            if ((Original_CoverTapeChange.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[424].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[425].Value = ((short)(Original_CoverTapeChange.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[424].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[425].Value = global::System.DBNull.Value;
            }
            if ((Original_IronStampCleaning.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[426].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[427].Value = ((short)(Original_IronStampCleaning.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[426].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[427].Value = global::System.DBNull.Value;
            }
            if ((Original_GLCheck == null)) {
                this.Adapter.UpdateCommand.Parameters[428].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[429].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[428].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[429].Value = ((string)(Original_GLCheck));
            }
            if ((Original_LotJudgement == null)) {
                this.Adapter.UpdateCommand.Parameters[430].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[431].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[430].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[431].Value = ((string)(Original_LotJudgement));
            }
            if ((Original_GoodAdjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[432].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[433].Value = ((short)(Original_GoodAdjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[432].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[433].Value = global::System.DBNull.Value;
            }
            if ((Original_NGAdjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[434].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[435].Value = ((short)(Original_NGAdjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[434].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[435].Value = global::System.DBNull.Value;
            }
            if ((Original_FTNGAdjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[436].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[437].Value = ((short)(Original_FTNGAdjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[436].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[437].Value = global::System.DBNull.Value;
            }
            if ((Original_OSNGAdjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[438].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[439].Value = ((short)(Original_OSNGAdjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[438].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[439].Value = global::System.DBNull.Value;
            }
            if ((Original_MekaNGAdjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[440].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[441].Value = ((short)(Original_MekaNGAdjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[440].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[441].Value = global::System.DBNull.Value;
            }
            if ((Original_MarkerNGAdjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[442].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[443].Value = ((short)(Original_MarkerNGAdjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[442].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[443].Value = global::System.DBNull.Value;
            }
            if ((Original_TPRecogNGadjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[444].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[445].Value = ((short)(Original_TPRecogNGadjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[444].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[445].Value = global::System.DBNull.Value;
            }
            if ((Original_OPJudgement == null)) {
                this.Adapter.UpdateCommand.Parameters[446].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[447].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[446].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[447].Value = ((string)(Original_OPJudgement));
            }
            if ((Original_Remark == null)) {
                this.Adapter.UpdateCommand.Parameters[448].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[449].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[448].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[449].Value = ((string)(Original_Remark));
            }
            if ((Original_InputQtyAdjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[450].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[451].Value = ((short)(Original_InputQtyAdjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[450].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[451].Value = global::System.DBNull.Value;
            }
            if ((Original_EmbossTapeNo == null)) {
                this.Adapter.UpdateCommand.Parameters[452].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[453].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[452].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[453].Value = ((string)(Original_EmbossTapeNo));
            }
            if ((Original_MoldRecogNGAdjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[454].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[455].Value = ((short)(Original_MoldRecogNGAdjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[454].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[455].Value = global::System.DBNull.Value;
            }
            if ((Original_TGCondition == null)) {
                this.Adapter.UpdateCommand.Parameters[456].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[457].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[456].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[457].Value = ((string)(Original_TGCondition));
            }
            if ((Original_HasuuNowAdjust.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[458].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[459].Value = ((short)(Original_HasuuNowAdjust.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[458].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[459].Value = global::System.DBNull.Value;
            }
            if ((Original_FirstInspTestHead == null)) {
                this.Adapter.UpdateCommand.Parameters[460].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[461].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[460].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[461].Value = ((string)(Original_FirstInspTestHead));
            }
            if ((Original_OutsourceLotNo == null)) {
                this.Adapter.UpdateCommand.Parameters[462].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[463].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[462].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[463].Value = ((string)(Original_OutsourceLotNo));
            }
            if ((Original_ContainerBoxNo == null)) {
                this.Adapter.UpdateCommand.Parameters[464].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[465].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[464].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[465].Value = ((string)(Original_ContainerBoxNo));
            }
            if ((Original_sumyld.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[466].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[467].Value = ((float)(Original_sumyld.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[466].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[467].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string MCType, 
                    string OPNo, 
                    global::System.Nullable<short> InputQty, 
                    global::System.Nullable<short> TotalGood, 
                    global::System.Nullable<short> TotalNG, 
                    global::System.Nullable<float> OPRate, 
                    global::System.Nullable<float> MaximumRPM, 
                    global::System.Nullable<float> AverageRPM, 
                    global::System.Nullable<float> MTBF, 
                    global::System.Nullable<float> MTTR, 
                    global::System.Nullable<short> AlarmTotal, 
                    global::System.Nullable<global::System.DateTime> LotEndTime, 
                    global::System.Nullable<float> RunTime, 
                    global::System.Nullable<float> StopTime, 
                    global::System.Nullable<float> AlarmTime, 
                    string SelfConVersion, 
                    string NetVersion, 
                    string TestFlow, 
                    string LaserMark1, 
                    string LaserMark2, 
                    string LaserMark3, 
                    string OSProgram, 
                    string FTProgram, 
                    string TelekoCheck, 
                    string ASICheck, 
                    global::System.Nullable<short> HasuuBefore, 
                    global::System.Nullable<short> HasuuNow, 
                    global::System.Nullable<short> FrontNG, 
                    global::System.Nullable<short> OS2NG, 
                    global::System.Nullable<short> FrontMarkerNG, 
                    global::System.Nullable<short> FLMarkerNG, 
                    global::System.Nullable<short> OSTesterNG, 
                    global::System.Nullable<short> FTTesterNG, 
                    global::System.Nullable<short> MarkingRecogNG, 
                    global::System.Nullable<short> MoldRecogNG, 
                    global::System.Nullable<short> TPRecogNG, 
                    global::System.Nullable<short> MekaNG1, 
                    global::System.Nullable<short> MekaNG2, 
                    global::System.Nullable<short> MekaNG3, 
                    global::System.Nullable<short> MekaNG4, 
                    global::System.Nullable<short> MekaNG5, 
                    global::System.Nullable<short> ActualMekaNG1, 
                    global::System.Nullable<short> ActualMekaNG2, 
                    global::System.Nullable<short> ActualMekaNG3, 
                    global::System.Nullable<short> ActualMekaNG4, 
                    global::System.Nullable<short> ActualMekaNG5, 
                    global::System.Nullable<short> OSChPass1, 
                    global::System.Nullable<short> OSChPass2, 
                    global::System.Nullable<short> OSChPass3, 
                    global::System.Nullable<short> OSChPass4, 
                    global::System.Nullable<short> OSChPass5, 
                    global::System.Nullable<short> OSChPass6, 
                    global::System.Nullable<short> OSChPass7, 
                    global::System.Nullable<short> OSChPass8, 
                    global::System.Nullable<short> OS1ChFail1, 
                    global::System.Nullable<short> OS1ChFail2, 
                    global::System.Nullable<short> OS1ChFail3, 
                    global::System.Nullable<short> OS1ChFail4, 
                    global::System.Nullable<short> OS1ChFail5, 
                    global::System.Nullable<short> OS1ChFail6, 
                    global::System.Nullable<short> OS1ChFail7, 
                    global::System.Nullable<short> OS1ChFail8, 
                    global::System.Nullable<short> OS2ChFail1, 
                    global::System.Nullable<short> OS2ChFail2, 
                    global::System.Nullable<short> OS2ChFail3, 
                    global::System.Nullable<short> OS2ChFail4, 
                    global::System.Nullable<short> OS2ChFail5, 
                    global::System.Nullable<short> OS2ChFail6, 
                    global::System.Nullable<short> OS2ChFail7, 
                    global::System.Nullable<short> OS2ChFail8, 
                    global::System.Nullable<short> OSChRetry1, 
                    global::System.Nullable<short> OSChRetry2, 
                    global::System.Nullable<short> OSChRetry3, 
                    global::System.Nullable<short> OSChRetry4, 
                    global::System.Nullable<short> OSChRetry5, 
                    global::System.Nullable<short> OSChRetry6, 
                    global::System.Nullable<short> OSChRetry7, 
                    global::System.Nullable<short> OSChRetry8, 
                    global::System.Nullable<short> FTChPass1, 
                    global::System.Nullable<short> FTChPass2, 
                    global::System.Nullable<short> FTChPass3, 
                    global::System.Nullable<short> FTChPass4, 
                    global::System.Nullable<short> FTChPass5, 
                    global::System.Nullable<short> FTChPass6, 
                    global::System.Nullable<short> FTChPass7, 
                    global::System.Nullable<short> FTChPass8, 
                    global::System.Nullable<short> FTChFail1, 
                    global::System.Nullable<short> FTChFail2, 
                    global::System.Nullable<short> FTChFail3, 
                    global::System.Nullable<short> FTChFail4, 
                    global::System.Nullable<short> FTChFail5, 
                    global::System.Nullable<short> FTChFail6, 
                    global::System.Nullable<short> FTChFail7, 
                    global::System.Nullable<short> FTChFail8, 
                    global::System.Nullable<short> FTChRetry1, 
                    global::System.Nullable<short> FTChRetry2, 
                    global::System.Nullable<short> FTChRetry3, 
                    global::System.Nullable<short> FTChRetry4, 
                    global::System.Nullable<short> FTChRetry5, 
                    global::System.Nullable<short> FTChRetry6, 
                    global::System.Nullable<short> FTChRetry7, 
                    global::System.Nullable<short> FTChRetry8, 
                    string WaferLotNo, 
                    global::System.Nullable<float> TempOSYield, 
                    global::System.Nullable<float> TempFTYield, 
                    string NomarkCheck, 
                    string MCProgramVersion1, 
                    string MCProgramVersion2, 
                    string MCProgramVersion3, 
                    string MCProgramVersion4, 
                    string KanagataCheck, 
                    string VacuumCheck, 
                    global::System.Nullable<short> DBNG, 
                    global::System.Nullable<short> PNashiNG, 
                    global::System.Nullable<short> WBNG, 
                    global::System.Nullable<short> WBInspectionNG, 
                    string TurningOnRank, 
                    global::System.Nullable<short> MissingIC, 
                    global::System.Nullable<bool> MissingICGL, 
                    string FTSampleCheck, 
                    string JigCheck, 
                    string KanaCleanBefore, 
                    string KanaCleanAfter, 
                    global::System.Nullable<short> NGSampleCheck_Pn, 
                    global::System.Nullable<short> NGSampleCheck_N, 
                    string VisualCheckMode, 
                    string VisualCheckAbnormal, 
                    string VisualCheckAdjust, 
                    string FirstShotCheckMode, 
                    string FirstShotCheckModeAbnormal, 
                    string FirstShotCheckModeAdjust, 
                    global::System.Nullable<short> EmbossTapeChange, 
                    global::System.Nullable<short> CoverTapeChange, 
                    global::System.Nullable<short> IronStampCleaning, 
                    string GLCheck, 
                    string LotJudgement, 
                    global::System.Nullable<short> GoodAdjust, 
                    global::System.Nullable<short> NGAdjust, 
                    global::System.Nullable<short> FTNGAdjust, 
                    global::System.Nullable<short> OSNGAdjust, 
                    global::System.Nullable<short> MekaNGAdjust, 
                    global::System.Nullable<short> MarkerNGAdjust, 
                    global::System.Nullable<short> TPRecogNGadjust, 
                    string OPJudgement, 
                    string Remark, 
                    global::System.Nullable<short> InputQtyAdjust, 
                    string EmbossTapeNo, 
                    global::System.Nullable<short> MoldRecogNGAdjust, 
                    string TGCondition, 
                    global::System.Nullable<short> HasuuNowAdjust, 
                    string FirstInspTestHead, 
                    string OutsourceLotNo, 
                    string ContainerBoxNo, 
                    global::System.Nullable<float> sumyld, 
                    string Original_MCNo, 
                    string Original_LotNo, 
                    System.DateTime Original_LotStartTime, 
                    string Original_MCType, 
                    string Original_OPNo, 
                    global::System.Nullable<short> Original_InputQty, 
                    global::System.Nullable<short> Original_TotalGood, 
                    global::System.Nullable<short> Original_TotalNG, 
                    global::System.Nullable<float> Original_OPRate, 
                    global::System.Nullable<float> Original_MaximumRPM, 
                    global::System.Nullable<float> Original_AverageRPM, 
                    global::System.Nullable<float> Original_MTBF, 
                    global::System.Nullable<float> Original_MTTR, 
                    global::System.Nullable<short> Original_AlarmTotal, 
                    global::System.Nullable<global::System.DateTime> Original_LotEndTime, 
                    global::System.Nullable<float> Original_RunTime, 
                    global::System.Nullable<float> Original_StopTime, 
                    global::System.Nullable<float> Original_AlarmTime, 
                    string Original_SelfConVersion, 
                    string Original_NetVersion, 
                    string Original_TestFlow, 
                    string Original_LaserMark1, 
                    string Original_LaserMark2, 
                    string Original_LaserMark3, 
                    string Original_OSProgram, 
                    string Original_FTProgram, 
                    string Original_TelekoCheck, 
                    string Original_ASICheck, 
                    global::System.Nullable<short> Original_HasuuBefore, 
                    global::System.Nullable<short> Original_HasuuNow, 
                    global::System.Nullable<short> Original_FrontNG, 
                    global::System.Nullable<short> Original_OS2NG, 
                    global::System.Nullable<short> Original_FrontMarkerNG, 
                    global::System.Nullable<short> Original_FLMarkerNG, 
                    global::System.Nullable<short> Original_OSTesterNG, 
                    global::System.Nullable<short> Original_FTTesterNG, 
                    global::System.Nullable<short> Original_MarkingRecogNG, 
                    global::System.Nullable<short> Original_MoldRecogNG, 
                    global::System.Nullable<short> Original_TPRecogNG, 
                    global::System.Nullable<short> Original_MekaNG1, 
                    global::System.Nullable<short> Original_MekaNG2, 
                    global::System.Nullable<short> Original_MekaNG3, 
                    global::System.Nullable<short> Original_MekaNG4, 
                    global::System.Nullable<short> Original_MekaNG5, 
                    global::System.Nullable<short> Original_ActualMekaNG1, 
                    global::System.Nullable<short> Original_ActualMekaNG2, 
                    global::System.Nullable<short> Original_ActualMekaNG3, 
                    global::System.Nullable<short> Original_ActualMekaNG4, 
                    global::System.Nullable<short> Original_ActualMekaNG5, 
                    global::System.Nullable<short> Original_OSChPass1, 
                    global::System.Nullable<short> Original_OSChPass2, 
                    global::System.Nullable<short> Original_OSChPass3, 
                    global::System.Nullable<short> Original_OSChPass4, 
                    global::System.Nullable<short> Original_OSChPass5, 
                    global::System.Nullable<short> Original_OSChPass6, 
                    global::System.Nullable<short> Original_OSChPass7, 
                    global::System.Nullable<short> Original_OSChPass8, 
                    global::System.Nullable<short> Original_OS1ChFail1, 
                    global::System.Nullable<short> Original_OS1ChFail2, 
                    global::System.Nullable<short> Original_OS1ChFail3, 
                    global::System.Nullable<short> Original_OS1ChFail4, 
                    global::System.Nullable<short> Original_OS1ChFail5, 
                    global::System.Nullable<short> Original_OS1ChFail6, 
                    global::System.Nullable<short> Original_OS1ChFail7, 
                    global::System.Nullable<short> Original_OS1ChFail8, 
                    global::System.Nullable<short> Original_OS2ChFail1, 
                    global::System.Nullable<short> Original_OS2ChFail2, 
                    global::System.Nullable<short> Original_OS2ChFail3, 
                    global::System.Nullable<short> Original_OS2ChFail4, 
                    global::System.Nullable<short> Original_OS2ChFail5, 
                    global::System.Nullable<short> Original_OS2ChFail6, 
                    global::System.Nullable<short> Original_OS2ChFail7, 
                    global::System.Nullable<short> Original_OS2ChFail8, 
                    global::System.Nullable<short> Original_OSChRetry1, 
                    global::System.Nullable<short> Original_OSChRetry2, 
                    global::System.Nullable<short> Original_OSChRetry3, 
                    global::System.Nullable<short> Original_OSChRetry4, 
                    global::System.Nullable<short> Original_OSChRetry5, 
                    global::System.Nullable<short> Original_OSChRetry6, 
                    global::System.Nullable<short> Original_OSChRetry7, 
                    global::System.Nullable<short> Original_OSChRetry8, 
                    global::System.Nullable<short> Original_FTChPass1, 
                    global::System.Nullable<short> Original_FTChPass2, 
                    global::System.Nullable<short> Original_FTChPass3, 
                    global::System.Nullable<short> Original_FTChPass4, 
                    global::System.Nullable<short> Original_FTChPass5, 
                    global::System.Nullable<short> Original_FTChPass6, 
                    global::System.Nullable<short> Original_FTChPass7, 
                    global::System.Nullable<short> Original_FTChPass8, 
                    global::System.Nullable<short> Original_FTChFail1, 
                    global::System.Nullable<short> Original_FTChFail2, 
                    global::System.Nullable<short> Original_FTChFail3, 
                    global::System.Nullable<short> Original_FTChFail4, 
                    global::System.Nullable<short> Original_FTChFail5, 
                    global::System.Nullable<short> Original_FTChFail6, 
                    global::System.Nullable<short> Original_FTChFail7, 
                    global::System.Nullable<short> Original_FTChFail8, 
                    global::System.Nullable<short> Original_FTChRetry1, 
                    global::System.Nullable<short> Original_FTChRetry2, 
                    global::System.Nullable<short> Original_FTChRetry3, 
                    global::System.Nullable<short> Original_FTChRetry4, 
                    global::System.Nullable<short> Original_FTChRetry5, 
                    global::System.Nullable<short> Original_FTChRetry6, 
                    global::System.Nullable<short> Original_FTChRetry7, 
                    global::System.Nullable<short> Original_FTChRetry8, 
                    string Original_WaferLotNo, 
                    global::System.Nullable<float> Original_TempOSYield, 
                    global::System.Nullable<float> Original_TempFTYield, 
                    string Original_NomarkCheck, 
                    string Original_MCProgramVersion1, 
                    string Original_MCProgramVersion2, 
                    string Original_MCProgramVersion3, 
                    string Original_MCProgramVersion4, 
                    string Original_KanagataCheck, 
                    string Original_VacuumCheck, 
                    global::System.Nullable<short> Original_DBNG, 
                    global::System.Nullable<short> Original_PNashiNG, 
                    global::System.Nullable<short> Original_WBNG, 
                    global::System.Nullable<short> Original_WBInspectionNG, 
                    string Original_TurningOnRank, 
                    global::System.Nullable<short> Original_MissingIC, 
                    global::System.Nullable<bool> Original_MissingICGL, 
                    string Original_FTSampleCheck, 
                    string Original_JigCheck, 
                    string Original_KanaCleanBefore, 
                    string Original_KanaCleanAfter, 
                    global::System.Nullable<short> Original_NGSampleCheck_Pn, 
                    global::System.Nullable<short> Original_NGSampleCheck_N, 
                    string Original_VisualCheckMode, 
                    string Original_VisualCheckAbnormal, 
                    string Original_VisualCheckAdjust, 
                    string Original_FirstShotCheckMode, 
                    string Original_FirstShotCheckModeAbnormal, 
                    string Original_FirstShotCheckModeAdjust, 
                    global::System.Nullable<short> Original_EmbossTapeChange, 
                    global::System.Nullable<short> Original_CoverTapeChange, 
                    global::System.Nullable<short> Original_IronStampCleaning, 
                    string Original_GLCheck, 
                    string Original_LotJudgement, 
                    global::System.Nullable<short> Original_GoodAdjust, 
                    global::System.Nullable<short> Original_NGAdjust, 
                    global::System.Nullable<short> Original_FTNGAdjust, 
                    global::System.Nullable<short> Original_OSNGAdjust, 
                    global::System.Nullable<short> Original_MekaNGAdjust, 
                    global::System.Nullable<short> Original_MarkerNGAdjust, 
                    global::System.Nullable<short> Original_TPRecogNGadjust, 
                    string Original_OPJudgement, 
                    string Original_Remark, 
                    global::System.Nullable<short> Original_InputQtyAdjust, 
                    string Original_EmbossTapeNo, 
                    global::System.Nullable<short> Original_MoldRecogNGAdjust, 
                    string Original_TGCondition, 
                    global::System.Nullable<short> Original_HasuuNowAdjust, 
                    string Original_FirstInspTestHead, 
                    string Original_OutsourceLotNo, 
                    string Original_ContainerBoxNo, 
                    global::System.Nullable<float> Original_sumyld) {
            return this.Update(Original_MCNo, Original_LotNo, Original_LotStartTime, MCType, OPNo, InputQty, TotalGood, TotalNG, OPRate, MaximumRPM, AverageRPM, MTBF, MTTR, AlarmTotal, LotEndTime, RunTime, StopTime, AlarmTime, SelfConVersion, NetVersion, TestFlow, LaserMark1, LaserMark2, LaserMark3, OSProgram, FTProgram, TelekoCheck, ASICheck, HasuuBefore, HasuuNow, FrontNG, OS2NG, FrontMarkerNG, FLMarkerNG, OSTesterNG, FTTesterNG, MarkingRecogNG, MoldRecogNG, TPRecogNG, MekaNG1, MekaNG2, MekaNG3, MekaNG4, MekaNG5, ActualMekaNG1, ActualMekaNG2, ActualMekaNG3, ActualMekaNG4, ActualMekaNG5, OSChPass1, OSChPass2, OSChPass3, OSChPass4, OSChPass5, OSChPass6, OSChPass7, OSChPass8, OS1ChFail1, OS1ChFail2, OS1ChFail3, OS1ChFail4, OS1ChFail5, OS1ChFail6, OS1ChFail7, OS1ChFail8, OS2ChFail1, OS2ChFail2, OS2ChFail3, OS2ChFail4, OS2ChFail5, OS2ChFail6, OS2ChFail7, OS2ChFail8, OSChRetry1, OSChRetry2, OSChRetry3, OSChRetry4, OSChRetry5, OSChRetry6, OSChRetry7, OSChRetry8, FTChPass1, FTChPass2, FTChPass3, FTChPass4, FTChPass5, FTChPass6, FTChPass7, FTChPass8, FTChFail1, FTChFail2, FTChFail3, FTChFail4, FTChFail5, FTChFail6, FTChFail7, FTChFail8, FTChRetry1, FTChRetry2, FTChRetry3, FTChRetry4, FTChRetry5, FTChRetry6, FTChRetry7, FTChRetry8, WaferLotNo, TempOSYield, TempFTYield, NomarkCheck, MCProgramVersion1, MCProgramVersion2, MCProgramVersion3, MCProgramVersion4, KanagataCheck, VacuumCheck, DBNG, PNashiNG, WBNG, WBInspectionNG, TurningOnRank, MissingIC, MissingICGL, FTSampleCheck, JigCheck, KanaCleanBefore, KanaCleanAfter, NGSampleCheck_Pn, NGSampleCheck_N, VisualCheckMode, VisualCheckAbnormal, VisualCheckAdjust, FirstShotCheckMode, FirstShotCheckModeAbnormal, FirstShotCheckModeAdjust, EmbossTapeChange, CoverTapeChange, IronStampCleaning, GLCheck, LotJudgement, GoodAdjust, NGAdjust, FTNGAdjust, OSNGAdjust, MekaNGAdjust, MarkerNGAdjust, TPRecogNGadjust, OPJudgement, Remark, InputQtyAdjust, EmbossTapeNo, MoldRecogNGAdjust, TGCondition, HasuuNowAdjust, FirstInspTestHead, OutsourceLotNo, ContainerBoxNo, sumyld, Original_MCNo, Original_LotNo, Original_LotStartTime, Original_MCType, Original_OPNo, Original_InputQty, Original_TotalGood, Original_TotalNG, Original_OPRate, Original_MaximumRPM, Original_AverageRPM, Original_MTBF, Original_MTTR, Original_AlarmTotal, Original_LotEndTime, Original_RunTime, Original_StopTime, Original_AlarmTime, Original_SelfConVersion, Original_NetVersion, Original_TestFlow, Original_LaserMark1, Original_LaserMark2, Original_LaserMark3, Original_OSProgram, Original_FTProgram, Original_TelekoCheck, Original_ASICheck, Original_HasuuBefore, Original_HasuuNow, Original_FrontNG, Original_OS2NG, Original_FrontMarkerNG, Original_FLMarkerNG, Original_OSTesterNG, Original_FTTesterNG, Original_MarkingRecogNG, Original_MoldRecogNG, Original_TPRecogNG, Original_MekaNG1, Original_MekaNG2, Original_MekaNG3, Original_MekaNG4, Original_MekaNG5, Original_ActualMekaNG1, Original_ActualMekaNG2, Original_ActualMekaNG3, Original_ActualMekaNG4, Original_ActualMekaNG5, Original_OSChPass1, Original_OSChPass2, Original_OSChPass3, Original_OSChPass4, Original_OSChPass5, Original_OSChPass6, Original_OSChPass7, Original_OSChPass8, Original_OS1ChFail1, Original_OS1ChFail2, Original_OS1ChFail3, Original_OS1ChFail4, Original_OS1ChFail5, Original_OS1ChFail6, Original_OS1ChFail7, Original_OS1ChFail8, Original_OS2ChFail1, Original_OS2ChFail2, Original_OS2ChFail3, Original_OS2ChFail4, Original_OS2ChFail5, Original_OS2ChFail6, Original_OS2ChFail7, Original_OS2ChFail8, Original_OSChRetry1, Original_OSChRetry2, Original_OSChRetry3, Original_OSChRetry4, Original_OSChRetry5, Original_OSChRetry6, Original_OSChRetry7, Original_OSChRetry8, Original_FTChPass1, Original_FTChPass2, Original_FTChPass3, Original_FTChPass4, Original_FTChPass5, Original_FTChPass6, Original_FTChPass7, Original_FTChPass8, Original_FTChFail1, Original_FTChFail2, Original_FTChFail3, Original_FTChFail4, Original_FTChFail5, Original_FTChFail6, Original_FTChFail7, Original_FTChFail8, Original_FTChRetry1, Original_FTChRetry2, Original_FTChRetry3, Original_FTChRetry4, Original_FTChRetry5, Original_FTChRetry6, Original_FTChRetry7, Original_FTChRetry8, Original_WaferLotNo, Original_TempOSYield, Original_TempFTYield, Original_NomarkCheck, Original_MCProgramVersion1, Original_MCProgramVersion2, Original_MCProgramVersion3, Original_MCProgramVersion4, Original_KanagataCheck, Original_VacuumCheck, Original_DBNG, Original_PNashiNG, Original_WBNG, Original_WBInspectionNG, Original_TurningOnRank, Original_MissingIC, Original_MissingICGL, Original_FTSampleCheck, Original_JigCheck, Original_KanaCleanBefore, Original_KanaCleanAfter, Original_NGSampleCheck_Pn, Original_NGSampleCheck_N, Original_VisualCheckMode, Original_VisualCheckAbnormal, Original_VisualCheckAdjust, Original_FirstShotCheckMode, Original_FirstShotCheckModeAbnormal, Original_FirstShotCheckModeAdjust, Original_EmbossTapeChange, Original_CoverTapeChange, Original_IronStampCleaning, Original_GLCheck, Original_LotJudgement, Original_GoodAdjust, Original_NGAdjust, Original_FTNGAdjust, Original_OSNGAdjust, Original_MekaNGAdjust, Original_MarkerNGAdjust, Original_TPRecogNGadjust, Original_OPJudgement, Original_Remark, Original_InputQtyAdjust, Original_EmbossTapeNo, Original_MoldRecogNGAdjust, Original_TGCondition, Original_HasuuNowAdjust, Original_FirstInspTestHead, Original_OutsourceLotNo, Original_ContainerBoxNo, Original_sumyld);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private FLDataTableAdapter _fLDataTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public FLDataTableAdapter FLDataTableAdapter {
            get {
                return this._fLDataTableAdapter;
            }
            set {
                this._fLDataTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._fLDataTableAdapter != null) 
                            && (this._fLDataTableAdapter.Connection != null))) {
                    return this._fLDataTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._fLDataTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private int UpdateUpdatedRows(DBxDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._fLDataTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FLData.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._fLDataTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private int UpdateInsertedRows(DBxDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._fLDataTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FLData.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._fLDataTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private int UpdateDeletedRows(DBxDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._fLDataTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FLData.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._fLDataTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public virtual int UpdateAll(DBxDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._fLDataTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._fLDataTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._fLDataTableAdapter != null)) {
                    revertConnections.Add(this._fLDataTableAdapter, this._fLDataTableAdapter.Connection);
                    this._fLDataTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._fLDataTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._fLDataTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fLDataTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fLDataTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._fLDataTableAdapter != null)) {
                    this._fLDataTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._fLDataTableAdapter]));
                    this._fLDataTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591